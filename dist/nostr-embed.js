/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.nostrEmbed=t():e.nostrEmbed=t()}(this,(()=>(()=>{var e,t,n={715:(e,t)=>{"use strict";t.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let e=0;e<n.length;e++){const t=n.charAt(e);r[t]=e}function o(e){const t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function i(e){let t=1;for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+e+")";t=o(t)^r>>5}t=o(t);for(let n=0;n<e.length;++n){const r=e.charCodeAt(n);t=o(t)^31&r}return t}function s(e,t,n,r){let o=0,i=0;const s=(1<<n)-1,a=[];for(let r=0;r<e.length;++r)for(o=o<<t|e[r],i+=t;i>=n;)i-=n,a.push(o>>i&s);if(r)i>0&&a.push(o<<n-i&s);else{if(i>=t)return"Excess padding";if(o<<n-i&s)return"Non-zero padding"}return a}function a(e){return s(e,8,5,!0)}function c(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t}function l(e){const t=s(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}function A(e){let t;function s(e,n){if(n=n||90,e.length<8)return e+" too short";if(e.length>n)return"Exceeds length limit";const s=e.toLowerCase(),a=e.toUpperCase();if(e!==s&&e!==a)return"Mixed-case string "+e;const c=(e=s).lastIndexOf("1");if(-1===c)return"No separator character for "+e;if(0===c)return"Missing prefix for "+e;const l=e.slice(0,c),A=e.slice(c+1);if(A.length<6)return"Data too short";let f=i(l);if("string"==typeof f)return f;const u=[];for(let e=0;e<A.length;++e){const t=A.charAt(e),n=r[t];if(void 0===n)return"Unknown character "+t;f=o(f)^n,e+6>=A.length||u.push(n)}return f!==t?"Invalid checksum for "+e:{prefix:l,words:u}}return t="bech32"===e?1:734539939,{decodeUnsafe:function(e,t){const n=s(e,t);if("object"==typeof n)return n},decode:function(e,t){const n=s(e,t);if("object"==typeof n)return n;throw new Error(n)},encode:function(e,r,s){if(s=s||90,e.length+7+r.length>s)throw new TypeError("Exceeds length limit");let a=i(e=e.toLowerCase());if("string"==typeof a)throw new Error(a);let c=e+"1";for(let e=0;e<r.length;++e){const t=r[e];if(t>>5!=0)throw new Error("Non 5-bit word");a=o(a)^t,c+=n.charAt(t)}for(let e=0;e<6;++e)a=o(a);a^=t;for(let e=0;e<6;++e){const t=a>>5*(5-e)&31;c+=n.charAt(t)}return c},toWords:a,fromWordsUnsafe:c,fromWords:l}}t.gW=A("bech32"),A("bech32m")},218:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.ne-relative{position:relative}.ne-block{display:block}.ne-flex{display:flex}.ne-hidden{display:none}.ne-h-12{height:3rem}.ne-w-12{width:3rem}.ne-w-5{width:1.25rem}.ne-w-full{width:100%}.ne-cursor-pointer{cursor:pointer}.ne-flex-row{flex-direction:row}.ne-flex-col{flex-direction:column}.ne-items-center{align-items:center}.ne-justify-between{justify-content:space-between}.ne-gap-1{gap:.25rem}.ne-gap-2{gap:.5rem}.ne-gap-4{gap:1rem}.ne-break-words{word-wrap:break-word}.ne-rounded-lg{border-radius:.5rem}.ne-bg-\\[\\#fcfcfc\\]{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity))}.ne-px-4{padding-left:1rem;padding-right:1rem}.ne-py-5{padding-bottom:1.25rem;padding-top:1.25rem}.ne-pb-3{padding-bottom:.75rem}.ne-font-sans{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji}.ne-text-lg{font-size:1.125rem;line-height:1.75rem}.ne-text-gray-900{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.ne-text-red-800{--tw-text-opacity:1;color:#991b1b;color:rgb(153 27 27/var(--tw-text-opacity))}.ne-no-underline{text-decoration-line:none}.ne-opacity-30{opacity:.3}.nostrEmbedCard{--tw-bg-opacity:1;background-color:#fcfcfc;background-color:rgb(252 252 252/var(--tw-bg-opacity));border-radius:.5rem;display:flex;flex-direction:column;gap:2rem;padding:1.25rem 1rem .75rem}@media (min-width:768px){.nostrEmbedCard{max-width:600px}}.nostrEmbedCard{border:1px solid #ddd;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,BlinkMacSystemFont,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;text-align:left}.cardContent{word-wrap:break-word;font-size:1.125rem;line-height:1.75rem;white-space:pre-line}.cardProfile{align-items:center;display:flex;flex-direction:row;gap:1rem}.profileImg{border-radius:9999px;height:3rem;width:3rem}.profileDetails{display:flex;flex-direction:column}.profileName{font-size:1.125rem;font-weight:700;line-height:1.75rem}.profilePkey{align-items:center;display:flex;flex-direction:row;gap:.5rem}.cardMeta{display:flex;flex-direction:column;gap:.25rem}@media (min-width:768px){.cardMeta{gap:.5rem}}hr{margin:.25rem;opacity:.3;width:100%}.cardInteractions{display:flex;flex-direction:row;justify-content:space-between}@media (min-width:768px){.cardInteractions{gap:3rem;justify-content:flex-start}}.interactionContainer{align-items:center;display:flex;flex-direction:row;gap:.5rem}.copyIcon,.heartIcon,.linkIcon,.replyIcon,.repostIcon{display:block;height:1.25rem;width:1.25rem}.copyIcon,.heartIcon,.linkCopyBtn,.linkIcon,.linkLink,.replyIcon,.repostIcon{--tw-text-opacity:1;color:#111827;color:rgb(17 24 39/var(--tw-text-opacity))}.linkCopyBtn,.linkLink{align-items:center;background-color:transparent;border:0;cursor:pointer;display:flex;flex-direction:row;gap:.5rem;position:relative;text-decoration-line:none}.linkCopyBtn:hover,.linkCopyBtn:hover .copyIcon,.linkLink:hover{--tw-text-opacity:1;color:#4b5563;color:rgb(75 85 99/var(--tw-text-opacity))}.linkCopyBtn.green,.linkCopyBtn.green .copyIcon{--tw-text-opacity:1;color:#16a34a;color:rgb(22 163 74/var(--tw-text-opacity))}.displayText{display:none}@media (min-width:768px){.displayText{display:flex;font-size:.875rem;line-height:1.25rem;visibility:visible}}.copyText{display:none}@media (min-width:768px){.md\\:ne-visible{visibility:visible}.md\\:ne-flex{display:flex}.md\\:ne-max-w-\\[600px\\]{max-width:600px}.md\\:ne-justify-start{justify-content:flex-start}}","",{version:3,sources:["webpack://./src/components/style.css","<no source>"],names:[],mappings:"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",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.nostrEmbedCard {\n  @apply ne-px-4 ne-py-5 ne-pb-3 ne-bg-[#fcfcfc] ne-rounded-lg md:ne-max-w-[600px] ne-flex ne-flex-col ne-gap-8;\n  @apply ne-font-sans ne-text-left;\n  border: 1px solid #ddd;\n}\n\n.cardContent {\n  @apply ne-text-lg ne-break-words ne-whitespace-pre-line;\n}\n\n.cardProfile {\n  @apply ne-flex ne-flex-row ne-gap-4 ne-items-center;\n}\n\n.profileImg {\n  @apply ne-w-12 ne-h-12 ne-rounded-full;\n}\n\n.profileDetails {\n  @apply ne-flex ne-flex-col;\n}\n\n.profileName {\n  @apply ne-text-lg ne-font-bold;\n}\n\n.profilePkey {\n  @apply ne-flex ne-flex-row ne-gap-2 ne-items-center;\n}\n\n.cardMeta {\n  @apply ne-flex ne-flex-col ne-gap-1 md:ne-gap-2;\n}\n\nhr {\n  @apply ne-w-full ne-opacity-30 ne-m-1;\n}\n\n.cardInteractions {\n  @apply ne-flex ne-flex-row ne-justify-between md:ne-justify-start md:ne-gap-12;\n}\n\n.interactionContainer {\n  @apply ne-flex ne-flex-row ne-items-center ne-gap-2;\n}\n\n.replyIcon,\n.repostIcon,\n.heartIcon,\n.linkIcon,\n.copyIcon {\n  @apply ne-text-gray-900 ne-block ne-w-5 ne-h-5;\n}\n\n.linkCopyBtn,\n.linkLink {\n  @apply ne-text-gray-900 ne-no-underline ne-flex ne-flex-row ne-items-center ne-gap-2 ne-cursor-pointer ne-relative;\n  border: 0;\n  background-color: transparent;\n}\n\n.linkCopyBtn:hover,\n.linkLink:hover,\n.linkCopyBtn:hover .copyIcon {\n  @apply ne-text-gray-600;\n}\n\n.linkCopyBtn.green,\n.linkCopyBtn.green .copyIcon {\n  @apply ne-text-green-600;\n}\n\n.displayText {\n  @apply ne-hidden md:ne-flex md:ne-visible md:ne-text-sm;\n}\n\n.copyText {\n  @apply ne-hidden;\n}\n",null],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);r&&s[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),t.push(A))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],A=i[l]||0,f="".concat(l," ").concat(A);i[l]=A+1;var u=n(f),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(d);else{var p=o(d,r);r.byIndex=a,t.splice(a,0,{identifier:f,updater:p,references:1})}s.push(f)}return s}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var c=r(e,o),l=0;l<i.length;l++){var A=n(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},856:()=>{}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>n[e]));return s.default=()=>n,o.d(i,s),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0;var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>zt});var e,t,n,r,s,a,c,l={},A=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function u(e,t){for(var n in t)e[n]=t[n];return e}function d(e){var t=e.parentNode;t&&t.removeChild(e)}function p(t,n,r){var o,i,s,a={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?e.call(arguments,2):r),"function"==typeof t&&null!=t.defaultProps)for(s in t.defaultProps)void 0===a[s]&&(a[s]=t.defaultProps[s]);return h(t,a,o,i,null)}function h(e,r,o,i,s){var a={type:e,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++n:s};return null==s&&null!=t.vnode&&t.vnode(a),a}function _(e){return e.children}function y(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function m(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||y(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||y(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?w:g,i):e.removeEventListener(t,i?w:g,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&-1==t.indexOf("-")?e.removeAttribute(t):e.setAttribute(t,n))}}function g(e){r=!0;try{return this.l[e.type+!1](t.event?t.event(e):e)}finally{r=!1}}function w(e){r=!0;try{return this.l[e.type+!0](t.event?t.event(e):e)}finally{r=!1}}function C(e,t){this.props=e,this.context=t}function v(e,t){if(null==t)return e.__?v(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?v(e):null}function B(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return B(e)}}function b(e){r?setTimeout(e):c(e)}function x(e){(!e.__d&&(e.__d=!0)&&s.push(e)&&!k.__r++||a!==t.debounceRendering)&&((a=t.debounceRendering)||b)(k)}function k(){var e,t,n,r,o,i,a,c;for(s.sort((function(e,t){return e.__v.__b-t.__v.__b}));e=s.shift();)e.__d&&(t=s.length,r=void 0,o=void 0,a=(i=(n=e).__v).__e,(c=n.__P)&&(r=[],(o=u({},i)).__v=i.__v+1,D(c,i,o,n.__n,void 0!==c.ownerSVGElement,null!=i.__h?[a]:null,r,null==a?v(i):a,i.__h),P(r,i),i.__e!=a&&B(i)),s.length>t&&s.sort((function(e,t){return e.__v.__b-t.__v.__b})));k.__r=0}function E(e,t,n,r,o,i,s,a,c,f){var u,d,p,y,m,g,w,C=r&&r.__k||A,B=C.length;for(n.__k=[],u=0;u<t.length;u++)if(null!=(y=n.__k[u]=null==(y=t[u])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?h(null,y,null,null,y):Array.isArray(y)?h(_,{children:y},null,null,null):y.__b>0?h(y.type,y.props,y.key,y.ref?y.ref:null,y.__v):y)){if(y.__=n,y.__b=n.__b+1,null===(p=C[u])||p&&y.key==p.key&&y.type===p.type)C[u]=void 0;else for(d=0;d<B;d++){if((p=C[d])&&y.key==p.key&&y.type===p.type){C[d]=void 0;break}p=null}D(e,y,p=p||l,o,i,s,a,c,f),m=y.__e,(d=y.ref)&&p.ref!=d&&(w||(w=[]),p.ref&&w.push(p.ref,null,y),w.push(d,y.__c||m,y)),null!=m?(null==g&&(g=m),"function"==typeof y.type&&y.__k===p.__k?y.__d=c=S(y,c,e):c=I(e,y,p,C,m,c),"function"==typeof n.type&&(n.__d=c)):c&&p.__e==c&&c.parentNode!=e&&(c=v(p))}for(n.__e=g,u=B;u--;)null!=C[u]&&("function"==typeof n.type&&null!=C[u].__e&&C[u].__e==n.__d&&(n.__d=H(r).nextSibling),T(C[u],C[u]));if(w)for(u=0;u<w.length;u++)N(w[u],w[++u],w[++u])}function S(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?S(r,t,n):I(n,r,r,o,r.__e,t));return t}function I(e,t,n,r,o,i){var s,a,c;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(null==n||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),s=null;else{for(a=i,c=0;(a=a.nextSibling)&&c<r.length;c+=1)if(a==o)break e;e.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function H(e){var t,n,r;if(null==e.type||"string"==typeof e.type)return e.__e;if(e.__k)for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=H(n)))return r;return null}function D(e,n,r,o,i,s,a,c,l){var A,f,d,p,h,y,m,g,w,v,B,b,x,k,S,I=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(l=r.__h,c=n.__e=r.__e,n.__h=null,s=[c]),(A=t.__b)&&A(n);try{e:if("function"==typeof I){if(g=n.props,w=(A=I.contextType)&&o[A.__c],v=A?w?w.props.value:A.__:o,r.__c?m=(f=n.__c=r.__c).__=f.__E:("prototype"in I&&I.prototype.render?n.__c=f=new I(g,v):(n.__c=f=new C(g,v),f.constructor=I,f.render=j),w&&w.sub(f),f.props=g,f.state||(f.state={}),f.context=v,f.__n=o,d=f.__d=!0,f.__h=[],f._sb=[]),null==f.__s&&(f.__s=f.state),null!=I.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=u({},f.__s)),u(f.__s,I.getDerivedStateFromProps(g,f.__s))),p=f.props,h=f.state,f.__v=n,d)null==I.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==I.getDerivedStateFromProps&&g!==p&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(g,v),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(g,f.__s,v)||n.__v===r.__v){for(n.__v!==r.__v&&(f.props=g,f.state=f.__s,f.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(e){e&&(e.__=n)})),B=0;B<f._sb.length;B++)f.__h.push(f._sb[B]);f._sb=[],f.__h.length&&a.push(f);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(g,f.__s,v),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(p,h,y)}))}if(f.context=v,f.props=g,f.__P=e,b=t.__r,x=0,"prototype"in I&&I.prototype.render){for(f.state=f.__s,f.__d=!1,b&&b(n),A=f.render(f.props,f.state,f.context),k=0;k<f._sb.length;k++)f.__h.push(f._sb[k]);f._sb=[]}else do{f.__d=!1,b&&b(n),A=f.render(f.props,f.state,f.context),f.state=f.__s}while(f.__d&&++x<25);f.state=f.__s,null!=f.getChildContext&&(o=u(u({},o),f.getChildContext())),d||null==f.getSnapshotBeforeUpdate||(y=f.getSnapshotBeforeUpdate(p,h)),S=null!=A&&A.type===_&&null==A.key?A.props.children:A,E(e,Array.isArray(S)?S:[S],n,r,o,i,s,a,c,l),f.base=n.__e,n.__h=null,f.__h.length&&a.push(f),m&&(f.__E=f.__=null),f.__e=!1}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=U(r.__e,n,r,o,i,s,a,l);(A=t.diffed)&&A(n)}catch(e){n.__v=null,(l||null!=s)&&(n.__e=c,n.__h=!!l,s[s.indexOf(c)]=null),t.__e(e,n,r)}}function P(e,n){t.__c&&t.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){t.__e(e,n.__v)}}))}function U(t,n,r,o,i,s,a,c){var A,f,u,p=r.props,h=n.props,_=n.type,y=0;if("svg"===_&&(i=!0),null!=s)for(;y<s.length;y++)if((A=s[y])&&"setAttribute"in A==!!_&&(_?A.localName===_:3===A.nodeType)){t=A,s[y]=null;break}if(null==t){if(null===_)return document.createTextNode(h);t=i?document.createElementNS("http://www.w3.org/2000/svg",_):document.createElement(_,h.is&&h),s=null,c=!1}if(null===_)p===h||c&&t.data===h||(t.data=h);else{if(s=s&&e.call(t.childNodes),f=(p=r.props||l).dangerouslySetInnerHTML,u=h.dangerouslySetInnerHTML,!c){if(null!=s)for(p={},y=0;y<t.attributes.length;y++)p[t.attributes[y].name]=t.attributes[y].value;(u||f)&&(u&&(f&&u.__html==f.__html||u.__html===t.innerHTML)||(t.innerHTML=u&&u.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||m(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||m(e,i,t[i],n[i],r)}(t,h,p,i,c),u)n.__k=[];else if(y=n.props.children,E(t,Array.isArray(y)?y:[y],n,r,o,i&&"foreignObject"!==_,s,a,s?s[0]:r.__k&&v(r,0),c),null!=s)for(y=s.length;y--;)null!=s[y]&&d(s[y]);c||("value"in h&&void 0!==(y=h.value)&&(y!==t.value||"progress"===_&&!y||"option"===_&&y!==p.value)&&m(t,"value",y,p.value,!1),"checked"in h&&void 0!==(y=h.checked)&&y!==t.checked&&m(t,"checked",y,p.checked,!1))}return t}function N(e,n,r){try{"function"==typeof e?e(n):e.current=n}catch(e){t.__e(e,r)}}function T(e,n,r){var o,i;if(t.unmount&&t.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||N(o,null,n)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){t.__e(e,n)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&T(o[i],n,r||"function"!=typeof e.type);r||null==e.__e||d(e.__e),e.__=e.__e=e.__d=void 0}function j(e,t,n){return this.constructor(e,n)}function M(n,r,o){var i,s,a;t.__&&t.__(n,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,a=[],D(r,n=(!i&&o||r).__k=p(_,null,[n]),s||l,l,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?e.call(r.childNodes):null,a,!i&&o?o:s?s.__e:r.firstChild,i),P(a,n)}e=A.slice,t={__e:function(e,t,n,r){for(var o,i,s;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),s=o.__d),s)return o.__E=o}catch(t){e=t}throw e}},n=0,r=!1,C.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=u({},this.state),"function"==typeof e&&(e=e(u({},n),this.props)),e&&u(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),x(this))},C.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),x(this))},C.prototype.render=_,s=[],c="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,k.__r=0;var R=o(715),O=o(856),z=o.t(O,2);const W=BigInt(0),$=BigInt(1),q=BigInt(2),G=BigInt(3),L=BigInt(8),V=Object.freeze({a:W,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:$,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),Y=(e,t)=>(e+t/q)/t,F={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=V,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-$*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,s=BigInt("0x100000000000000000000000000000000"),a=Y(i*e,t),c=Y(-r*e,t);let l=ve(e-a*n-c*o,t),A=ve(-a*r-c*i,t);const f=l>s,u=A>s;if(f&&(l=t-l),u&&(A=t-A),l>s||A>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:f,k1:l,k2neg:u,k2:A}}},Z=32,K=32,J=Z+1,Q=2*Z+1;function X(e){const{a:t,b:n}=V,r=ve(e*e),o=ve(r*e);return ve(o+t*e+n)}const ee=V.a===W;class te extends Error{constructor(e){super(e)}}function ne(e){if(!(e instanceof re))throw new TypeError("JacobianPoint expected")}class re{constructor(e,t,n){this.x=e,this.y=t,this.z=n}static fromAffine(e){if(!(e instanceof se))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(se.ZERO)?re.ZERO:new re(e.x,e.y,$)}static toAffineBatch(e){const t=function(e,t=V.P){const n=new Array(e.length),r=e.reduce(((e,r,o)=>r===W?e:(n[o]=e,ve(e*r,t))),$),o=be(r,t);return e.reduceRight(((e,r,o)=>r===W?e:(n[o]=ve(e*n[o],t),ve(e*r,t))),o),n}(e.map((e=>e.z)));return e.map(((e,n)=>e.toAffine(t[n])))}static normalizeZ(e){return re.toAffineBatch(e).map(re.fromAffine)}equals(e){ne(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e,a=ve(r*r),c=ve(s*s),l=ve(t*c),A=ve(o*a),f=ve(ve(n*s)*c),u=ve(ve(i*r)*a);return l===A&&f===u}negate(){return new re(this.x,ve(-this.y),this.z)}double(){const{x:e,y:t,z:n}=this,r=ve(e*e),o=ve(t*t),i=ve(o*o),s=e+o,a=ve(q*(ve(s*s)-r-i)),c=ve(G*r),l=ve(c*c),A=ve(l-q*a),f=ve(c*(a-A)-L*i),u=ve(q*t*n);return new re(A,f,u)}add(e){ne(e);const{x:t,y:n,z:r}=this,{x:o,y:i,z:s}=e;if(o===W||i===W)return this;if(t===W||n===W)return e;const a=ve(r*r),c=ve(s*s),l=ve(t*c),A=ve(o*a),f=ve(ve(n*s)*c),u=ve(ve(i*r)*a),d=ve(A-l),p=ve(u-f);if(d===W)return p===W?this.double():re.ZERO;const h=ve(d*d),_=ve(d*h),y=ve(l*h),m=ve(p*p-_-q*y),g=ve(p*(y-m)-f*_),w=ve(r*s*d);return new re(m,g,w)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const t=re.ZERO;if("bigint"==typeof e&&e===W)return t;let n=Ce(e);if(n===$)return this;if(!ee){let e=t,r=this;for(;n>W;)n&$&&(e=e.add(r)),r=r.double(),n>>=$;return e}let{k1neg:r,k1:o,k2neg:i,k2:s}=F.splitScalar(n),a=t,c=t,l=this;for(;o>W||s>W;)o&$&&(a=a.add(l)),s&$&&(c=c.add(l)),l=l.double(),o>>=$,s>>=$;return r&&(a=a.negate()),i&&(c=c.negate()),c=new re(ve(c.x*F.beta),c.y,c.z),a.add(c)}precomputeWindow(e){const t=ee?128/e+1:256/e+1,n=[];let r=this,o=r;for(let i=0;i<t;i++){o=r,n.push(o);for(let t=1;t<2**(e-1);t++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(e,t){!t&&this.equals(re.BASE)&&(t=se.BASE);const n=t&&t._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=t&&ie.get(t);r||(r=this.precomputeWindow(n),t&&1!==n&&(r=re.normalizeZ(r),ie.set(t,r)));let o=re.ZERO,i=re.BASE;const s=1+(ee?128/n:256/n),a=2**(n-1),c=BigInt(2**n-1),l=2**n,A=BigInt(n);for(let t=0;t<s;t++){const n=t*a;let s=Number(e&c);e>>=A,s>a&&(s-=l,e+=$);const f=n,u=n+Math.abs(s)-1,d=t%2!=0,p=s<0;0===s?i=i.add(oe(d,r[f])):o=o.add(oe(p,r[u]))}return{p:o,f:i}}multiply(e,t){let n,r,o=Ce(e);if(ee){const{k1neg:e,k1:i,k2neg:s,k2:a}=F.splitScalar(o);let{p:c,f:l}=this.wNAF(i,t),{p:A,f}=this.wNAF(a,t);c=oe(e,c),A=oe(s,A),A=new re(ve(A.x*F.beta),A.y,A.z),n=c.add(A),r=l.add(f)}else{const{p:e,f:i}=this.wNAF(o,t);n=e,r=i}return re.normalizeZ([n,r])[0]}toAffine(e){const{x:t,y:n,z:r}=this,o=this.equals(re.ZERO);null==e&&(e=o?L:be(r));const i=e,s=ve(i*i),a=ve(s*i),c=ve(t*s),l=ve(n*a),A=ve(r*i);if(o)return se.ZERO;if(A!==$)throw new Error("invZ was invalid");return new se(c,l)}}function oe(e,t){const n=t.negate();return e?n:t}re.BASE=new re(V.Gx,V.Gy,$),re.ZERO=new re(W,$,W);const ie=new WeakMap;class se{constructor(e,t){this.x=e,this.y=t}_setWindowSize(e){this._WINDOW_SIZE=e,ie.delete(this)}hasEvenY(){return this.y%q===W}static fromCompressedHex(e){const t=32===e.length,n=ge(t?e:e.subarray(1));if(!Ie(n))throw new Error("Point is not on curve");let r=function(e){const{P:t}=V,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),a=BigInt(88),c=e*e*e%t,l=c*c*e%t,A=Be(l,G)*l%t,f=Be(A,G)*l%t,u=Be(f,q)*c%t,d=Be(u,r)*u%t,p=Be(d,o)*d%t,h=Be(p,s)*p%t,_=Be(h,a)*h%t,y=Be(_,s)*p%t,m=Be(y,G)*l%t,g=Be(m,i)*d%t,w=Be(g,n)*c%t,C=Be(w,q),v=C*C%t;if(v!==e)throw new Error("Cannot find square root");return C}(X(n));const o=(r&$)===$;if(t)o&&(r=ve(-r));else{1==(1&e[0])!==o&&(r=ve(-r))}const i=new se(n,r);return i.assertValidity(),i}static fromUncompressedHex(e){const t=ge(e.subarray(1,Z+1)),n=ge(e.subarray(Z+1,2*Z+1)),r=new se(t,n);return r.assertValidity(),r}static fromHex(e){const t=we(e),n=t.length,r=t[0];if(n===Z)return this.fromCompressedHex(t);if(n===J&&(2===r||3===r))return this.fromCompressedHex(t);if(n===Q&&4===r)return this.fromUncompressedHex(t);throw new Error(`Point.fromHex: received invalid point. Expected 32-${J} compressed bytes or ${Q} uncompressed bytes, not ${n}`)}static fromPrivateKey(e){return se.BASE.multiply(He(e))}static fromSignature(e,t,n){const{r,s:o}=Pe(t);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=xe(we(e)),{n:s}=V,a=2===n||3===n?r+s:r,c=be(a,s),l=ve(-i*c,s),A=ve(o*c,s),f=1&n?"03":"02",u=se.fromHex(f+pe(a)),d=se.BASE.multiplyAndAddUnsafe(u,l,A);if(!d)throw new Error("Cannot recover signature: point at infinify");return d.assertValidity(),d}toRawBytes(e=!1){return me(this.toHex(e))}toHex(e=!1){const t=pe(this.x);if(e){return`${this.hasEvenY()?"02":"03"}${t}`}return`04${t}${pe(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:t,y:n}=this;if(!Ie(t)||!Ie(n))throw new Error(e);const r=ve(n*n);if(ve(r-X(t))!==W)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new se(this.x,ve(-this.y))}double(){return re.fromAffine(this).double().toAffine()}add(e){return re.fromAffine(this).add(re.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return re.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,t,n){const r=re.fromAffine(this),o=t===W||t===$||this!==se.BASE?r.multiplyUnsafe(t):r.multiply(t),i=re.fromAffine(e).multiplyUnsafe(n),s=o.add(i);return s.equals(re.ZERO)?void 0:s.toAffine()}}function ae(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function ce(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${ue(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:ge(n),left:e.subarray(t+2)}}se.BASE=new se(V.Gx,V.Gy),se.ZERO=new se(W,W);class le{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromCompact(e){const t=e instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof e&&!t)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=t?ue(e):e;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new le(ye(r.slice(0,64)),ye(r.slice(64,128)))}static fromDER(e){const t=e instanceof Uint8Array;if("string"!=typeof e&&!t)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${ue(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=ce(e.subarray(2)),{data:r,left:o}=ce(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${ue(o)}`);return{r:t,s:r}}(t?e:me(e));return new le(n,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:t}=this;if(!Se(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Se(t))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=V.n>>$;return this.s>e}normalizeS(){return this.hasHighS()?new le(this.r,ve(-this.s,V.n)):this}toDERRawBytes(){return me(this.toDERHex())}toDERHex(){const e=ae(_e(this.s)),t=ae(_e(this.r)),n=e.length/2,r=t.length/2,o=_e(n),i=_e(r);return`30${_e(r+n+4)}02${i}${t}02${o}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return me(this.toCompactHex())}toCompactHex(){return pe(this.r)+pe(this.s)}}function Ae(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const o=e[t];n.set(o,r),r+=o.length}return n}const fe=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function ue(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=fe[e[n]];return t}const de=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function pe(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(W<=e&&e<de))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function he(e){const t=me(pe(e));if(32!==t.length)throw new Error("Error: expected 32 bytes");return t}function _e(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function ye(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function me(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=2*n,o=e.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[n]=i}return t}function ge(e){return ye(ue(e))}function we(e){return e instanceof Uint8Array?Uint8Array.from(e):me(e)}function Ce(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&Se(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function ve(e,t=V.P){const n=e%t;return n>=W?n:t+n}function Be(e,t){const{P:n}=V;let r=e;for(;t-- >W;)r*=r,r%=n;return r}function be(e,t=V.P){if(e===W||t<=W)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=ve(e,t),r=t,o=W,i=$,s=$,a=W;for(;n!==W;){const e=r/n,t=r%n,c=o-s*e,l=i-a*e;r=n,n=t,o=s,i=a,s=c,a=l}if(r!==$)throw new Error("invert: does not exist");return ve(o,t)}function xe(e,t=!1){const n=function(e){const t=8*e.length-8*K,n=ge(e);return t>0?n>>BigInt(t):n}(e);if(t)return n;const{n:r}=V;return n>=r?n-r:n}let ke,Ee;function Se(e){return W<e&&e<V.n}function Ie(e){return W<e&&e<V.P}function He(e){let t;if("bigint"==typeof e)t=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if("string"==typeof e){if(e.length!==2*K)throw new Error("Expected 32 bytes of private key");t=ye(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==K)throw new Error("Expected 32 bytes of private key");t=ge(e)}if(!Se(t))throw new Error("Expected private key: 0 < key < n");return t}function De(e){return e instanceof se?(e.assertValidity(),e):se.fromHex(e)}function Pe(e){if(e instanceof le)return e.assertValidity(),e;try{return le.fromDER(e)}catch(t){return le.fromCompact(e)}}function Ue(e){return ve(ge(e),V.n)}class Ne{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromHex(e){const t=we(e);if(64!==t.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${t.length}`);const n=ge(t.subarray(0,32)),r=ge(t.subarray(32,64));return new Ne(n,r)}assertValidity(){const{r:e,s:t}=this;if(!Ie(e)||!Se(t))throw new Error("Invalid signature")}toHex(){return pe(this.r)+pe(this.s)}toRawBytes(){return me(this.toHex())}}class Te{constructor(e,t,n=Ge.randomBytes()){if(null==e)throw new TypeError(`sign: Expected valid message, not "${e}"`);this.m=we(e);const{x:r,scalar:o}=this.getScalar(He(t));if(this.px=r,this.d=o,this.rand=we(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(e){const t=se.fromPrivateKey(e),n=t.hasEvenY()?e:V.n-e;return{point:t,scalar:n,x:t.toRawX()}}initNonce(e,t){return he(e^ge(t))}finalizeNonce(e){const t=ve(ge(e),V.n);if(t===W)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(t);return{R:n,rx:r,k:o}}finalizeSig(e,t,n,r){return new Ne(e.x,ve(t+n*r,V.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:e,d:t,px:n,rand:r}=this,o=Ge.taggedHash,i=this.initNonce(t,await o($e.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(await o($e.nonce,i,n,e)),l=Ue(await o($e.challenge,a,n,e)),A=this.finalizeSig(s,c,l,t);return await Re(A,e,n)||this.error(),A}calcSync(){const{m:e,d:t,px:n,rand:r}=this,o=Ge.taggedHashSync,i=this.initNonce(t,o($e.aux,r)),{R:s,rx:a,k:c}=this.finalizeNonce(o($e.nonce,i,n,e)),l=Ue(o($e.challenge,a,n,e)),A=this.finalizeSig(s,c,l,t);return Oe(A,e,n)||this.error(),A}}function je(e,t,n){const r=e instanceof Ne,o=r?e:Ne.fromHex(e);return r&&o.assertValidity(),{...o,m:we(t),P:De(n)}}function Me(e,t,n,r){const o=se.BASE.multiplyAndAddUnsafe(t,He(n),ve(-r,V.n));return!(!o||!o.hasEvenY()||o.x!==e)}async function Re(e,t,n){try{const{r,s:o,m:i,P:s}=je(e,t,n),a=Ue(await Ge.taggedHash($e.challenge,he(r),s.toRawX(),i));return Me(r,s,o,a)}catch(e){return!1}}function Oe(e,t,n){try{const{r,s:o,m:i,P:s}=je(e,t,n),a=Ue(Ge.taggedHashSync($e.challenge,he(r),s.toRawX(),i));return Me(r,s,o,a)}catch(e){if(e instanceof te)throw e;return!1}}const ze={Signature:Ne,getPublicKey:function(e){return se.fromPrivateKey(e).toRawX()},sign:async function(e,t,n){return new Te(e,t,n).calc()},verify:Re,signSync:function(e,t,n){return new Te(e,t,n).calcSync()},verifySync:Oe};se.BASE._setWindowSize(8);const We={node:z,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},$e={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},qe={},Ge={bytesToHex:ue,hexToBytes:me,concatBytes:Ae,mod:ve,invert:be,isValidPrivateKey(e){try{return He(e),!0}catch(e){return!1}},_bigintTo32Bytes:he,_normalizePrivateKey:He,hashToPrivateKey:e=>{e=we(e);const t=K+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return he(ve(ge(e),V.n-$)+$)},randomBytes:(e=32)=>{if(We.web)return We.web.getRandomValues(new Uint8Array(e));if(We.node){const{randomBytes:t}=We.node;return Uint8Array.from(t(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>Ge.hashToPrivateKey(Ge.randomBytes(K+8)),precompute(e=8,t=se.BASE){const n=t===se.BASE?t:new se(t.x,t.y);return n._setWindowSize(e),n.multiply(G),n},sha256:async(...e)=>{if(We.web){const t=await We.web.subtle.digest("SHA-256",Ae(...e));return new Uint8Array(t)}if(We.node){const{createHash:t}=We.node,n=t("sha256");return e.forEach((e=>n.update(e))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(We.web){const n=await We.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=Ae(...t),o=await We.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(We.node){const{createHmac:n}=We.node,r=n("sha256",e);return t.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=qe[e];if(void 0===n){const t=await Ge.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=Ae(t,t),qe[e]=n}return Ge.sha256(n,...t)},taggedHashSync:(e,...t)=>{if("function"!=typeof ke)throw new te("sha256Sync is undefined, you need to set it");let n=qe[e];if(void 0===n){const t=ke(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=Ae(t,t),qe[e]=n}return ke(n,...t)},_JacobianPoint:re};function Le(e){const t=[];for(let n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t}async function Ve(e){if("string"!=typeof e.content)return!1;if("number"!=typeof e.created_at)return!1;if(!Array.isArray(e.tags))return!1;for(let t=0;t<e.tags.length;t++){const n=e.tags[t];if(!Array.isArray(n))return!1;for(let e=0;e<n.length;e++)if("object"==typeof n[e])return!1}return e.id===await async function(e){const t=JSON.stringify([0,e.pubkey,e.created_at,e.kind,e.tags,e.content]),n=(new TextEncoder).encode(t);return Ge.sha256(n).then((e=>Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join("")))}(e)}async function Ye(e){return e.id&&e.pubkey&&e.sig&&await Ve(e)&&async function(e){await ze.verify(e.sig,e.id,e.pubkey)}(e)}Object.defineProperties(Ge,{sha256Sync:{configurable:!1,get:()=>ke,set(e){ke||(ke=e)}},hmacSha256Sync:{configurable:!1,get:()=>Ee,set(e){Ee||(Ee=e)}}});var Fe=0;function Ze(e,n,r,o,i,s){var a,c,l={};for(c in n)"ref"==c?a=n[c]:l[c]=n[c];var A={type:e,props:l,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--Fe,__source:i,__self:s};if("function"==typeof e&&(a=e.defaultProps))for(c in a)void 0===l[c]&&(l[c]=a[c]);return t.vnode&&t.vnode(A),A}const Ke=function(e){let{additionalClasses:t}=e,n="keyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ze("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:Ze("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};var Je,Qe,Xe,et,tt=0,nt=[],rt=[],ot=t.__b,it=t.__r,st=t.diffed,at=t.__c,ct=t.unmount;function lt(e,n){t.__h&&t.__h(Qe,e,tt||n),tt=0;var r=Qe.__H||(Qe.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:rt}),r.__[e]}function At(e){return tt=1,function(e,t,n){var r=lt(Je++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):_t(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=Qe,!Qe.u)){Qe.u=!0;var o=Qe.shouldComponentUpdate;Qe.shouldComponentUpdate=function(e,t,n){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(e){return e.__c}));if(i.every((function(e){return!e.__N})))return!o||o.call(this,e,t,n);var s=!1;return i.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(s=!0)}})),!(!s&&r.__c.props===e)&&(!o||o.call(this,e,t,n))}}return r.__N||r.__}(_t,e)}function ft(){for(var e;e=nt.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(pt),e.__H.__h.forEach(ht),e.__H.__h=[]}catch(n){e.__H.__h=[],t.__e(n,e.__v)}}t.__b=function(e){Qe=null,ot&&ot(e)},t.__r=function(e){it&&it(e),Je=0;var t=(Qe=e.__c).__H;t&&(Xe===Qe?(t.__h=[],Qe.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=rt,e.__N=e.i=void 0}))):(t.__h.forEach(pt),t.__h.forEach(ht),t.__h=[])),Xe=Qe},t.diffed=function(e){st&&st(e);var n=e.__c;n&&n.__H&&(n.__H.__h.length&&(1!==nt.push(n)&&et===t.requestAnimationFrame||((et=t.requestAnimationFrame)||dt)(ft)),n.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==rt&&(e.__=e.__V),e.i=void 0,e.__V=rt}))),Xe=Qe=null},t.__c=function(e,n){n.some((function(e){try{e.__h.forEach(pt),e.__h=e.__h.filter((function(e){return!e.__||ht(e)}))}catch(r){n.some((function(e){e.__h&&(e.__h=[])})),n=[],t.__e(r,e.__v)}})),at&&at(e,n)},t.unmount=function(e){ct&&ct(e);var n,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{pt(e)}catch(e){n=e}})),r.__H=void 0,n&&t.__e(n,r.__v))};var ut="function"==typeof requestAnimationFrame;function dt(e){var t,n=function(){clearTimeout(r),ut&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);ut&&(t=requestAnimationFrame(n))}function pt(e){var t=Qe,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),Qe=t}function ht(e){var t=Qe;e.__c=e.__(),Qe=t}function _t(e,t){return"function"==typeof t?t(e):t}const yt=function(e){let{additionalClasses:t}=e,n="copyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ze("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Ze("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};var mt=o(379),gt=o.n(mt),wt=o(795),Ct=o.n(wt),vt=o(569),Bt=o.n(vt),bt=o(565),xt=o.n(bt),kt=o(216),Et=o.n(kt),St=o(589),It=o.n(St),Ht=o(218),Dt={};Dt.styleTagTransform=It(),Dt.setAttributes=xt(),Dt.insert=Bt().bind(null,"head"),Dt.domAPI=Ct(),Dt.insertStyleElement=Et();gt()(Ht.Z,Dt);Ht.Z&&Ht.Z.locals&&Ht.Z.locals;const Pt=function(e){let{iconClasses:t,displayText:n,copyText:r}=e;const[o,i]=At("linkCopyBtn");return Ze("button",{class:o,onClick:()=>function(){try{navigator.clipboard.writeText(r),i(`${o} green`),setTimeout((()=>{i(o.replace("green","").trim())}),500)}catch(e){Error("Failed to copy: ",e)}}(),children:[Ze(yt,{additionalClasses:t}),n&&Ze("span",{class:"displayText",children:n}),Ze("span",{class:"copyText",children:r})]})};const Ut=function(e){let t,n,r,{profilePkey:o,profile:i}=e;return o&&i&&(n=function(e){const t=Le(e),n=R.gW.toWords(t);return R.gW.encode("npub",n,120)}(o),r=`${n.slice(0,10)}...${n.slice(-10)}`,t=`https://media.nostr.band/thumbs/${o.slice(-4)}/${o}-picture-64`),Ze("div",{class:"cardProfile",children:[Ze("img",{class:"profileImg",src:t||"https://via.placeholder.com/48?text=Loading"}),Ze("div",{class:"profileDetails",children:[Ze("div",{class:"profileName",children:i.display_name||"Loading..."}),Ze("div",{class:"profilePkey",children:[Ze(Ke,{additionalClasses:"w-4 h-4"}),Ze("span",{class:"pkey",children:r||"npub..."}),Ze(Pt,{iconClasses:"w-4 h-4",copyText:n})]})]})]})};const Nt=function(e){let{additionalClasses:t}=e,n="heartIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ze("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ze("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const Tt=function(e){let{additionalClasses:t}=e,n="replyIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ze("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ze("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const jt=function(e){let{additionalClasses:t}=e,n="repostIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ze("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Ze("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const Mt=function(e){let{additionalClasses:t}=e,n="linkIcon";if(t){let e=t.split(" ");e.push(n),n=e.join(" ")}return Ze("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Ze("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const Rt=function(e){let t,n,r,{note:o,repliesCount:i,repostsCount:s,likesCount:a}=e;return o.id&&o.created_at&&(t=new Date(1e3*o.created_at),r=t.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"}),n=function(e){const t=Le(e),n=R.gW.toWords(t);return R.gW.encode("note",n,120)}(o.id)),Ze("div",{class:"cardMeta",children:[Ze("div",{class:"cardDate",children:r}),Ze("hr",{}),Ze("div",{class:"cardInteractions",children:[Ze("div",{class:"interactionContainer",children:[Ze(Tt,{additionalClasses:"w-5 h-5"}),Ze("span",{class:"repliesCount",children:i})]}),Ze("div",{class:"interactionContainer",children:[Ze(jt,{additionalClasses:"w-5 h-5"}),Ze("span",{class:"repostsCount",children:s})]}),Ze("div",{class:"interactionContainer",children:[Ze(Nt,{additionalClasses:"w-5 h-5"}),Ze("span",{class:"likesCount",children:a})]}),Ze("div",{class:"interactionContainer",children:Ze("a",{href:`https://nostr.band/${n}`,class:"linkLink",children:[Ze(Mt,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),Ze("span",{class:"displayText",children:"Open"})]})}),Ze("div",{class:"interactionContainer",children:Ze(Pt,{iconClasses:"w-5 h-5",displayText:"Copy Note ID",copyText:n})})]})]})};const Ot=class extends C{constructor(e){super(e),this.state={noteId:e.noteId,relay:e.relay||"wss://relay.nostr.band",note:{},profile:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0}}componentDidMount(){const e=new WebSocket(this.state.relay);e.onopen=()=>{this.fetchNote({socket:e})},e.onerror=()=>{console.log(`Failed to connect to Nostr relay: ${e.url}`)};const t={};e.onmessage=e=>{try{const n=JSON.parse(e.data);if(!n||!n.length)throw Error("Bad reply from relay");if("NOTICE"===n[0]&&2===n.length)return;if("EOSE"===n[0]&&n.length>1)return void(n[1]in t&&t[n[1]].onEvent(null));if("EVENT"!==n[0]||n.length<3)throw Error("Unknown reply from relay");n[1]in t&&t[n[1]].onEvent(n[2])}catch(e){console.log(e)}},e.listEvents=n=>{let{sub:r,ok:o,err:i}=n,s=`embed-${Math.random()}`;const a=["REQ",s,r];e.send(JSON.stringify(a));const c=()=>{const n=s;s=null,e.send(JSON.stringify(["CLOSE",n])),delete t[n]},l=[],A=[],f=setTimeout((()=>{c(),l.length||A.length?u(null):i("timeout on relay",e.url)}),r.limit&&1===r.limit?2e3:4e3),u=async e=>{if(A.push(e),!(A.length>1))for(;A.length;)if((e=A[0])&&await Ye(e)&&l.push(e),A.shift(),!e||r.limit&&r.limit===l.length){A.splice(0,A.length),s&&(clearTimeout(f),c(),o(l));break}};t[s]={ok:o,err:i,onEvent:u}}}getEvent(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{n.limit=1,t.listEvents({sub:n,ok:t=>{e(t?t[0]:null)},err:r})}))}listEvents(e){let{socket:t,sub:n}=e;return new Promise(((e,r)=>{t.listEvents({sub:n,ok:e,err:r})}))}fetchNote(e){let{socket:t}=e;const n={ids:[this.state.noteId],kinds:[1]};this.getEvent({socket:t,sub:n}).then((e=>{e?(this.setState({note:e,profilePkey:e.pubkey}),this.fetchProfile({socket:t,profilePkey:e.pubkey}),this.fetchMeta({socket:t,noteId:this.state.noteId})):this.setState({note:{error:!0,content:"Sorry, we weren't able to find this note on the specified relay."}})})).catch((()=>{this.setState({note:{error:!0,content:"Sorry, there was an error fetching this note from the specified relay. Most often, this is because the relay isn't responding."}})}))}fetchProfile(e){let{socket:t,profilePkey:n}=e;const r={kinds:[0],authors:[n]};this.getEvent({socket:t,sub:r}).then((e=>{if(e){const t=JSON.parse(e.content);this.setState({profile:t})}})).catch((()=>{this.setState({note:{error:!0,content:"Sorry, there was an error fetching this user's profile from the specified relay."}})}))}fetchMeta(e){let{socket:t,noteId:n}=e;const r={kinds:[1,6,7],"#e":[n]};this.listEvents({socket:t,sub:r}).then((e=>{e.forEach((e=>{1===e.kind&&this.setState((e=>({repliesCount:e.repliesCount+1}))),6===e.kind&&this.setState((e=>({repostsCount:e.repostsCount+1}))),7===e.kind&&this.setState((e=>({likesCount:e.likesCount+1})))}))}))}render(){return Ze("div",{class:"nostrEmbedCard",children:[Ze(Ut,{profilePkey:this.state.profilePkey,profile:this.state.profile}),Ze("div",{class:this.state.note.error?"cardContent ne-text-red-800":"cardContent",children:this.state.note.content}),Ze(Rt,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount})]})}};function zt(e,t,n){const r=document.querySelector(t)?document.querySelector(t):document.querySelector("body");M(p(Ot,{noteId:e,relay:n}),r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,