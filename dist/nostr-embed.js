/*! For license information please see nostr-embed.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.nostrEmbed=e():t.nostrEmbed=e()}(this,(()=>(()=>{var t,e,n={715:(t,e)=>{"use strict";e.gW=void 0;const n="qpzry9x8gf2tvdw0s3jn54khce6mua7l",r={};for(let t=0;t<n.length;t++){const e=n.charAt(t);r[e]=t}function o(t){const e=t>>25;return(33554431&t)<<5^996825010&-(e>>0&1)^642813549&-(e>>1&1)^513874426&-(e>>2&1)^1027748829&-(e>>3&1)^705979059&-(e>>4&1)}function i(t){let e=1;for(let n=0;n<t.length;++n){const r=t.charCodeAt(n);if(r<33||r>126)return"Invalid prefix ("+t+")";e=o(e)^r>>5}e=o(e);for(let n=0;n<t.length;++n){const r=t.charCodeAt(n);e=o(e)^31&r}return e}function s(t,e,n,r){let o=0,i=0;const s=(1<<n)-1,a=[];for(let r=0;r<t.length;++r)for(o=o<<e|t[r],i+=e;i>=n;)i-=n,a.push(o>>i&s);if(r)i>0&&a.push(o<<n-i&s);else{if(i>=e)return"Excess padding";if(o<<n-i&s)return"Non-zero padding"}return a}function a(t){return s(t,8,5,!0)}function l(t){const e=s(t,5,8,!1);if(Array.isArray(e))return e}function c(t){const e=s(t,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}function f(t){let e;function s(t,n){if(n=n||90,t.length<8)return t+" too short";if(t.length>n)return"Exceeds length limit";const s=t.toLowerCase(),a=t.toUpperCase();if(t!==s&&t!==a)return"Mixed-case string "+t;const l=(t=s).lastIndexOf("1");if(-1===l)return"No separator character for "+t;if(0===l)return"Missing prefix for "+t;const c=t.slice(0,l),f=t.slice(l+1);if(f.length<6)return"Data too short";let u=i(c);if("string"==typeof u)return u;const _=[];for(let t=0;t<f.length;++t){const e=f.charAt(t),n=r[e];if(void 0===n)return"Unknown character "+e;u=o(u)^n,t+6>=f.length||_.push(n)}return u!==e?"Invalid checksum for "+t:{prefix:c,words:_}}return e="bech32"===t?1:734539939,{decodeUnsafe:function(t,e){const n=s(t,e);if("object"==typeof n)return n},decode:function(t,e){const n=s(t,e);if("object"==typeof n)return n;throw new Error(n)},encode:function(t,r,s){if(s=s||90,t.length+7+r.length>s)throw new TypeError("Exceeds length limit");let a=i(t=t.toLowerCase());if("string"==typeof a)throw new Error(a);let l=t+"1";for(let t=0;t<r.length;++t){const e=r[t];if(e>>5!=0)throw new Error("Non 5-bit word");a=o(a)^e,l+=n.charAt(e)}for(let t=0;t<6;++t)a=o(a);a^=e;for(let t=0;t<6;++t){const e=a>>5*(5-t)&31;l+=n.charAt(e)}return l},toWords:a,fromWordsUnsafe:l,fromWords:c}}e.gW=f("bech32"),f("bech32m")},856:()=>{}},r={};function o(t){var e=r[t];if(void 0!==e)return e.exports;var i=r[t]={exports:{}};return n[t](i,i.exports,o),i.exports}e=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var s={};t=t||[null,e({}),e([]),e(e)];for(var a=2&r&&n;"object"==typeof a&&!~t.indexOf(a);a=e(a))Object.getOwnPropertyNames(a).forEach((t=>s[t]=()=>n[t]));return s.default=()=>n,o.d(i,s),i},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{"use strict";o.r(i),o.d(i,{init:()=>ke});var t,e,n,r,s,a,l,c={},f=[],u=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function _(t,e){for(var n in e)t[n]=e[n];return t}function h(t){var e=t.parentNode;e&&e.removeChild(t)}function d(e,n,r){var o,i,s,a={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?t.call(arguments,2):r),"function"==typeof e&&null!=e.defaultProps)for(s in e.defaultProps)void 0===a[s]&&(a[s]=e.defaultProps[s]);return p(e,a,o,i,null)}function p(t,r,o,i,s){var a={type:t,props:r,key:o,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++n:s};return null==s&&null!=e.vnode&&e.vnode(a),a}function y(t){return t.children}function g(t,e,n){"-"===e[0]?t.setProperty(e,null==n?"":n):t[e]=null==n?"":"number"!=typeof n||u.test(e)?n:n+"px"}function v(t,e,n,r,o){var i;t:if("style"===e)if("string"==typeof n)t.style.cssText=n;else{if("string"==typeof r&&(t.style.cssText=r=""),r)for(e in r)n&&e in n||g(t.style,e,"");if(n)for(e in n)r&&n[e]===r[e]||g(t.style,e,n[e])}else if("o"===e[0]&&"n"===e[1])i=e!==(e=e.replace(/Capture$/,"")),e=e.toLowerCase()in t?e.toLowerCase().slice(2):e.slice(2),t.l||(t.l={}),t.l[e+i]=n,n?r||t.addEventListener(e,i?m:w,i):t.removeEventListener(e,i?m:w,i);else if("dangerouslySetInnerHTML"!==e){if(o)e=e.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==e&&"height"!==e&&"href"!==e&&"list"!==e&&"form"!==e&&"tabIndex"!==e&&"download"!==e&&e in t)try{t[e]=null==n?"":n;break t}catch(t){}"function"==typeof n||(null==n||!1===n&&-1==e.indexOf("-")?t.removeAttribute(e):t.setAttribute(e,n))}}function w(t){r=!0;try{return this.l[t.type+!1](e.event?e.event(t):t)}finally{r=!1}}function m(t){r=!0;try{return this.l[t.type+!0](e.event?e.event(t):t)}finally{r=!1}}function b(t,e){this.props=t,this.context=e}function E(t,e){if(null==e)return t.__?E(t.__,t.__.__k.indexOf(t)+1):null;for(var n;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e)return n.__e;return"function"==typeof t.type?E(t):null}function x(t){var e,n;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e){t.__e=t.__c.base=n.__e;break}return x(t)}}function k(t){r?setTimeout(t):l(t)}function S(t){(!t.__d&&(t.__d=!0)&&s.push(t)&&!A.__r++||a!==e.debounceRendering)&&((a=e.debounceRendering)||k)(A)}function A(){var t,e,n,r,o,i,a,l;for(s.sort((function(t,e){return t.__v.__b-e.__v.__b}));t=s.shift();)t.__d&&(e=s.length,r=void 0,o=void 0,a=(i=(n=t).__v).__e,(l=n.__P)&&(r=[],(o=_({},i)).__v=i.__v+1,H(l,i,o,n.__n,void 0!==l.ownerSVGElement,null!=i.__h?[a]:null,r,null==a?E(i):a,i.__h),N(r,i),i.__e!=a&&x(i)),s.length>e&&s.sort((function(t,e){return t.__v.__b-e.__v.__b})));A.__r=0}function C(t,e,n,r,o,i,s,a,l,u){var _,h,d,g,v,w,m,b=r&&r.__k||f,x=b.length;for(n.__k=[],_=0;_<e.length;_++)if(null!=(g=n.__k[_]=null==(g=e[_])||"boolean"==typeof g?null:"string"==typeof g||"number"==typeof g||"bigint"==typeof g?p(null,g,null,null,g):Array.isArray(g)?p(y,{children:g},null,null,null):g.__b>0?p(g.type,g.props,g.key,g.ref?g.ref:null,g.__v):g)){if(g.__=n,g.__b=n.__b+1,null===(d=b[_])||d&&g.key==d.key&&g.type===d.type)b[_]=void 0;else for(h=0;h<x;h++){if((d=b[h])&&g.key==d.key&&g.type===d.type){b[h]=void 0;break}d=null}H(t,g,d=d||c,o,i,s,a,l,u),v=g.__e,(h=g.ref)&&d.ref!=h&&(m||(m=[]),d.ref&&m.push(d.ref,null,g),m.push(h,g.__c||v,g)),null!=v?(null==w&&(w=v),"function"==typeof g.type&&g.__k===d.__k?g.__d=l=I(g,l,t):l=B(t,g,d,b,v,l),"function"==typeof n.type&&(n.__d=l)):l&&d.__e==l&&l.parentNode!=t&&(l=E(d))}for(n.__e=w,_=x;_--;)null!=b[_]&&("function"==typeof n.type&&null!=b[_].__e&&b[_].__e==n.__d&&(n.__d=P(r).nextSibling),R(b[_],b[_]));if(m)for(_=0;_<m.length;_++)U(m[_],m[++_],m[++_])}function I(t,e,n){for(var r,o=t.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=t,e="function"==typeof r.type?I(r,e,n):B(n,r,r,o,r.__e,e));return e}function B(t,e,n,r,o,i){var s,a,l;if(void 0!==e.__d)s=e.__d,e.__d=void 0;else if(null==n||o!=i||null==o.parentNode)t:if(null==i||i.parentNode!==t)t.appendChild(o),s=null;else{for(a=i,l=0;(a=a.nextSibling)&&l<r.length;l+=1)if(a==o)break t;t.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function P(t){var e,n,r;if(null==t.type||"string"==typeof t.type)return t.__e;if(t.__k)for(e=t.__k.length-1;e>=0;e--)if((n=t.__k[e])&&(r=P(n)))return r;return null}function H(t,n,r,o,i,s,a,l,c){var f,u,h,d,p,g,v,w,m,E,x,k,S,A,I,B=n.type;if(void 0!==n.constructor)return null;null!=r.__h&&(c=r.__h,l=n.__e=r.__e,n.__h=null,s=[l]),(f=e.__b)&&f(n);try{t:if("function"==typeof B){if(w=n.props,m=(f=B.contextType)&&o[f.__c],E=f?m?m.props.value:f.__:o,r.__c?v=(u=n.__c=r.__c).__=u.__E:("prototype"in B&&B.prototype.render?n.__c=u=new B(w,E):(n.__c=u=new b(w,E),u.constructor=B,u.render=O),m&&m.sub(u),u.props=w,u.state||(u.state={}),u.context=E,u.__n=o,h=u.__d=!0,u.__h=[],u._sb=[]),null==u.__s&&(u.__s=u.state),null!=B.getDerivedStateFromProps&&(u.__s==u.state&&(u.__s=_({},u.__s)),_(u.__s,B.getDerivedStateFromProps(w,u.__s))),d=u.props,p=u.state,u.__v=n,h)null==B.getDerivedStateFromProps&&null!=u.componentWillMount&&u.componentWillMount(),null!=u.componentDidMount&&u.__h.push(u.componentDidMount);else{if(null==B.getDerivedStateFromProps&&w!==d&&null!=u.componentWillReceiveProps&&u.componentWillReceiveProps(w,E),!u.__e&&null!=u.shouldComponentUpdate&&!1===u.shouldComponentUpdate(w,u.__s,E)||n.__v===r.__v){for(n.__v!==r.__v&&(u.props=w,u.state=u.__s,u.__d=!1),n.__e=r.__e,n.__k=r.__k,n.__k.forEach((function(t){t&&(t.__=n)})),x=0;x<u._sb.length;x++)u.__h.push(u._sb[x]);u._sb=[],u.__h.length&&a.push(u);break t}null!=u.componentWillUpdate&&u.componentWillUpdate(w,u.__s,E),null!=u.componentDidUpdate&&u.__h.push((function(){u.componentDidUpdate(d,p,g)}))}if(u.context=E,u.props=w,u.__P=t,k=e.__r,S=0,"prototype"in B&&B.prototype.render){for(u.state=u.__s,u.__d=!1,k&&k(n),f=u.render(u.props,u.state,u.context),A=0;A<u._sb.length;A++)u.__h.push(u._sb[A]);u._sb=[]}else do{u.__d=!1,k&&k(n),f=u.render(u.props,u.state,u.context),u.state=u.__s}while(u.__d&&++S<25);u.state=u.__s,null!=u.getChildContext&&(o=_(_({},o),u.getChildContext())),h||null==u.getSnapshotBeforeUpdate||(g=u.getSnapshotBeforeUpdate(d,p)),I=null!=f&&f.type===y&&null==f.key?f.props.children:f,C(t,Array.isArray(I)?I:[I],n,r,o,i,s,a,l,c),u.base=n.__e,n.__h=null,u.__h.length&&a.push(u),v&&(u.__E=u.__=null),u.__e=!1}else null==s&&n.__v===r.__v?(n.__k=r.__k,n.__e=r.__e):n.__e=T(r.__e,n,r,o,i,s,a,c);(f=e.diffed)&&f(n)}catch(t){n.__v=null,(c||null!=s)&&(n.__e=l,n.__h=!!c,s[s.indexOf(l)]=null),e.__e(t,n,r)}}function N(t,n){e.__c&&e.__c(n,t),t.some((function(n){try{t=n.__h,n.__h=[],t.some((function(t){t.call(n)}))}catch(t){e.__e(t,n.__v)}}))}function T(e,n,r,o,i,s,a,l){var f,u,_,d=r.props,p=n.props,y=n.type,g=0;if("svg"===y&&(i=!0),null!=s)for(;g<s.length;g++)if((f=s[g])&&"setAttribute"in f==!!y&&(y?f.localName===y:3===f.nodeType)){e=f,s[g]=null;break}if(null==e){if(null===y)return document.createTextNode(p);e=i?document.createElementNS("http://www.w3.org/2000/svg",y):document.createElement(y,p.is&&p),s=null,l=!1}if(null===y)d===p||l&&e.data===p||(e.data=p);else{if(s=s&&t.call(e.childNodes),u=(d=r.props||c).dangerouslySetInnerHTML,_=p.dangerouslySetInnerHTML,!l){if(null!=s)for(d={},g=0;g<e.attributes.length;g++)d[e.attributes[g].name]=e.attributes[g].value;(_||u)&&(_&&(u&&_.__html==u.__html||_.__html===e.innerHTML)||(e.innerHTML=_&&_.__html||""))}if(function(t,e,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in e||v(t,i,null,n[i],r);for(i in e)o&&"function"!=typeof e[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===e[i]||v(t,i,e[i],n[i],r)}(e,p,d,i,l),_)n.__k=[];else if(g=n.props.children,C(e,Array.isArray(g)?g:[g],n,r,o,i&&"foreignObject"!==y,s,a,s?s[0]:r.__k&&E(r,0),l),null!=s)for(g=s.length;g--;)null!=s[g]&&h(s[g]);l||("value"in p&&void 0!==(g=p.value)&&(g!==e.value||"progress"===y&&!g||"option"===y&&g!==d.value)&&v(e,"value",g,d.value,!1),"checked"in p&&void 0!==(g=p.checked)&&g!==e.checked&&v(e,"checked",g,d.checked,!1))}return e}function U(t,n,r){try{"function"==typeof t?t(n):t.current=n}catch(t){e.__e(t,r)}}function R(t,n,r){var o,i;if(e.unmount&&e.unmount(t),(o=t.ref)&&(o.current&&o.current!==t.__e||U(o,null,n)),null!=(o=t.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(t){e.__e(t,n)}o.base=o.__P=null,t.__c=void 0}if(o=t.__k)for(i=0;i<o.length;i++)o[i]&&R(o[i],n,r||"function"!=typeof t.type);r||null==t.__e||h(t.__e),t.__=t.__e=t.__d=void 0}function O(t,e,n){return this.constructor(t,n)}function $(n,r,o){var i,s,a;e.__&&e.__(n,r),s=(i="function"==typeof o)?null:o&&o.__k||r.__k,a=[],H(r,n=(!i&&o||r).__k=d(y,null,[n]),s||c,c,void 0!==r.ownerSVGElement,!i&&o?[o]:s?null:r.firstChild?t.call(r.childNodes):null,a,!i&&o?o:s?s.__e:r.firstChild,i),N(a,n)}t=f.slice,e={__e:function(t,e,n,r){for(var o,i,s;e=e.__;)if((o=e.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(t)),s=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(t,r||{}),s=o.__d),s)return o.__E=o}catch(e){t=e}throw t}},n=0,r=!1,b.prototype.setState=function(t,e){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=_({},this.state),"function"==typeof t&&(t=t(_({},n),this.props)),t&&_(n,t),null!=t&&this.__v&&(e&&this._sb.push(e),S(this))},b.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),S(this))},b.prototype.render=y,s=[],l="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,A.__r=0;var M=o(856),j=o.t(M,2);const z=BigInt(0),D=BigInt(1),W=BigInt(2),V=BigInt(3),F=BigInt(8),L=Object.freeze({a:z,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:D,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),q=(t,e)=>(t+e/W)/e,Z={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(t){const{n:e}=L,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-D*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),o=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,s=BigInt("0x100000000000000000000000000000000"),a=q(i*t,e),l=q(-r*t,e);let c=bt(t-a*n-l*o,e),f=bt(-a*r-l*i,e);const u=c>s,_=f>s;if(u&&(c=e-c),_&&(f=e-f),c>s||f>s)throw new Error("splitScalarEndo: Endomorphism failed, k="+t);return{k1neg:u,k1:c,k2neg:_,k2:f}}},K=32,G=32,J=K+1,X=2*K+1;function Y(t){const{a:e,b:n}=L,r=bt(t*t),o=bt(r*t);return bt(o+e*t+n)}const Q=L.a===z;class tt extends Error{constructor(t){super(t)}}function et(t){if(!(t instanceof nt))throw new TypeError("JacobianPoint expected")}class nt{constructor(t,e,n){this.x=t,this.y=e,this.z=n}static fromAffine(t){if(!(t instanceof it))throw new TypeError("JacobianPoint#fromAffine: expected Point");return t.equals(it.ZERO)?nt.ZERO:new nt(t.x,t.y,D)}static toAffineBatch(t){const e=function(t,e=L.P){const n=new Array(t.length),r=t.reduce(((t,r,o)=>r===z?t:(n[o]=t,bt(t*r,e))),D),o=xt(r,e);return t.reduceRight(((t,r,o)=>r===z?t:(n[o]=bt(t*n[o],e),bt(t*r,e))),o),n}(t.map((t=>t.z)));return t.map(((t,n)=>t.toAffine(e[n])))}static normalizeZ(t){return nt.toAffineBatch(t).map(nt.fromAffine)}equals(t){et(t);const{x:e,y:n,z:r}=this,{x:o,y:i,z:s}=t,a=bt(r*r),l=bt(s*s),c=bt(e*l),f=bt(o*a),u=bt(bt(n*s)*l),_=bt(bt(i*r)*a);return c===f&&u===_}negate(){return new nt(this.x,bt(-this.y),this.z)}double(){const{x:t,y:e,z:n}=this,r=bt(t*t),o=bt(e*e),i=bt(o*o),s=t+o,a=bt(W*(bt(s*s)-r-i)),l=bt(V*r),c=bt(l*l),f=bt(c-W*a),u=bt(l*(a-f)-F*i),_=bt(W*e*n);return new nt(f,u,_)}add(t){et(t);const{x:e,y:n,z:r}=this,{x:o,y:i,z:s}=t;if(o===z||i===z)return this;if(e===z||n===z)return t;const a=bt(r*r),l=bt(s*s),c=bt(e*l),f=bt(o*a),u=bt(bt(n*s)*l),_=bt(bt(i*r)*a),h=bt(f-c),d=bt(_-u);if(h===z)return d===z?this.double():nt.ZERO;const p=bt(h*h),y=bt(h*p),g=bt(c*p),v=bt(d*d-y-W*g),w=bt(d*(g-v)-u*y),m=bt(r*s*h);return new nt(v,w,m)}subtract(t){return this.add(t.negate())}multiplyUnsafe(t){const e=nt.ZERO;if("bigint"==typeof t&&t===z)return e;let n=mt(t);if(n===D)return this;if(!Q){let t=e,r=this;for(;n>z;)n&D&&(t=t.add(r)),r=r.double(),n>>=D;return t}let{k1neg:r,k1:o,k2neg:i,k2:s}=Z.splitScalar(n),a=e,l=e,c=this;for(;o>z||s>z;)o&D&&(a=a.add(c)),s&D&&(l=l.add(c)),c=c.double(),o>>=D,s>>=D;return r&&(a=a.negate()),i&&(l=l.negate()),l=new nt(bt(l.x*Z.beta),l.y,l.z),a.add(l)}precomputeWindow(t){const e=Q?128/t+1:256/t+1,n=[];let r=this,o=r;for(let i=0;i<e;i++){o=r,n.push(o);for(let e=1;e<2**(t-1);e++)o=o.add(r),n.push(o);r=o.double()}return n}wNAF(t,e){!e&&this.equals(nt.BASE)&&(e=it.BASE);const n=e&&e._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=e&&ot.get(e);r||(r=this.precomputeWindow(n),e&&1!==n&&(r=nt.normalizeZ(r),ot.set(e,r)));let o=nt.ZERO,i=nt.BASE;const s=1+(Q?128/n:256/n),a=2**(n-1),l=BigInt(2**n-1),c=2**n,f=BigInt(n);for(let e=0;e<s;e++){const n=e*a;let s=Number(t&l);t>>=f,s>a&&(s-=c,t+=D);const u=n,_=n+Math.abs(s)-1,h=e%2!=0,d=s<0;0===s?i=i.add(rt(h,r[u])):o=o.add(rt(d,r[_]))}return{p:o,f:i}}multiply(t,e){let n,r,o=mt(t);if(Q){const{k1neg:t,k1:i,k2neg:s,k2:a}=Z.splitScalar(o);let{p:l,f:c}=this.wNAF(i,e),{p:f,f:u}=this.wNAF(a,e);l=rt(t,l),f=rt(s,f),f=new nt(bt(f.x*Z.beta),f.y,f.z),n=l.add(f),r=c.add(u)}else{const{p:t,f:i}=this.wNAF(o,e);n=t,r=i}return nt.normalizeZ([n,r])[0]}toAffine(t){const{x:e,y:n,z:r}=this,o=this.equals(nt.ZERO);null==t&&(t=o?F:xt(r));const i=t,s=bt(i*i),a=bt(s*i),l=bt(e*s),c=bt(n*a),f=bt(r*i);if(o)return it.ZERO;if(f!==D)throw new Error("invZ was invalid");return new it(l,c)}}function rt(t,e){const n=e.negate();return t?n:e}nt.BASE=new nt(L.Gx,L.Gy,D),nt.ZERO=new nt(z,D,z);const ot=new WeakMap;class it{constructor(t,e){this.x=t,this.y=e}_setWindowSize(t){this._WINDOW_SIZE=t,ot.delete(this)}hasEvenY(){return this.y%W===z}static fromCompressedHex(t){const e=32===t.length,n=vt(e?t:t.subarray(1));if(!It(n))throw new Error("Point is not on curve");let r=function(t){const{P:e}=L,n=BigInt(6),r=BigInt(11),o=BigInt(22),i=BigInt(23),s=BigInt(44),a=BigInt(88),l=t*t*t%e,c=l*l*t%e,f=Et(c,V)*c%e,u=Et(f,V)*c%e,_=Et(u,W)*l%e,h=Et(_,r)*_%e,d=Et(h,o)*h%e,p=Et(d,s)*d%e,y=Et(p,a)*p%e,g=Et(y,s)*d%e,v=Et(g,V)*c%e,w=Et(v,i)*h%e,m=Et(w,n)*l%e,b=Et(m,W),E=b*b%e;if(E!==t)throw new Error("Cannot find square root");return b}(Y(n));const o=(r&D)===D;if(e)o&&(r=bt(-r));else{1==(1&t[0])!==o&&(r=bt(-r))}const i=new it(n,r);return i.assertValidity(),i}static fromUncompressedHex(t){const e=vt(t.subarray(1,K+1)),n=vt(t.subarray(K+1,2*K+1)),r=new it(e,n);return r.assertValidity(),r}static fromHex(t){const e=wt(t),n=e.length,r=e[0];if(n===K)return this.fromCompressedHex(e);if(n===J&&(2===r||3===r))return this.fromCompressedHex(e);if(n===X&&4===r)return this.fromUncompressedHex(e);throw new Error(`Point.fromHex: received invalid point. Expected 32-${J} compressed bytes or ${X} uncompressed bytes, not ${n}`)}static fromPrivateKey(t){return it.BASE.multiply(Bt(t))}static fromSignature(t,e,n){const{r,s:o}=Ht(e);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=kt(wt(t)),{n:s}=L,a=2===n||3===n?r+s:r,l=xt(a,s),c=bt(-i*l,s),f=bt(o*l,s),u=1&n?"03":"02",_=it.fromHex(u+ht(a)),h=it.BASE.multiplyAndAddUnsafe(_,c,f);if(!h)throw new Error("Cannot recover signature: point at infinify");return h.assertValidity(),h}toRawBytes(t=!1){return gt(this.toHex(t))}toHex(t=!1){const e=ht(this.x);if(t){return`${this.hasEvenY()?"02":"03"}${e}`}return`04${e}${ht(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const t="Point is not on elliptic curve",{x:e,y:n}=this;if(!It(e)||!It(n))throw new Error(t);const r=bt(n*n);if(bt(r-Y(e))!==z)throw new Error(t)}equals(t){return this.x===t.x&&this.y===t.y}negate(){return new it(this.x,bt(-this.y))}double(){return nt.fromAffine(this).double().toAffine()}add(t){return nt.fromAffine(this).add(nt.fromAffine(t)).toAffine()}subtract(t){return this.add(t.negate())}multiply(t){return nt.fromAffine(this).multiply(t,this).toAffine()}multiplyAndAddUnsafe(t,e,n){const r=nt.fromAffine(this),o=e===z||e===D||this!==it.BASE?r.multiplyUnsafe(e):r.multiply(e),i=nt.fromAffine(t).multiplyUnsafe(n),s=o.add(i);return s.equals(nt.ZERO)?void 0:s.toAffine()}}function st(t){return Number.parseInt(t[0],16)>=8?"00"+t:t}function at(t){if(t.length<2||2!==t[0])throw new Error(`Invalid signature integer tag: ${ut(t)}`);const e=t[1],n=t.subarray(2,e+2);if(!e||n.length!==e)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:vt(n),left:t.subarray(e+2)}}it.BASE=new it(L.Gx,L.Gy),it.ZERO=new it(z,z);class lt{constructor(t,e){this.r=t,this.s=e,this.assertValidity()}static fromCompact(t){const e=t instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof t&&!e)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=e?ut(t):t;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new lt(yt(r.slice(0,64)),yt(r.slice(64,128)))}static fromDER(t){const e=t instanceof Uint8Array;if("string"!=typeof t&&!e)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(t){if(t.length<2||48!=t[0])throw new Error(`Invalid signature tag: ${ut(t)}`);if(t[1]!==t.length-2)throw new Error("Invalid signature: incorrect length");const{data:e,left:n}=at(t.subarray(2)),{data:r,left:o}=at(n);if(o.length)throw new Error(`Invalid signature: left bytes after parsing: ${ut(o)}`);return{r:e,s:r}}(e?t:gt(t));return new lt(n,r)}static fromHex(t){return this.fromDER(t)}assertValidity(){const{r:t,s:e}=this;if(!Ct(t))throw new Error("Invalid Signature: r must be 0 < r < n");if(!Ct(e))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const t=L.n>>D;return this.s>t}normalizeS(){return this.hasHighS()?new lt(this.r,bt(-this.s,L.n)):this}toDERRawBytes(){return gt(this.toDERHex())}toDERHex(){const t=st(pt(this.s)),e=st(pt(this.r)),n=t.length/2,r=e.length/2,o=pt(n),i=pt(r);return`30${pt(r+n+4)}02${i}${e}02${o}${t}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return gt(this.toCompactHex())}toCompactHex(){return ht(this.r)+ht(this.s)}}function ct(...t){if(!t.every((t=>t instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===t.length)return t[0];const e=t.reduce(((t,e)=>t+e.length),0),n=new Uint8Array(e);for(let e=0,r=0;e<t.length;e++){const o=t[e];n.set(o,r),r+=o.length}return n}const ft=Array.from({length:256},((t,e)=>e.toString(16).padStart(2,"0")));function ut(t){if(!(t instanceof Uint8Array))throw new Error("Expected Uint8Array");let e="";for(let n=0;n<t.length;n++)e+=ft[t[n]];return e}const _t=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function ht(t){if("bigint"!=typeof t)throw new Error("Expected bigint");if(!(z<=t&&t<_t))throw new Error("Expected number 0 <= n < 2^256");return t.toString(16).padStart(64,"0")}function dt(t){const e=gt(ht(t));if(32!==e.length)throw new Error("Error: expected 32 bytes");return e}function pt(t){const e=t.toString(16);return 1&e.length?`0${e}`:e}function yt(t){if("string"!=typeof t)throw new TypeError("hexToNumber: expected string, got "+typeof t);return BigInt(`0x${t}`)}function gt(t){if("string"!=typeof t)throw new TypeError("hexToBytes: expected string, got "+typeof t);if(t.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+t.length);const e=new Uint8Array(t.length/2);for(let n=0;n<e.length;n++){const r=2*n,o=t.slice(r,r+2),i=Number.parseInt(o,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");e[n]=i}return e}function vt(t){return yt(ut(t))}function wt(t){return t instanceof Uint8Array?Uint8Array.from(t):gt(t)}function mt(t){if("number"==typeof t&&Number.isSafeInteger(t)&&t>0)return BigInt(t);if("bigint"==typeof t&&Ct(t))return t;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function bt(t,e=L.P){const n=t%e;return n>=z?n:e+n}function Et(t,e){const{P:n}=L;let r=t;for(;e-- >z;)r*=r,r%=n;return r}function xt(t,e=L.P){if(t===z||e<=z)throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);let n=bt(t,e),r=e,o=z,i=D,s=D,a=z;for(;n!==z;){const t=r/n,e=r%n,l=o-s*t,c=i-a*t;r=n,n=e,o=s,i=a,s=l,a=c}if(r!==D)throw new Error("invert: does not exist");return bt(o,e)}function kt(t,e=!1){const n=function(t){const e=8*t.length-8*G,n=vt(t);return e>0?n>>BigInt(e):n}(t);if(e)return n;const{n:r}=L;return n>=r?n-r:n}let St,At;function Ct(t){return z<t&&t<L.n}function It(t){return z<t&&t<L.P}function Bt(t){let e;if("bigint"==typeof t)e=t;else if("number"==typeof t&&Number.isSafeInteger(t)&&t>0)e=BigInt(t);else if("string"==typeof t){if(t.length!==2*G)throw new Error("Expected 32 bytes of private key");e=yt(t)}else{if(!(t instanceof Uint8Array))throw new TypeError("Expected valid private key");if(t.length!==G)throw new Error("Expected 32 bytes of private key");e=vt(t)}if(!Ct(e))throw new Error("Expected private key: 0 < key < n");return e}function Pt(t){return t instanceof it?(t.assertValidity(),t):it.fromHex(t)}function Ht(t){if(t instanceof lt)return t.assertValidity(),t;try{return lt.fromDER(t)}catch(e){return lt.fromCompact(t)}}function Nt(t){return bt(vt(t),L.n)}class Tt{constructor(t,e){this.r=t,this.s=e,this.assertValidity()}static fromHex(t){const e=wt(t);if(64!==e.length)throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${e.length}`);const n=vt(e.subarray(0,32)),r=vt(e.subarray(32,64));return new Tt(n,r)}assertValidity(){const{r:t,s:e}=this;if(!It(t)||!Ct(e))throw new Error("Invalid signature")}toHex(){return ht(this.r)+ht(this.s)}toRawBytes(){return gt(this.toHex())}}class Ut{constructor(t,e,n=Vt.randomBytes()){if(null==t)throw new TypeError(`sign: Expected valid message, not "${t}"`);this.m=wt(t);const{x:r,scalar:o}=this.getScalar(Bt(e));if(this.px=r,this.d=o,this.rand=wt(n),32!==this.rand.length)throw new TypeError("sign: Expected 32 bytes of aux randomness")}getScalar(t){const e=it.fromPrivateKey(t),n=e.hasEvenY()?t:L.n-t;return{point:e,scalar:n,x:e.toRawX()}}initNonce(t,e){return dt(t^vt(e))}finalizeNonce(t){const e=bt(vt(t),L.n);if(e===z)throw new Error("sign: Creation of signature failed. k is zero");const{point:n,x:r,scalar:o}=this.getScalar(e);return{R:n,rx:r,k:o}}finalizeSig(t,e,n,r){return new Tt(t.x,bt(e+n*r,L.n)).toRawBytes()}error(){throw new Error("sign: Invalid signature produced")}async calc(){const{m:t,d:e,px:n,rand:r}=this,o=Vt.taggedHash,i=this.initNonce(e,await o(Dt.aux,r)),{R:s,rx:a,k:l}=this.finalizeNonce(await o(Dt.nonce,i,n,t)),c=Nt(await o(Dt.challenge,a,n,t)),f=this.finalizeSig(s,l,c,e);return await $t(f,t,n)||this.error(),f}calcSync(){const{m:t,d:e,px:n,rand:r}=this,o=Vt.taggedHashSync,i=this.initNonce(e,o(Dt.aux,r)),{R:s,rx:a,k:l}=this.finalizeNonce(o(Dt.nonce,i,n,t)),c=Nt(o(Dt.challenge,a,n,t)),f=this.finalizeSig(s,l,c,e);return Mt(f,t,n)||this.error(),f}}function Rt(t,e,n){const r=t instanceof Tt,o=r?t:Tt.fromHex(t);return r&&o.assertValidity(),{...o,m:wt(e),P:Pt(n)}}function Ot(t,e,n,r){const o=it.BASE.multiplyAndAddUnsafe(e,Bt(n),bt(-r,L.n));return!(!o||!o.hasEvenY()||o.x!==t)}async function $t(t,e,n){try{const{r,s:o,m:i,P:s}=Rt(t,e,n),a=Nt(await Vt.taggedHash(Dt.challenge,dt(r),s.toRawX(),i));return Ot(r,s,o,a)}catch(t){return!1}}function Mt(t,e,n){try{const{r,s:o,m:i,P:s}=Rt(t,e,n),a=Nt(Vt.taggedHashSync(Dt.challenge,dt(r),s.toRawX(),i));return Ot(r,s,o,a)}catch(t){if(t instanceof tt)throw t;return!1}}const jt={Signature:Tt,getPublicKey:function(t){return it.fromPrivateKey(t).toRawX()},sign:async function(t,e,n){return new Ut(t,e,n).calc()},verify:$t,signSync:function(t,e,n){return new Ut(t,e,n).calcSync()},verifySync:Mt};it.BASE._setWindowSize(8);const zt={node:j,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},Dt={challenge:"BIP0340/challenge",aux:"BIP0340/aux",nonce:"BIP0340/nonce"},Wt={},Vt={bytesToHex:ut,hexToBytes:gt,concatBytes:ct,mod:bt,invert:xt,isValidPrivateKey(t){try{return Bt(t),!0}catch(t){return!1}},_bigintTo32Bytes:dt,_normalizePrivateKey:Bt,hashToPrivateKey:t=>{t=wt(t);const e=G+8;if(t.length<e||t.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return dt(bt(vt(t),L.n-D)+D)},randomBytes:(t=32)=>{if(zt.web)return zt.web.getRandomValues(new Uint8Array(t));if(zt.node){const{randomBytes:e}=zt.node;return Uint8Array.from(e(t))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>Vt.hashToPrivateKey(Vt.randomBytes(G+8)),precompute(t=8,e=it.BASE){const n=e===it.BASE?e:new it(e.x,e.y);return n._setWindowSize(t),n.multiply(V),n},sha256:async(...t)=>{if(zt.web){const e=await zt.web.subtle.digest("SHA-256",ct(...t));return new Uint8Array(e)}if(zt.node){const{createHash:e}=zt.node,n=e("sha256");return t.forEach((t=>n.update(t))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(t,...e)=>{if(zt.web){const n=await zt.web.subtle.importKey("raw",t,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=ct(...e),o=await zt.web.subtle.sign("HMAC",n,r);return new Uint8Array(o)}if(zt.node){const{createHmac:n}=zt.node,r=n("sha256",t);return e.forEach((t=>r.update(t))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(t,...e)=>{let n=Wt[t];if(void 0===n){const e=await Vt.sha256(Uint8Array.from(t,(t=>t.charCodeAt(0))));n=ct(e,e),Wt[t]=n}return Vt.sha256(n,...e)},taggedHashSync:(t,...e)=>{if("function"!=typeof St)throw new tt("sha256Sync is undefined, you need to set it");let n=Wt[t];if(void 0===n){const e=St(Uint8Array.from(t,(t=>t.charCodeAt(0))));n=ct(e,e),Wt[t]=n}return St(n,...e)},_JacobianPoint:nt};Object.defineProperties(Vt,{sha256Sync:{configurable:!1,get:()=>St,set(t){St||(St=t)}},hmacSha256Sync:{configurable:!1,get:()=>At,set(t){At||(At=t)}}});var Ft=0;function Lt(t,n,r,o,i,s){var a,l,c={};for(l in n)"ref"==l?a=n[l]:c[l]=n[l];var f={type:t,props:c,key:r,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--Ft,__source:i,__self:s};if("function"==typeof t&&(a=t.defaultProps))for(l in a)void 0===c[l]&&(c[l]=a[l]);return e.vnode&&e.vnode(f),f}const qt=function(t){let{additionalClasses:e}=t,n="keyIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1rem",height:"1rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z"})})};var Zt,Kt,Gt,Jt,Xt=0,Yt=[],Qt=[],te=e.__b,ee=e.__r,ne=e.diffed,re=e.__c,oe=e.unmount;function ie(t,n){e.__h&&e.__h(Kt,t,Xt||n),Xt=0;var r=Kt.__H||(Kt.__H={__:[],__h:[]});return t>=r.__.length&&r.__.push({__V:Qt}),r.__[t]}function se(t){return Xt=1,function(t,e,n){var r=ie(Zt++,2);if(r.t=t,!r.__c&&(r.__=[n?n(e):_e(void 0,e),function(t){var e=r.__N?r.__N[0]:r.__[0],n=r.t(e,t);e!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=Kt,!Kt.u)){Kt.u=!0;var o=Kt.shouldComponentUpdate;Kt.shouldComponentUpdate=function(t,e,n){if(!r.__c.__H)return!0;var i=r.__c.__H.__.filter((function(t){return t.__c}));if(i.every((function(t){return!t.__N})))return!o||o.call(this,t,e,n);var s=!1;return i.forEach((function(t){if(t.__N){var e=t.__[0];t.__=t.__N,t.__N=void 0,e!==t.__[0]&&(s=!0)}})),!(!s&&r.__c.props===t)&&(!o||o.call(this,t,e,n))}}return r.__N||r.__}(_e,t)}function ae(){for(var t;t=Yt.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(fe),t.__H.__h.forEach(ue),t.__H.__h=[]}catch(n){t.__H.__h=[],e.__e(n,t.__v)}}e.__b=function(t){Kt=null,te&&te(t)},e.__r=function(t){ee&&ee(t),Zt=0;var e=(Kt=t.__c).__H;e&&(Gt===Kt?(e.__h=[],Kt.__h=[],e.__.forEach((function(t){t.__N&&(t.__=t.__N),t.__V=Qt,t.__N=t.i=void 0}))):(e.__h.forEach(fe),e.__h.forEach(ue),e.__h=[])),Gt=Kt},e.diffed=function(t){ne&&ne(t);var n=t.__c;n&&n.__H&&(n.__H.__h.length&&(1!==Yt.push(n)&&Jt===e.requestAnimationFrame||((Jt=e.requestAnimationFrame)||ce)(ae)),n.__H.__.forEach((function(t){t.i&&(t.__H=t.i),t.__V!==Qt&&(t.__=t.__V),t.i=void 0,t.__V=Qt}))),Gt=Kt=null},e.__c=function(t,n){n.some((function(t){try{t.__h.forEach(fe),t.__h=t.__h.filter((function(t){return!t.__||ue(t)}))}catch(r){n.some((function(t){t.__h&&(t.__h=[])})),n=[],e.__e(r,t.__v)}})),re&&re(t,n)},e.unmount=function(t){oe&&oe(t);var n,r=t.__c;r&&r.__H&&(r.__H.__.forEach((function(t){try{fe(t)}catch(t){n=t}})),r.__H=void 0,n&&e.__e(n,r.__v))};var le="function"==typeof requestAnimationFrame;function ce(t){var e,n=function(){clearTimeout(r),le&&cancelAnimationFrame(e),setTimeout(t)},r=setTimeout(n,100);le&&(e=requestAnimationFrame(n))}function fe(t){var e=Kt,n=t.__c;"function"==typeof n&&(t.__c=void 0,n()),Kt=e}function ue(t){var e=Kt;t.__c=t.__(),Kt=e}function _e(t,e){return"function"==typeof e?e(t):e}const he=function(t){let{additionalClasses:e}=t,n="copyIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z"})})};const de=function(t){let{iconClasses:e,displayText:n,copyText:r}=t;const[o,i]=se("linkCopyBtn");return Lt("button",{class:o,onClick:()=>function(){try{navigator.clipboard.writeText(r),i(`${o} green`),setTimeout((()=>{i(o.replace("green","").trim())}),500)}catch(t){Error("Failed to copy: ",t)}}(),children:[Lt(he,{additionalClasses:e}),n&&Lt("span",{class:"displayText",children:n}),Lt("span",{class:"copyText",children:r})]})};var pe=o(715);function ye(t){let e=[];for(let n=0;n<t.length;n+=2)e.push(parseInt(t.substr(n,2),16));return e}const ge=function(t){let e,n,r,{profilePkey:o,profile:i}=t;return o&&i&&(n=function(t){const e=ye(t),n=pe.gW.toWords(e);return pe.gW.encode("npub",n,120)}(o),r=`${n.slice(0,10)}...${n.slice(-10)}`,e=`https://media.nostr.band/thumbs/${o.slice(-4)}/${o}-picture-64`),Lt("div",{class:"cardProfile",children:[Lt("img",{class:"profileImg",src:e||"https://via.placeholder.com/48?text=Loading"}),Lt("div",{class:"profileDetails",children:[Lt("div",{class:"profileName",children:i.display_name||"Loading..."}),Lt("div",{class:"profilePkey",children:[Lt(qt,{additionalClasses:"w-4 h-4"}),Lt("span",{class:"pkey",children:r||"npub..."}),Lt(de,{iconClasses:"w-4 h-4",copyText:n})]})]})]})};const ve=function(t){let{additionalClasses:e}=t,n="heartIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"})})};const we=function(t){let{additionalClasses:e}=t,n="replyIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155"})})};const me=function(t){let{additionalClasses:e}=t,n="repostIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",width:"1.25rem",height:"1.25rem",stroke:"currentColor",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"})})};const be=function(t){let{additionalClasses:e}=t,n="linkIcon";if(e){let t=e.split(" ");t.push(n),n=t.join(" ")}return Lt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor",width:"1.25rem",height:"1.25rem",class:n,children:Lt("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244"})})};const Ee=function(t){let e,n,r,{note:o,repliesCount:i,repostsCount:s,likesCount:a}=t;return o.id&&o.created_at&&(e=new Date(1e3*o.created_at),r=e.toLocaleTimeString("en-US",{hour12:!0,hour:"2-digit",minute:"2-digit",year:"numeric",month:"short",day:"numeric"}),n=function(t){const e=ye(t),n=pe.gW.toWords(e);return pe.gW.encode("note",n,120)}(o.id)),Lt("div",{class:"cardMeta",children:[Lt("div",{class:"cardDate",children:r}),Lt("hr",{}),Lt("div",{class:"cardInteractions",children:[Lt("div",{class:"interactionContainer",children:[Lt(we,{additionalClasses:"w-5 h-5"}),Lt("span",{class:"repliesCount",children:i})]}),Lt("div",{class:"interactionContainer",children:[Lt(me,{additionalClasses:"w-5 h-5"}),Lt("span",{class:"repostsCount",children:s})]}),Lt("div",{class:"interactionContainer",children:[Lt(ve,{additionalClasses:"w-5 h-5"}),Lt("span",{class:"likesCount",children:a})]}),Lt("div",{class:"interactionContainer",children:Lt("a",{href:`https://nostr.band/${n}`,class:"linkLink",children:[Lt(be,{additionalClasses:"w-5 h-5 hover:text-gray-600"}),Lt("span",{class:"displayText",children:"Open"})]})}),Lt("div",{class:"interactionContainer",children:Lt(de,{iconClasses:"w-5 h-5",displayText:"Copy Note ID",copyText:n})})]})]})};const xe=class extends b{constructor(t){super(t),this.state={noteId:t.noteId,relay:t.relay||"wss://relay.nostr.band",note:{},profile:{},profilePkey:"",likesCount:0,repostsCount:0,repliesCount:0}}static sha256(t){const e=(new TextEncoder).encode(t);return Vt.sha256(e).then((t=>Array.from(new Uint8Array(t)).map((t=>t.toString(16).padStart(2,"0"))).join("")))}async getNostrEventID(t){const e=[0,t.pubkey,t.created_at,t.kind,t.tags,t.content],n=JSON.stringify(e);return await this.sha256(n)}static verifyNostrSignature(t){return jt.verify(t.sig,t.id,t.pubkey)}async validateNostrEvent(t){if(t.id!==await this.getNostrEventID(t))return!1;if("string"!=typeof t.content)return!1;if("number"!=typeof t.created_at)return!1;if(!Array.isArray(t.tags))return!1;for(let e=0;e<t.tags.length;e++){const n=t.tags[e];if(!Array.isArray(n))return!1;for(let t=0;t<n.length;t++)if("object"==typeof n[t])return!1}return!0}async isValidEvent(t){return t.id&&t.pubkey&&t.sig&&await this.validateNostrEvent(t)&&this.verifyNostrSignature(t)}componentDidMount(){const t=new WebSocket(this.state.relay);t.onopen=()=>{this.fetchNote({socket:t}),console.log(`Connected to Nostr relay: ${t.url}`)},t.onerror=()=>{Error(`Failed to connect to Nostr relay: ${t.url}`)};const e={};t.onmessage=n=>{try{const r=JSON.parse(n.data);if(!r||!r.length)throw Error("Bad reply from relay");if("NOTICE"===r[0]&&2===r.length)return void console.log("Notice from",t.url,r[1]);if("EOSE"===r[0]&&r.length>1)return void(r[1]in e&&e[r[1]].onEvent(null));if("EVENT"!==r[0]||r.length<3)throw Error("Unknown reply from relay");r[1]in e&&e[r[1]].onEvent(r[2])}catch(t){Error(t)}},t.listEvents=n=>{let{sub:r,ok:o,err:i}=n,s=`embed-${Math.random()}`;const a=["REQ",s,r];t.send(JSON.stringify(a));const l=()=>{const n=s;s=null,t.send(JSON.stringify(["CLOSE",n])),delete e[n]},c=[],f=[],u=setTimeout((()=>{l(),c.length||f.length?_(null):i("timeout on relay",t.url)}),r.limit&&1===r.limit?2e3:4e3),_=async t=>{if(f.push(t),!(f.length>1))for(;f.length;)if((t=f[0])&&await this.isValidEvent(t)&&c.push(t),f.shift(),!t||r.limit&&r.limit===c.length){f.splice(0,f.length),s&&(clearTimeout(u),l(),o(c));break}};e[s]={ok:o,err:i,onEvent:_}}}static getEvent(t){let{socket:e,sub:n}=t;return new Promise(((t,r)=>{n.limit=1,e.listEvents({sub:n,ok:e=>{t(e?e[0]:null)},err:r})}))}static listEvents(t){let{socket:e,sub:n}=t;return new Promise(((t,r)=>{e.listEvents({sub:n,ok:t,err:r})}))}fetchNote(t){let{socket:e}=t;const n={ids:[this.state.noteId],kinds:[1]};this.getEvent({socket:e,sub:n}).then((t=>{t?(this.setState({note:t,profilePkey:t.pubkey}),this.fetchProfile({socket:e,profilePkey:t.pubkey}),this.fetchMeta({socket:e,noteId:this.state.noteId})):(console.log("Error: We can't find that note on this relay"),this.setState({note:{error:!0,content:"Sorry, we weren't able to find this note on the specified relay."}}))})).catch((t=>{Error(`Error fetching note: ${t}`),this.setState({note:{error:!0,content:"Sorry, there was an error fetching this note from the specified relay. Most often, this is because the relay isn't responding."}})}))}fetchProfile(t){let{socket:e,profilePkey:n}=t;const r={kinds:[0],authors:[n]};this.getEvent({socket:e,sub:r}).then((t=>{if(t){const e=JSON.parse(t.content);this.setState({profile:e})}})).catch((t=>{console.log(`Error fetching profile: ${t}`)}))}fetchMeta(t){let{socket:e,noteId:n}=t;const r={kinds:[1,6,7],"#e":[n]};this.listEvents({socket:e,sub:r}).then((t=>{t.forEach((t=>{1===t.kind&&this.setState((t=>({repliesCount:t.repliesCount+1}))),6===t.kind&&this.setState((t=>({repostsCount:t.repostsCount+1}))),7===t.kind&&this.setState((t=>({likesCount:t.likesCount+1})))}))}))}render(){return Lt("div",{class:"nostrEmbedCard",children:[Lt(ge,{profilePkey:this.state.profilePkey,profile:this.state.profile}),Lt("div",{class:this.state.note.error?"cardContent ne-text-red-800":"cardContent",children:this.state.note.content}),Lt(Ee,{note:this.state.note,likesCount:this.state.likesCount,repliesCount:this.state.repliesCount,repostsCount:this.state.repostsCount})]})}};function ke(t,e,n){const r=document.querySelector(e)?document.querySelector(e):document.querySelector("body");$(d(xe,{noteId:t,relay:n}),r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU1xYSxXQUFhLEtBQzdELEdBQ0EsR0FFTixDQUVBeGEsU0FDRSxPQUNFLFVBQUtpWSxNQUFNLGlCQUFnQixVQUN6QixHQUFDLEdBQU8sQ0FDTnlCLFlBQWExakIsS0FBS21LLE1BQU11WixZQUN4QkMsUUFBUzNqQixLQUFLbUssTUFBTXdaLFVBRXRCLFVBQ0UxQixNQUNFamlCLEtBQUttSyxNQUFNa2EsS0FBSzdILE1BQ1osOEJBQ0EsY0FDTCxTQUVBeGMsS0FBS21LLE1BQU1rYSxLQUFLNEIsVUFFbkIsR0FBQyxHQUFJLENBQ0g1QixLQUFNcmtCLEtBQUttSyxNQUFNa2EsS0FDakJHLFdBQVl4a0IsS0FBS21LLE1BQU1xYSxXQUN2QkYsYUFBY3RrQixLQUFLbUssTUFBTW1hLGFBQ3pCQyxhQUFjdmtCLEtBQUttSyxNQUFNb2EsaUJBSWpDLEdDN1FLLFNBQVNrRSxHQUFLbEQsRUFBUW1ELEVBQVNsRCxHQUNwQyxNQUFNbUQsRUFBZ0J2ZCxTQUFTd2QsY0FBY0YsR0FDekN0ZCxTQUFTd2QsY0FBY0YsR0FDdkJ0ZCxTQUFTd2QsY0FBYyxRQUUzQjVlLEVBQU9sRSxFQUFFK2lCLEdBQVksQ0FBRXRELFNBQVFDLFVBQVVtRCxFQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9iZWNoMzIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25vc3RyRW1iZWQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9wcmVhY3QvZGlzdC9wcmVhY3QubW9kdWxlLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvQG5vYmxlL3NlY3AyNTZrMS9saWIvZXNtL2luZGV4LmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9ub2RlX21vZHVsZXMvcHJlYWN0L2pzeC1ydW50aW1lL2Rpc3QvanN4UnVudGltZS5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL2tleUljb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL25vZGVfbW9kdWxlcy9wcmVhY3QvaG9va3MvZGlzdC9ob29rcy5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL2NvcHlJY29uLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9jb3B5VGV4dC5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZS5qcyIsIndlYnBhY2s6Ly9ub3N0ckVtYmVkLy4vc3JjL2NvbXBvbmVudHMvaWNvbnMvaGVhcnRJY29uLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9pY29ucy9yZXBseUljb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL3JlcG9zdEljb24uanMiLCJ3ZWJwYWNrOi8vbm9zdHJFbWJlZC8uL3NyYy9jb21wb25lbnRzL2ljb25zL2xpbmtJY29uLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9tZXRhLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvY29tcG9uZW50cy9ub3N0ckVtYmVkLmpzIiwid2VicGFjazovL25vc3RyRW1iZWQvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibm9zdHJFbWJlZFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJub3N0ckVtYmVkXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgKCkgPT4ge1xucmV0dXJuICIsInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmVjaDMybSA9IGV4cG9ydHMuYmVjaDMyID0gdm9pZCAwO1xuY29uc3QgQUxQSEFCRVQgPSAncXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2wnO1xuY29uc3QgQUxQSEFCRVRfTUFQID0ge307XG5mb3IgKGxldCB6ID0gMDsgeiA8IEFMUEhBQkVULmxlbmd0aDsgeisrKSB7XG4gICAgY29uc3QgeCA9IEFMUEhBQkVULmNoYXJBdCh6KTtcbiAgICBBTFBIQUJFVF9NQVBbeF0gPSB6O1xufVxuZnVuY3Rpb24gcG9seW1vZFN0ZXAocHJlKSB7XG4gICAgY29uc3QgYiA9IHByZSA+PiAyNTtcbiAgICByZXR1cm4gKCgocHJlICYgMHgxZmZmZmZmKSA8PCA1KSBeXG4gICAgICAgICgtKChiID4+IDApICYgMSkgJiAweDNiNmE1N2IyKSBeXG4gICAgICAgICgtKChiID4+IDEpICYgMSkgJiAweDI2NTA4ZTZkKSBeXG4gICAgICAgICgtKChiID4+IDIpICYgMSkgJiAweDFlYTExOWZhKSBeXG4gICAgICAgICgtKChiID4+IDMpICYgMSkgJiAweDNkNDIzM2RkKSBeXG4gICAgICAgICgtKChiID4+IDQpICYgMSkgJiAweDJhMTQ2MmIzKSk7XG59XG5mdW5jdGlvbiBwcmVmaXhDaGsocHJlZml4KSB7XG4gICAgbGV0IGNoayA9IDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgYyA9IHByZWZpeC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDMzIHx8IGMgPiAxMjYpXG4gICAgICAgICAgICByZXR1cm4gJ0ludmFsaWQgcHJlZml4ICgnICsgcHJlZml4ICsgJyknO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKGMgPj4gNSk7XG4gICAgfVxuICAgIGNoayA9IHBvbHltb2RTdGVwKGNoayk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgdiA9IHByZWZpeC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKHYgJiAweDFmKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaztcbn1cbmZ1bmN0aW9uIGNvbnZlcnQoZGF0YSwgaW5CaXRzLCBvdXRCaXRzLCBwYWQpIHtcbiAgICBsZXQgdmFsdWUgPSAwO1xuICAgIGxldCBiaXRzID0gMDtcbiAgICBjb25zdCBtYXhWID0gKDEgPDwgb3V0Qml0cykgLSAxO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA8PCBpbkJpdHMpIHwgZGF0YVtpXTtcbiAgICAgICAgYml0cyArPSBpbkJpdHM7XG4gICAgICAgIHdoaWxlIChiaXRzID49IG91dEJpdHMpIHtcbiAgICAgICAgICAgIGJpdHMgLT0gb3V0Qml0cztcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCh2YWx1ZSA+PiBiaXRzKSAmIG1heFYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYWQpIHtcbiAgICAgICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgodmFsdWUgPDwgKG91dEJpdHMgLSBiaXRzKSkgJiBtYXhWKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGJpdHMgPj0gaW5CaXRzKVxuICAgICAgICAgICAgcmV0dXJuICdFeGNlc3MgcGFkZGluZyc7XG4gICAgICAgIGlmICgodmFsdWUgPDwgKG91dEJpdHMgLSBiaXRzKSkgJiBtYXhWKVxuICAgICAgICAgICAgcmV0dXJuICdOb24temVybyBwYWRkaW5nJztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvV29yZHMoYnl0ZXMpIHtcbiAgICByZXR1cm4gY29udmVydChieXRlcywgOCwgNSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBmcm9tV29yZHNVbnNhZmUod29yZHMpIHtcbiAgICBjb25zdCByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSlcbiAgICAgICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGZyb21Xb3Jkcyh3b3Jkcykge1xuICAgIGNvbnN0IHJlcyA9IGNvbnZlcnQod29yZHMsIDUsIDgsIGZhbHNlKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xufVxuZnVuY3Rpb24gZ2V0TGlicmFyeUZyb21FbmNvZGluZyhlbmNvZGluZykge1xuICAgIGxldCBFTkNPRElOR19DT05TVDtcbiAgICBpZiAoZW5jb2RpbmcgPT09ICdiZWNoMzInKSB7XG4gICAgICAgIEVOQ09ESU5HX0NPTlNUID0gMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIEVOQ09ESU5HX0NPTlNUID0gMHgyYmM4MzBhMztcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlKHByZWZpeCwgd29yZHMsIExJTUlUKSB7XG4gICAgICAgIExJTUlUID0gTElNSVQgfHwgOTA7XG4gICAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgNyArIHdvcmRzLmxlbmd0aCA+IExJTUlUKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhjZWVkcyBsZW5ndGggbGltaXQnKTtcbiAgICAgICAgcHJlZml4ID0gcHJlZml4LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIC8vIGRldGVybWluZSBjaGsgbW9kXG4gICAgICAgIGxldCBjaGsgPSBwcmVmaXhDaGsocHJlZml4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGsgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNoayk7XG4gICAgICAgIGxldCByZXN1bHQgPSBwcmVmaXggKyAnMSc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSB3b3Jkc1tpXTtcbiAgICAgICAgICAgIGlmICh4ID4+IDUgIT09IDApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24gNS1iaXQgd29yZCcpO1xuICAgICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHg7XG4gICAgICAgICAgICByZXN1bHQgKz0gQUxQSEFCRVQuY2hhckF0KHgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspO1xuICAgICAgICB9XG4gICAgICAgIGNoayBePSBFTkNPRElOR19DT05TVDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAoY2hrID4+ICgoNSAtIGkpICogNSkpICYgMHgxZjtcbiAgICAgICAgICAgIHJlc3VsdCArPSBBTFBIQUJFVC5jaGFyQXQodik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gX19kZWNvZGUoc3RyLCBMSU1JVCkge1xuICAgICAgICBMSU1JVCA9IExJTUlUIHx8IDkwO1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA8IDgpXG4gICAgICAgICAgICByZXR1cm4gc3RyICsgJyB0b28gc2hvcnQnO1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA+IExJTUlUKVxuICAgICAgICAgICAgcmV0dXJuICdFeGNlZWRzIGxlbmd0aCBsaW1pdCc7XG4gICAgICAgIC8vIGRvbid0IGFsbG93IG1peGVkIGNhc2VcbiAgICAgICAgY29uc3QgbG93ZXJlZCA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB1cHBlcmVkID0gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSB1cHBlcmVkKVxuICAgICAgICAgICAgcmV0dXJuICdNaXhlZC1jYXNlIHN0cmluZyAnICsgc3RyO1xuICAgICAgICBzdHIgPSBsb3dlcmVkO1xuICAgICAgICBjb25zdCBzcGxpdCA9IHN0ci5sYXN0SW5kZXhPZignMScpO1xuICAgICAgICBpZiAoc3BsaXQgPT09IC0xKVxuICAgICAgICAgICAgcmV0dXJuICdObyBzZXBhcmF0b3IgY2hhcmFjdGVyIGZvciAnICsgc3RyO1xuICAgICAgICBpZiAoc3BsaXQgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gJ01pc3NpbmcgcHJlZml4IGZvciAnICsgc3RyO1xuICAgICAgICBjb25zdCBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc3BsaXQpO1xuICAgICAgICBjb25zdCB3b3JkQ2hhcnMgPSBzdHIuc2xpY2Uoc3BsaXQgKyAxKTtcbiAgICAgICAgaWYgKHdvcmRDaGFycy5sZW5ndGggPCA2KVxuICAgICAgICAgICAgcmV0dXJuICdEYXRhIHRvbyBzaG9ydCc7XG4gICAgICAgIGxldCBjaGsgPSBwcmVmaXhDaGsocHJlZml4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGsgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGNoaztcbiAgICAgICAgY29uc3Qgd29yZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3JkQ2hhcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSB3b3JkQ2hhcnMuY2hhckF0KGkpO1xuICAgICAgICAgICAgY29uc3QgdiA9IEFMUEhBQkVUX01BUFtjXTtcbiAgICAgICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdVbmtub3duIGNoYXJhY3RlciAnICsgYztcbiAgICAgICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiB2O1xuICAgICAgICAgICAgLy8gbm90IGluIHRoZSBjaGVja3N1bT9cbiAgICAgICAgICAgIGlmIChpICsgNiA+PSB3b3JkQ2hhcnMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgd29yZHMucHVzaCh2KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hrICE9PSBFTkNPRElOR19DT05TVClcbiAgICAgICAgICAgIHJldHVybiAnSW52YWxpZCBjaGVja3N1bSBmb3IgJyArIHN0cjtcbiAgICAgICAgcmV0dXJuIHsgcHJlZml4LCB3b3JkcyB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUoc3RyLCBMSU1JVCkge1xuICAgICAgICBjb25zdCByZXMgPSBfX2RlY29kZShzdHIsIExJTUlUKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjb2RlKHN0ciwgTElNSVQpIHtcbiAgICAgICAgY29uc3QgcmVzID0gX19kZWNvZGUoc3RyLCBMSU1JVCk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkZWNvZGVVbnNhZmUsXG4gICAgICAgIGRlY29kZSxcbiAgICAgICAgZW5jb2RlLFxuICAgICAgICB0b1dvcmRzLFxuICAgICAgICBmcm9tV29yZHNVbnNhZmUsXG4gICAgICAgIGZyb21Xb3JkcyxcbiAgICB9O1xufVxuZXhwb3J0cy5iZWNoMzIgPSBnZXRMaWJyYXJ5RnJvbUVuY29kaW5nKCdiZWNoMzInKTtcbmV4cG9ydHMuYmVjaDMybSA9IGdldExpYnJhcnlGcm9tRW5jb2RpbmcoJ2JlY2gzMm0nKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIG4sbCx1LGksdCxyLG8sZixlLGM9e30scz1bXSxhPS9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkfGl0ZXJhL2k7ZnVuY3Rpb24gaChuLGwpe2Zvcih2YXIgdSBpbiBsKW5bdV09bFt1XTtyZXR1cm4gbn1mdW5jdGlvbiB2KG4pe3ZhciBsPW4ucGFyZW50Tm9kZTtsJiZsLnJlbW92ZUNoaWxkKG4pfWZ1bmN0aW9uIHkobCx1LGkpe3ZhciB0LHIsbyxmPXt9O2ZvcihvIGluIHUpXCJrZXlcIj09bz90PXVbb106XCJyZWZcIj09bz9yPXVbb106ZltvXT11W29dO2lmKGFyZ3VtZW50cy5sZW5ndGg+MiYmKGYuY2hpbGRyZW49YXJndW1lbnRzLmxlbmd0aD4zP24uY2FsbChhcmd1bWVudHMsMik6aSksXCJmdW5jdGlvblwiPT10eXBlb2YgbCYmbnVsbCE9bC5kZWZhdWx0UHJvcHMpZm9yKG8gaW4gbC5kZWZhdWx0UHJvcHMpdm9pZCAwPT09ZltvXSYmKGZbb109bC5kZWZhdWx0UHJvcHNbb10pO3JldHVybiBwKGwsZix0LHIsbnVsbCl9ZnVuY3Rpb24gcChuLGksdCxyLG8pe3ZhciBmPXt0eXBlOm4scHJvcHM6aSxrZXk6dCxyZWY6cixfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1vPysrdTpvfTtyZXR1cm4gbnVsbD09byYmbnVsbCE9bC52bm9kZSYmbC52bm9kZShmKSxmfWZ1bmN0aW9uIGQoKXtyZXR1cm57Y3VycmVudDpudWxsfX1mdW5jdGlvbiBfKG4pe3JldHVybiBuLmNoaWxkcmVufWZ1bmN0aW9uIGsobixsLHUsaSx0KXt2YXIgcjtmb3IociBpbiB1KVwiY2hpbGRyZW5cIj09PXJ8fFwia2V5XCI9PT1yfHxyIGluIGx8fGcobixyLG51bGwsdVtyXSxpKTtmb3IociBpbiBsKXQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGxbcl18fFwiY2hpbGRyZW5cIj09PXJ8fFwia2V5XCI9PT1yfHxcInZhbHVlXCI9PT1yfHxcImNoZWNrZWRcIj09PXJ8fHVbcl09PT1sW3JdfHxnKG4scixsW3JdLHVbcl0saSl9ZnVuY3Rpb24gYihuLGwsdSl7XCItXCI9PT1sWzBdP24uc2V0UHJvcGVydHkobCxudWxsPT11P1wiXCI6dSk6bltsXT1udWxsPT11P1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIHV8fGEudGVzdChsKT91OnUrXCJweFwifWZ1bmN0aW9uIGcobixsLHUsaSx0KXt2YXIgcjtuOmlmKFwic3R5bGVcIj09PWwpaWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpbi5zdHlsZS5jc3NUZXh0PXU7ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmKG4uc3R5bGUuY3NzVGV4dD1pPVwiXCIpLGkpZm9yKGwgaW4gaSl1JiZsIGluIHV8fGIobi5zdHlsZSxsLFwiXCIpO2lmKHUpZm9yKGwgaW4gdSlpJiZ1W2xdPT09aVtsXXx8YihuLnN0eWxlLGwsdVtsXSl9ZWxzZSBpZihcIm9cIj09PWxbMF0mJlwiblwiPT09bFsxXSlyPWwhPT0obD1sLnJlcGxhY2UoL0NhcHR1cmUkLyxcIlwiKSksbD1sLnRvTG93ZXJDYXNlKClpbiBuP2wudG9Mb3dlckNhc2UoKS5zbGljZSgyKTpsLnNsaWNlKDIpLG4ubHx8KG4ubD17fSksbi5sW2wrcl09dSx1P2l8fG4uYWRkRXZlbnRMaXN0ZW5lcihsLHI/dzptLHIpOm4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLHI/dzptLHIpO2Vsc2UgaWYoXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCl7aWYodClsPWwucmVwbGFjZSgveGxpbmsoSHw6aCkvLFwiaFwiKS5yZXBsYWNlKC9zTmFtZSQvLFwic1wiKTtlbHNlIGlmKFwid2lkdGhcIiE9PWwmJlwiaGVpZ2h0XCIhPT1sJiZcImhyZWZcIiE9PWwmJlwibGlzdFwiIT09bCYmXCJmb3JtXCIhPT1sJiZcInRhYkluZGV4XCIhPT1sJiZcImRvd25sb2FkXCIhPT1sJiZsIGluIG4pdHJ5e25bbF09bnVsbD09dT9cIlwiOnU7YnJlYWsgbn1jYXRjaChuKXt9XCJmdW5jdGlvblwiPT10eXBlb2YgdXx8KG51bGw9PXV8fCExPT09dSYmLTE9PWwuaW5kZXhPZihcIi1cIik/bi5yZW1vdmVBdHRyaWJ1dGUobCk6bi5zZXRBdHRyaWJ1dGUobCx1KSl9fWZ1bmN0aW9uIG0obil7dD0hMDt0cnl7cmV0dXJuIHRoaXMubFtuLnR5cGUrITFdKGwuZXZlbnQ/bC5ldmVudChuKTpuKX1maW5hbGx5e3Q9ITF9fWZ1bmN0aW9uIHcobil7dD0hMDt0cnl7cmV0dXJuIHRoaXMubFtuLnR5cGUrITBdKGwuZXZlbnQ/bC5ldmVudChuKTpuKX1maW5hbGx5e3Q9ITF9fWZ1bmN0aW9uIHgobixsKXt0aGlzLnByb3BzPW4sdGhpcy5jb250ZXh0PWx9ZnVuY3Rpb24gQShuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/QShuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4udHlwZT9BKG4pOm51bGx9ZnVuY3Rpb24gUChuKXt2YXIgbCx1O2lmKG51bGwhPShuPW4uX18pJiZudWxsIT1uLl9fYyl7Zm9yKG4uX19lPW4uX19jLmJhc2U9bnVsbCxsPTA7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2Upe24uX19lPW4uX19jLmJhc2U9dS5fX2U7YnJlYWt9cmV0dXJuIFAobil9fWZ1bmN0aW9uIEMobil7dD9zZXRUaW1lb3V0KG4pOmYobil9ZnVuY3Rpb24gVChuKXsoIW4uX19kJiYobi5fX2Q9ITApJiZyLnB1c2gobikmJiEkLl9fcisrfHxvIT09bC5kZWJvdW5jZVJlbmRlcmluZykmJigobz1sLmRlYm91bmNlUmVuZGVyaW5nKXx8QykoJCl9ZnVuY3Rpb24gJCgpe3ZhciBuLGwsdSxpLHQsbyxmLGU7Zm9yKHIuc29ydChmdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSk7bj1yLnNoaWZ0KCk7KW4uX19kJiYobD1yLmxlbmd0aCxpPXZvaWQgMCx0PXZvaWQgMCxmPShvPSh1PW4pLl9fdikuX19lLChlPXUuX19QKSYmKGk9W10sKHQ9aCh7fSxvKSkuX192PW8uX192KzEsTShlLG8sdCx1Ll9fbix2b2lkIDAhPT1lLm93bmVyU1ZHRWxlbWVudCxudWxsIT1vLl9faD9bZl06bnVsbCxpLG51bGw9PWY/QShvKTpmLG8uX19oKSxOKGksbyksby5fX2UhPWYmJlAobykpLHIubGVuZ3RoPmwmJnIuc29ydChmdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSkpOyQuX19yPTB9ZnVuY3Rpb24gSChuLGwsdSxpLHQscixvLGYsZSxhKXt2YXIgaCx2LHksZCxrLGIsZyxtPWkmJmkuX19rfHxzLHc9bS5sZW5ndGg7Zm9yKHUuX19rPVtdLGg9MDtoPGwubGVuZ3RoO2grKylpZihudWxsIT0oZD11Ll9fa1toXT1udWxsPT0oZD1sW2hdKXx8XCJib29sZWFuXCI9PXR5cGVvZiBkP251bGw6XCJzdHJpbmdcIj09dHlwZW9mIGR8fFwibnVtYmVyXCI9PXR5cGVvZiBkfHxcImJpZ2ludFwiPT10eXBlb2YgZD9wKG51bGwsZCxudWxsLG51bGwsZCk6QXJyYXkuaXNBcnJheShkKT9wKF8se2NoaWxkcmVuOmR9LG51bGwsbnVsbCxudWxsKTpkLl9fYj4wP3AoZC50eXBlLGQucHJvcHMsZC5rZXksZC5yZWY/ZC5yZWY6bnVsbCxkLl9fdik6ZCkpe2lmKGQuX189dSxkLl9fYj11Ll9fYisxLG51bGw9PT0oeT1tW2hdKXx8eSYmZC5rZXk9PXkua2V5JiZkLnR5cGU9PT15LnR5cGUpbVtoXT12b2lkIDA7ZWxzZSBmb3Iodj0wO3Y8dzt2Kyspe2lmKCh5PW1bdl0pJiZkLmtleT09eS5rZXkmJmQudHlwZT09PXkudHlwZSl7bVt2XT12b2lkIDA7YnJlYWt9eT1udWxsfU0obixkLHk9eXx8Yyx0LHIsbyxmLGUsYSksaz1kLl9fZSwodj1kLnJlZikmJnkucmVmIT12JiYoZ3x8KGc9W10pLHkucmVmJiZnLnB1c2goeS5yZWYsbnVsbCxkKSxnLnB1c2godixkLl9fY3x8ayxkKSksbnVsbCE9az8obnVsbD09YiYmKGI9ayksXCJmdW5jdGlvblwiPT10eXBlb2YgZC50eXBlJiZkLl9faz09PXkuX19rP2QuX19kPWU9SShkLGUsbik6ZT16KG4sZCx5LG0sayxlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJih1Ll9fZD1lKSk6ZSYmeS5fX2U9PWUmJmUucGFyZW50Tm9kZSE9biYmKGU9QSh5KSl9Zm9yKHUuX19lPWIsaD13O2gtLTspbnVsbCE9bVtoXSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmbnVsbCE9bVtoXS5fX2UmJm1baF0uX19lPT11Ll9fZCYmKHUuX19kPUwoaSkubmV4dFNpYmxpbmcpLHEobVtoXSxtW2hdKSk7aWYoZylmb3IoaD0wO2g8Zy5sZW5ndGg7aCsrKVMoZ1toXSxnWysraF0sZ1srK2hdKX1mdW5jdGlvbiBJKG4sbCx1KXtmb3IodmFyIGksdD1uLl9fayxyPTA7dCYmcjx0Lmxlbmd0aDtyKyspKGk9dFtyXSkmJihpLl9fPW4sbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpLnR5cGU/SShpLGwsdSk6eih1LGksaSx0LGkuX19lLGwpKTtyZXR1cm4gbH1mdW5jdGlvbiBqKG4sbCl7cmV0dXJuIGw9bHx8W10sbnVsbD09bnx8XCJib29sZWFuXCI9PXR5cGVvZiBufHwoQXJyYXkuaXNBcnJheShuKT9uLnNvbWUoZnVuY3Rpb24obil7aihuLGwpfSk6bC5wdXNoKG4pKSxsfWZ1bmN0aW9uIHoobixsLHUsaSx0LHIpe3ZhciBvLGYsZTtpZih2b2lkIDAhPT1sLl9fZClvPWwuX19kLGwuX19kPXZvaWQgMDtlbHNlIGlmKG51bGw9PXV8fHQhPXJ8fG51bGw9PXQucGFyZW50Tm9kZSluOmlmKG51bGw9PXJ8fHIucGFyZW50Tm9kZSE9PW4pbi5hcHBlbmRDaGlsZCh0KSxvPW51bGw7ZWxzZXtmb3IoZj1yLGU9MDsoZj1mLm5leHRTaWJsaW5nKSYmZTxpLmxlbmd0aDtlKz0xKWlmKGY9PXQpYnJlYWsgbjtuLmluc2VydEJlZm9yZSh0LHIpLG89cn1yZXR1cm4gdm9pZCAwIT09bz9vOnQubmV4dFNpYmxpbmd9ZnVuY3Rpb24gTChuKXt2YXIgbCx1LGk7aWYobnVsbD09bi50eXBlfHxcInN0cmluZ1wiPT10eXBlb2Ygbi50eXBlKXJldHVybiBuLl9fZTtpZihuLl9faylmb3IobD1uLl9fay5sZW5ndGgtMTtsPj0wO2wtLSlpZigodT1uLl9fa1tsXSkmJihpPUwodSkpKXJldHVybiBpO3JldHVybiBudWxsfWZ1bmN0aW9uIE0obix1LGksdCxyLG8sZixlLGMpe3ZhciBzLGEsdix5LHAsZCxrLGIsZyxtLHcsQSxQLEMsVCwkPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYoYz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwsbz1bZV0pLChzPWwuX19iKSYmcyh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiAkKXtpZihiPXUucHJvcHMsZz0ocz0kLmNvbnRleHRUeXBlKSYmdFtzLl9fY10sbT1zP2c/Zy5wcm9wcy52YWx1ZTpzLl9fOnQsaS5fX2M/az0oYT11Ll9fYz1pLl9fYykuX189YS5fX0U6KFwicHJvdG90eXBlXCJpbiAkJiYkLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9YT1uZXcgJChiLG0pOih1Ll9fYz1hPW5ldyB4KGIsbSksYS5jb25zdHJ1Y3Rvcj0kLGEucmVuZGVyPUIpLGcmJmcuc3ViKGEpLGEucHJvcHM9YixhLnN0YXRlfHwoYS5zdGF0ZT17fSksYS5jb250ZXh0PW0sYS5fX249dCx2PWEuX19kPSEwLGEuX19oPVtdLGEuX3NiPVtdKSxudWxsPT1hLl9fcyYmKGEuX19zPWEuc3RhdGUpLG51bGwhPSQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoYS5fX3M9PWEuc3RhdGUmJihhLl9fcz1oKHt9LGEuX19zKSksaChhLl9fcywkLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhiLGEuX19zKSkpLHk9YS5wcm9wcyxwPWEuc3RhdGUsYS5fX3Y9dSx2KW51bGw9PSQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZudWxsIT1hLmNvbXBvbmVudFdpbGxNb3VudCYmYS5jb21wb25lbnRXaWxsTW91bnQoKSxudWxsIT1hLmNvbXBvbmVudERpZE1vdW50JiZhLl9faC5wdXNoKGEuY29tcG9uZW50RGlkTW91bnQpO2Vsc2V7aWYobnVsbD09JC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJmIhPT15JiZudWxsIT1hLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmEuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhiLG0pLCFhLl9fZSYmbnVsbCE9YS5zaG91bGRDb21wb25lbnRVcGRhdGUmJiExPT09YS5zaG91bGRDb21wb25lbnRVcGRhdGUoYixhLl9fcyxtKXx8dS5fX3Y9PT1pLl9fdil7Zm9yKHUuX192IT09aS5fX3YmJihhLnByb3BzPWIsYS5zdGF0ZT1hLl9fcyxhLl9fZD0hMSksdS5fX2U9aS5fX2UsdS5fX2s9aS5fX2ssdS5fX2suZm9yRWFjaChmdW5jdGlvbihuKXtuJiYobi5fXz11KX0pLHc9MDt3PGEuX3NiLmxlbmd0aDt3KyspYS5fX2gucHVzaChhLl9zYlt3XSk7YS5fc2I9W10sYS5fX2gubGVuZ3RoJiZmLnB1c2goYSk7YnJlYWsgbn1udWxsIT1hLmNvbXBvbmVudFdpbGxVcGRhdGUmJmEuY29tcG9uZW50V2lsbFVwZGF0ZShiLGEuX19zLG0pLG51bGwhPWEuY29tcG9uZW50RGlkVXBkYXRlJiZhLl9faC5wdXNoKGZ1bmN0aW9uKCl7YS5jb21wb25lbnREaWRVcGRhdGUoeSxwLGQpfSl9aWYoYS5jb250ZXh0PW0sYS5wcm9wcz1iLGEuX19QPW4sQT1sLl9fcixQPTAsXCJwcm90b3R5cGVcImluICQmJiQucHJvdG90eXBlLnJlbmRlcil7Zm9yKGEuc3RhdGU9YS5fX3MsYS5fX2Q9ITEsQSYmQSh1KSxzPWEucmVuZGVyKGEucHJvcHMsYS5zdGF0ZSxhLmNvbnRleHQpLEM9MDtDPGEuX3NiLmxlbmd0aDtDKyspYS5fX2gucHVzaChhLl9zYltDXSk7YS5fc2I9W119ZWxzZSBkb3thLl9fZD0hMSxBJiZBKHUpLHM9YS5yZW5kZXIoYS5wcm9wcyxhLnN0YXRlLGEuY29udGV4dCksYS5zdGF0ZT1hLl9fc313aGlsZShhLl9fZCYmKytQPDI1KTthLnN0YXRlPWEuX19zLG51bGwhPWEuZ2V0Q2hpbGRDb250ZXh0JiYodD1oKGgoe30sdCksYS5nZXRDaGlsZENvbnRleHQoKSkpLHZ8fG51bGw9PWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChkPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxwKSksVD1udWxsIT1zJiZzLnR5cGU9PT1fJiZudWxsPT1zLmtleT9zLnByb3BzLmNoaWxkcmVuOnMsSChuLEFycmF5LmlzQXJyYXkoVCk/VDpbVF0sdSxpLHQscixvLGYsZSxjKSxhLmJhc2U9dS5fX2UsdS5fX2g9bnVsbCxhLl9faC5sZW5ndGgmJmYucHVzaChhKSxrJiYoYS5fX0U9YS5fXz1udWxsKSxhLl9fZT0hMX1lbHNlIG51bGw9PW8mJnUuX192PT09aS5fX3Y/KHUuX19rPWkuX19rLHUuX19lPWkuX19lKTp1Ll9fZT1PKGkuX19lLHUsaSx0LHIsbyxmLGMpOyhzPWwuZGlmZmVkKSYmcyh1KX1jYXRjaChuKXt1Ll9fdj1udWxsLChjfHxudWxsIT1vKSYmKHUuX19lPWUsdS5fX2g9ISFjLG9bby5pbmRleE9mKGUpXT1udWxsKSxsLl9fZShuLHUsaSl9fWZ1bmN0aW9uIE4obix1KXtsLl9fYyYmbC5fX2ModSxuKSxuLnNvbWUoZnVuY3Rpb24odSl7dHJ5e249dS5fX2gsdS5fX2g9W10sbi5zb21lKGZ1bmN0aW9uKG4pe24uY2FsbCh1KX0pfWNhdGNoKG4pe2wuX19lKG4sdS5fX3YpfX0pfWZ1bmN0aW9uIE8obCx1LGksdCxyLG8sZixlKXt2YXIgcyxhLGgseT1pLnByb3BzLHA9dS5wcm9wcyxkPXUudHlwZSxfPTA7aWYoXCJzdmdcIj09PWQmJihyPSEwKSxudWxsIT1vKWZvcig7XzxvLmxlbmd0aDtfKyspaWYoKHM9b1tfXSkmJlwic2V0QXR0cmlidXRlXCJpbiBzPT0hIWQmJihkP3MubG9jYWxOYW1lPT09ZDozPT09cy5ub2RlVHlwZSkpe2w9cyxvW19dPW51bGw7YnJlYWt9aWYobnVsbD09bCl7aWYobnVsbD09PWQpcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHApO2w9cj9kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGQpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZCxwLmlzJiZwKSxvPW51bGwsZT0hMX1pZihudWxsPT09ZCl5PT09cHx8ZSYmbC5kYXRhPT09cHx8KGwuZGF0YT1wKTtlbHNle2lmKG89byYmbi5jYWxsKGwuY2hpbGROb2RlcyksYT0oeT1pLnByb3BzfHxjKS5kYW5nZXJvdXNseVNldElubmVySFRNTCxoPXAuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIWUpe2lmKG51bGwhPW8pZm9yKHk9e30sXz0wO188bC5hdHRyaWJ1dGVzLmxlbmd0aDtfKyspeVtsLmF0dHJpYnV0ZXNbX10ubmFtZV09bC5hdHRyaWJ1dGVzW19dLnZhbHVlOyhofHxhKSYmKGgmJihhJiZoLl9faHRtbD09YS5fX2h0bWx8fGguX19odG1sPT09bC5pbm5lckhUTUwpfHwobC5pbm5lckhUTUw9aCYmaC5fX2h0bWx8fFwiXCIpKX1pZihrKGwscCx5LHIsZSksaCl1Ll9faz1bXTtlbHNlIGlmKF89dS5wcm9wcy5jaGlsZHJlbixIKGwsQXJyYXkuaXNBcnJheShfKT9fOltfXSx1LGksdCxyJiZcImZvcmVpZ25PYmplY3RcIiE9PWQsbyxmLG8/b1swXTppLl9fayYmQShpLDApLGUpLG51bGwhPW8pZm9yKF89by5sZW5ndGg7Xy0tOyludWxsIT1vW19dJiZ2KG9bX10pO2V8fChcInZhbHVlXCJpbiBwJiZ2b2lkIDAhPT0oXz1wLnZhbHVlKSYmKF8hPT1sLnZhbHVlfHxcInByb2dyZXNzXCI9PT1kJiYhX3x8XCJvcHRpb25cIj09PWQmJl8hPT15LnZhbHVlKSYmZyhsLFwidmFsdWVcIixfLHkudmFsdWUsITEpLFwiY2hlY2tlZFwiaW4gcCYmdm9pZCAwIT09KF89cC5jaGVja2VkKSYmXyE9PWwuY2hlY2tlZCYmZyhsLFwiY2hlY2tlZFwiLF8seS5jaGVja2VkLCExKSl9cmV0dXJuIGx9ZnVuY3Rpb24gUyhuLHUsaSl7dHJ5e1wiZnVuY3Rpb25cIj09dHlwZW9mIG4/bih1KTpuLmN1cnJlbnQ9dX1jYXRjaChuKXtsLl9fZShuLGkpfX1mdW5jdGlvbiBxKG4sdSxpKXt2YXIgdCxyO2lmKGwudW5tb3VudCYmbC51bm1vdW50KG4pLCh0PW4ucmVmKSYmKHQuY3VycmVudCYmdC5jdXJyZW50IT09bi5fX2V8fFModCxudWxsLHUpKSxudWxsIT0odD1uLl9fYykpe2lmKHQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e3QuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChuKXtsLl9fZShuLHUpfXQuYmFzZT10Ll9fUD1udWxsLG4uX19jPXZvaWQgMH1pZih0PW4uX19rKWZvcihyPTA7cjx0Lmxlbmd0aDtyKyspdFtyXSYmcSh0W3JdLHUsaXx8XCJmdW5jdGlvblwiIT10eXBlb2Ygbi50eXBlKTtpfHxudWxsPT1uLl9fZXx8dihuLl9fZSksbi5fXz1uLl9fZT1uLl9fZD12b2lkIDB9ZnVuY3Rpb24gQihuLGwsdSl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3Iobix1KX1mdW5jdGlvbiBEKHUsaSx0KXt2YXIgcixvLGY7bC5fXyYmbC5fXyh1LGkpLG89KHI9XCJmdW5jdGlvblwiPT10eXBlb2YgdCk/bnVsbDp0JiZ0Ll9fa3x8aS5fX2ssZj1bXSxNKGksdT0oIXImJnR8fGkpLl9faz15KF8sbnVsbCxbdV0pLG98fGMsYyx2b2lkIDAhPT1pLm93bmVyU1ZHRWxlbWVudCwhciYmdD9bdF06bz9udWxsOmkuZmlyc3RDaGlsZD9uLmNhbGwoaS5jaGlsZE5vZGVzKTpudWxsLGYsIXImJnQ/dDpvP28uX19lOmkuZmlyc3RDaGlsZCxyKSxOKGYsdSl9ZnVuY3Rpb24gRShuLGwpe0QobixsLEUpfWZ1bmN0aW9uIEYobCx1LGkpe3ZhciB0LHIsbyxmPWgoe30sbC5wcm9wcyk7Zm9yKG8gaW4gdSlcImtleVwiPT1vP3Q9dVtvXTpcInJlZlwiPT1vP3I9dVtvXTpmW29dPXVbb107cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MiYmKGYuY2hpbGRyZW49YXJndW1lbnRzLmxlbmd0aD4zP24uY2FsbChhcmd1bWVudHMsMik6aSkscChsLnR5cGUsZix0fHxsLmtleSxyfHxsLnJlZixudWxsKX1mdW5jdGlvbiBHKG4sbCl7dmFyIHU9e19fYzpsPVwiX19jQ1wiK2UrKyxfXzpuLENvbnN1bWVyOmZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uY2hpbGRyZW4obCl9LFByb3ZpZGVyOmZ1bmN0aW9uKG4pe3ZhciB1LGk7cmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb250ZXh0fHwodT1bXSwoaT17fSlbbF09dGhpcyx0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBpfSx0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLnByb3BzLnZhbHVlIT09bi52YWx1ZSYmdS5zb21lKGZ1bmN0aW9uKG4pe24uX19lPSEwLFQobil9KX0sdGhpcy5zdWI9ZnVuY3Rpb24obil7dS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Uuc3BsaWNlKHUuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobil9fSksbi5jaGlsZHJlbn19O3JldHVybiB1LlByb3ZpZGVyLl9fPXUuQ29uc3VtZXIuY29udGV4dFR5cGU9dX1uPXMuc2xpY2UsbD17X19lOmZ1bmN0aW9uKG4sbCx1LGkpe2Zvcih2YXIgdCxyLG87bD1sLl9fOylpZigodD1sLl9fYykmJiF0Ll9fKXRyeXtpZigocj10LmNvbnN0cnVjdG9yKSYmbnVsbCE9ci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3ImJih0LnNldFN0YXRlKHIuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSxvPXQuX19kKSxudWxsIT10LmNvbXBvbmVudERpZENhdGNoJiYodC5jb21wb25lbnREaWRDYXRjaChuLGl8fHt9KSxvPXQuX19kKSxvKXJldHVybiB0Ll9fRT10fWNhdGNoKGwpe249bH10aHJvdyBufX0sdT0wLGk9ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4mJnZvaWQgMD09PW4uY29uc3RydWN0b3J9LHQ9ITEseC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24obixsKXt2YXIgdTt1PW51bGwhPXRoaXMuX19zJiZ0aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9aCh7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKGgoe30sdSksdGhpcy5wcm9wcykpLG4mJmgodSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX3NiLnB1c2gobCksVCh0aGlzKSl9LHgucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSxUKHRoaXMpKX0seC5wcm90b3R5cGUucmVuZGVyPV8scj1bXSxmPVwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2U/UHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKTpzZXRUaW1lb3V0LCQuX19yPTAsZT0wO2V4cG9ydHt4IGFzIENvbXBvbmVudCxfIGFzIEZyYWdtZW50LEYgYXMgY2xvbmVFbGVtZW50LEcgYXMgY3JlYXRlQ29udGV4dCx5IGFzIGNyZWF0ZUVsZW1lbnQsZCBhcyBjcmVhdGVSZWYseSBhcyBoLEUgYXMgaHlkcmF0ZSxpIGFzIGlzVmFsaWRFbGVtZW50LGwgYXMgb3B0aW9ucyxEIGFzIHJlbmRlcixqIGFzIHRvQ2hpbGRBcnJheX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVhY3QubW9kdWxlLmpzLm1hcFxuIiwiLyohIG5vYmxlLXNlY3AyNTZrMSAtIE1JVCBMaWNlbnNlIChjKSAyMDE5IFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0ICogYXMgbm9kZUNyeXB0byBmcm9tICdjcnlwdG8nO1xuY29uc3QgXzBuID0gQmlnSW50KDApO1xuY29uc3QgXzFuID0gQmlnSW50KDEpO1xuY29uc3QgXzJuID0gQmlnSW50KDIpO1xuY29uc3QgXzNuID0gQmlnSW50KDMpO1xuY29uc3QgXzhuID0gQmlnSW50KDgpO1xuY29uc3QgQ1VSVkUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBhOiBfMG4sXG4gICAgYjogQmlnSW50KDcpLFxuICAgIFA6IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmYzJmJyksXG4gICAgbjogQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnKSxcbiAgICBoOiBfMW4sXG4gICAgR3g6IEJpZ0ludCgnNTUwNjYyNjMwMjIyNzczNDM2Njk1Nzg3MTg4OTUxNjg1MzQzMjYyNTA2MDM0NTM3Nzc1OTQxNzU1MDAxODczNjAzODkxMTY3MjkyNDAnKSxcbiAgICBHeTogQmlnSW50KCczMjY3MDUxMDAyMDc1ODgxNjk3ODA4MzA4NTEzMDUwNzA0MzE4NDQ3MTI3MzM4MDY1OTI0MzI3NTkzODkwNDMzNTc1NzMzNzQ4MjQyNCcpLFxuICAgIGJldGE6IEJpZ0ludCgnMHg3YWU5NmEyYjY1N2MwNzEwNmU2NDQ3OWVhYzM0MzRlOTljZjA0OTc1MTJmNTg5OTVjMTM5NmMyODcxOTUwMWVlJyksXG59KTtcbmNvbnN0IGRpdk5lYXJlc3QgPSAoYSwgYikgPT4gKGEgKyBiIC8gXzJuKSAvIGI7XG5jb25zdCBlbmRvID0ge1xuICAgIGJldGE6IEJpZ0ludCgnMHg3YWU5NmEyYjY1N2MwNzEwNmU2NDQ3OWVhYzM0MzRlOTljZjA0OTc1MTJmNTg5OTVjMTM5NmMyODcxOTUwMWVlJyksXG4gICAgc3BsaXRTY2FsYXIoaykge1xuICAgICAgICBjb25zdCB7IG4gfSA9IENVUlZFO1xuICAgICAgICBjb25zdCBhMSA9IEJpZ0ludCgnMHgzMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScpO1xuICAgICAgICBjb25zdCBiMSA9IC1fMW4gKiBCaWdJbnQoJzB4ZTQ0MzdlZDYwMTBlODgyODZmNTQ3ZmE5MGFiZmU0YzMnKTtcbiAgICAgICAgY29uc3QgYTIgPSBCaWdJbnQoJzB4MTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4Jyk7XG4gICAgICAgIGNvbnN0IGIyID0gYTE7XG4gICAgICAgIGNvbnN0IFBPV18yXzEyOCA9IEJpZ0ludCgnMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKTtcbiAgICAgICAgY29uc3QgYzEgPSBkaXZOZWFyZXN0KGIyICogaywgbik7XG4gICAgICAgIGNvbnN0IGMyID0gZGl2TmVhcmVzdCgtYjEgKiBrLCBuKTtcbiAgICAgICAgbGV0IGsxID0gbW9kKGsgLSBjMSAqIGExIC0gYzIgKiBhMiwgbik7XG4gICAgICAgIGxldCBrMiA9IG1vZCgtYzEgKiBiMSAtIGMyICogYjIsIG4pO1xuICAgICAgICBjb25zdCBrMW5lZyA9IGsxID4gUE9XXzJfMTI4O1xuICAgICAgICBjb25zdCBrMm5lZyA9IGsyID4gUE9XXzJfMTI4O1xuICAgICAgICBpZiAoazFuZWcpXG4gICAgICAgICAgICBrMSA9IG4gLSBrMTtcbiAgICAgICAgaWYgKGsybmVnKVxuICAgICAgICAgICAgazIgPSBuIC0gazI7XG4gICAgICAgIGlmIChrMSA+IFBPV18yXzEyOCB8fCBrMiA+IFBPV18yXzEyOCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzcGxpdFNjYWxhckVuZG86IEVuZG9tb3JwaGlzbSBmYWlsZWQsIGs9JyArIGspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGsxbmVnLCBrMSwgazJuZWcsIGsyIH07XG4gICAgfSxcbn07XG5jb25zdCBmaWVsZExlbiA9IDMyO1xuY29uc3QgZ3JvdXBMZW4gPSAzMjtcbmNvbnN0IGhhc2hMZW4gPSAzMjtcbmNvbnN0IGNvbXByZXNzZWRMZW4gPSBmaWVsZExlbiArIDE7XG5jb25zdCB1bmNvbXByZXNzZWRMZW4gPSAyICogZmllbGRMZW4gKyAxO1xuZXhwb3J0IHsgQ1VSVkUgfTtcbmZ1bmN0aW9uIHdlaWVyc3RyYXNzKHgpIHtcbiAgICBjb25zdCB7IGEsIGIgfSA9IENVUlZFO1xuICAgIGNvbnN0IHgyID0gbW9kKHggKiB4KTtcbiAgICBjb25zdCB4MyA9IG1vZCh4MiAqIHgpO1xuICAgIHJldHVybiBtb2QoeDMgKyBhICogeCArIGIpO1xufVxuY29uc3QgVVNFX0VORE9NT1JQSElTTSA9IENVUlZFLmEgPT09IF8wbjtcbmNsYXNzIFNoYUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0SmFjUG9pbnQob3RoZXIpIHtcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIEphY29iaWFuUG9pbnQpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKYWNvYmlhblBvaW50IGV4cGVjdGVkJyk7XG59XG5jbGFzcyBKYWNvYmlhblBvaW50IHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQWZmaW5lKHApIHtcbiAgICAgICAgaWYgKCEocCBpbnN0YW5jZW9mIFBvaW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSmFjb2JpYW5Qb2ludCNmcm9tQWZmaW5lOiBleHBlY3RlZCBQb2ludCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwLmVxdWFscyhQb2ludC5aRVJPKSlcbiAgICAgICAgICAgIHJldHVybiBKYWNvYmlhblBvaW50LlpFUk87XG4gICAgICAgIHJldHVybiBuZXcgSmFjb2JpYW5Qb2ludChwLngsIHAueSwgXzFuKTtcbiAgICB9XG4gICAgc3RhdGljIHRvQWZmaW5lQmF0Y2gocG9pbnRzKSB7XG4gICAgICAgIGNvbnN0IHRvSW52ID0gaW52ZXJ0QmF0Y2gocG9pbnRzLm1hcCgocCkgPT4gcC56KSk7XG4gICAgICAgIHJldHVybiBwb2ludHMubWFwKChwLCBpKSA9PiBwLnRvQWZmaW5lKHRvSW52W2ldKSk7XG4gICAgfVxuICAgIHN0YXRpYyBub3JtYWxpemVaKHBvaW50cykge1xuICAgICAgICByZXR1cm4gSmFjb2JpYW5Qb2ludC50b0FmZmluZUJhdGNoKHBvaW50cykubWFwKEphY29iaWFuUG9pbnQuZnJvbUFmZmluZSk7XG4gICAgfVxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICBhc3NlcnRKYWNQb2ludChvdGhlcik7XG4gICAgICAgIGNvbnN0IHsgeDogWDEsIHk6IFkxLCB6OiBaMSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB4OiBYMiwgeTogWTIsIHo6IFoyIH0gPSBvdGhlcjtcbiAgICAgICAgY29uc3QgWjFaMSA9IG1vZChaMSAqIFoxKTtcbiAgICAgICAgY29uc3QgWjJaMiA9IG1vZChaMiAqIFoyKTtcbiAgICAgICAgY29uc3QgVTEgPSBtb2QoWDEgKiBaMloyKTtcbiAgICAgICAgY29uc3QgVTIgPSBtb2QoWDIgKiBaMVoxKTtcbiAgICAgICAgY29uc3QgUzEgPSBtb2QobW9kKFkxICogWjIpICogWjJaMik7XG4gICAgICAgIGNvbnN0IFMyID0gbW9kKG1vZChZMiAqIFoxKSAqIFoxWjEpO1xuICAgICAgICByZXR1cm4gVTEgPT09IFUyICYmIFMxID09PSBTMjtcbiAgICB9XG4gICAgbmVnYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEphY29iaWFuUG9pbnQodGhpcy54LCBtb2QoLXRoaXMueSksIHRoaXMueik7XG4gICAgfVxuICAgIGRvdWJsZSgpIHtcbiAgICAgICAgY29uc3QgeyB4OiBYMSwgeTogWTEsIHo6IFoxIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBBID0gbW9kKFgxICogWDEpO1xuICAgICAgICBjb25zdCBCID0gbW9kKFkxICogWTEpO1xuICAgICAgICBjb25zdCBDID0gbW9kKEIgKiBCKTtcbiAgICAgICAgY29uc3QgeDFiID0gWDEgKyBCO1xuICAgICAgICBjb25zdCBEID0gbW9kKF8ybiAqIChtb2QoeDFiICogeDFiKSAtIEEgLSBDKSk7XG4gICAgICAgIGNvbnN0IEUgPSBtb2QoXzNuICogQSk7XG4gICAgICAgIGNvbnN0IEYgPSBtb2QoRSAqIEUpO1xuICAgICAgICBjb25zdCBYMyA9IG1vZChGIC0gXzJuICogRCk7XG4gICAgICAgIGNvbnN0IFkzID0gbW9kKEUgKiAoRCAtIFgzKSAtIF84biAqIEMpO1xuICAgICAgICBjb25zdCBaMyA9IG1vZChfMm4gKiBZMSAqIFoxKTtcbiAgICAgICAgcmV0dXJuIG5ldyBKYWNvYmlhblBvaW50KFgzLCBZMywgWjMpO1xuICAgIH1cbiAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgYXNzZXJ0SmFjUG9pbnQob3RoZXIpO1xuICAgICAgICBjb25zdCB7IHg6IFgxLCB5OiBZMSwgejogWjEgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgeDogWDIsIHk6IFkyLCB6OiBaMiB9ID0gb3RoZXI7XG4gICAgICAgIGlmIChYMiA9PT0gXzBuIHx8IFkyID09PSBfMG4pXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgaWYgKFgxID09PSBfMG4gfHwgWTEgPT09IF8wbilcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgY29uc3QgWjFaMSA9IG1vZChaMSAqIFoxKTtcbiAgICAgICAgY29uc3QgWjJaMiA9IG1vZChaMiAqIFoyKTtcbiAgICAgICAgY29uc3QgVTEgPSBtb2QoWDEgKiBaMloyKTtcbiAgICAgICAgY29uc3QgVTIgPSBtb2QoWDIgKiBaMVoxKTtcbiAgICAgICAgY29uc3QgUzEgPSBtb2QobW9kKFkxICogWjIpICogWjJaMik7XG4gICAgICAgIGNvbnN0IFMyID0gbW9kKG1vZChZMiAqIFoxKSAqIFoxWjEpO1xuICAgICAgICBjb25zdCBIID0gbW9kKFUyIC0gVTEpO1xuICAgICAgICBjb25zdCByID0gbW9kKFMyIC0gUzEpO1xuICAgICAgICBpZiAoSCA9PT0gXzBuKSB7XG4gICAgICAgICAgICBpZiAociA9PT0gXzBuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG91YmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSmFjb2JpYW5Qb2ludC5aRVJPO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IEhIID0gbW9kKEggKiBIKTtcbiAgICAgICAgY29uc3QgSEhIID0gbW9kKEggKiBISCk7XG4gICAgICAgIGNvbnN0IFYgPSBtb2QoVTEgKiBISCk7XG4gICAgICAgIGNvbnN0IFgzID0gbW9kKHIgKiByIC0gSEhIIC0gXzJuICogVik7XG4gICAgICAgIGNvbnN0IFkzID0gbW9kKHIgKiAoViAtIFgzKSAtIFMxICogSEhIKTtcbiAgICAgICAgY29uc3QgWjMgPSBtb2QoWjEgKiBaMiAqIEgpO1xuICAgICAgICByZXR1cm4gbmV3IEphY29iaWFuUG9pbnQoWDMsIFkzLCBaMyk7XG4gICAgfVxuICAgIHN1YnRyYWN0KG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChvdGhlci5uZWdhdGUoKSk7XG4gICAgfVxuICAgIG11bHRpcGx5VW5zYWZlKHNjYWxhcikge1xuICAgICAgICBjb25zdCBQMCA9IEphY29iaWFuUG9pbnQuWkVSTztcbiAgICAgICAgaWYgKHR5cGVvZiBzY2FsYXIgPT09ICdiaWdpbnQnICYmIHNjYWxhciA9PT0gXzBuKVxuICAgICAgICAgICAgcmV0dXJuIFAwO1xuICAgICAgICBsZXQgbiA9IG5vcm1hbGl6ZVNjYWxhcihzY2FsYXIpO1xuICAgICAgICBpZiAobiA9PT0gXzFuKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmICghVVNFX0VORE9NT1JQSElTTSkge1xuICAgICAgICAgICAgbGV0IHAgPSBQMDtcbiAgICAgICAgICAgIGxldCBkID0gdGhpcztcbiAgICAgICAgICAgIHdoaWxlIChuID4gXzBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4gJiBfMW4pXG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLmFkZChkKTtcbiAgICAgICAgICAgICAgICBkID0gZC5kb3VibGUoKTtcbiAgICAgICAgICAgICAgICBuID4+PSBfMW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeyBrMW5lZywgazEsIGsybmVnLCBrMiB9ID0gZW5kby5zcGxpdFNjYWxhcihuKTtcbiAgICAgICAgbGV0IGsxcCA9IFAwO1xuICAgICAgICBsZXQgazJwID0gUDA7XG4gICAgICAgIGxldCBkID0gdGhpcztcbiAgICAgICAgd2hpbGUgKGsxID4gXzBuIHx8IGsyID4gXzBuKSB7XG4gICAgICAgICAgICBpZiAoazEgJiBfMW4pXG4gICAgICAgICAgICAgICAgazFwID0gazFwLmFkZChkKTtcbiAgICAgICAgICAgIGlmIChrMiAmIF8xbilcbiAgICAgICAgICAgICAgICBrMnAgPSBrMnAuYWRkKGQpO1xuICAgICAgICAgICAgZCA9IGQuZG91YmxlKCk7XG4gICAgICAgICAgICBrMSA+Pj0gXzFuO1xuICAgICAgICAgICAgazIgPj49IF8xbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoazFuZWcpXG4gICAgICAgICAgICBrMXAgPSBrMXAubmVnYXRlKCk7XG4gICAgICAgIGlmIChrMm5lZylcbiAgICAgICAgICAgIGsycCA9IGsycC5uZWdhdGUoKTtcbiAgICAgICAgazJwID0gbmV3IEphY29iaWFuUG9pbnQobW9kKGsycC54ICogZW5kby5iZXRhKSwgazJwLnksIGsycC56KTtcbiAgICAgICAgcmV0dXJuIGsxcC5hZGQoazJwKTtcbiAgICB9XG4gICAgcHJlY29tcHV0ZVdpbmRvdyhXKSB7XG4gICAgICAgIGNvbnN0IHdpbmRvd3MgPSBVU0VfRU5ET01PUlBISVNNID8gMTI4IC8gVyArIDEgOiAyNTYgLyBXICsgMTtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgICAgIGxldCBwID0gdGhpcztcbiAgICAgICAgbGV0IGJhc2UgPSBwO1xuICAgICAgICBmb3IgKGxldCB3aW5kb3cgPSAwOyB3aW5kb3cgPCB3aW5kb3dzOyB3aW5kb3crKykge1xuICAgICAgICAgICAgYmFzZSA9IHA7XG4gICAgICAgICAgICBwb2ludHMucHVzaChiYXNlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMiAqKiAoVyAtIDEpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBiYXNlID0gYmFzZS5hZGQocCk7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goYmFzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwID0gYmFzZS5kb3VibGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG9pbnRzO1xuICAgIH1cbiAgICB3TkFGKG4sIGFmZmluZVBvaW50KSB7XG4gICAgICAgIGlmICghYWZmaW5lUG9pbnQgJiYgdGhpcy5lcXVhbHMoSmFjb2JpYW5Qb2ludC5CQVNFKSlcbiAgICAgICAgICAgIGFmZmluZVBvaW50ID0gUG9pbnQuQkFTRTtcbiAgICAgICAgY29uc3QgVyA9IChhZmZpbmVQb2ludCAmJiBhZmZpbmVQb2ludC5fV0lORE9XX1NJWkUpIHx8IDE7XG4gICAgICAgIGlmICgyNTYgJSBXKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BvaW50I3dOQUY6IEludmFsaWQgcHJlY29tcHV0YXRpb24gd2luZG93LCBtdXN0IGJlIHBvd2VyIG9mIDInKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJlY29tcHV0ZXMgPSBhZmZpbmVQb2ludCAmJiBwb2ludFByZWNvbXB1dGVzLmdldChhZmZpbmVQb2ludCk7XG4gICAgICAgIGlmICghcHJlY29tcHV0ZXMpIHtcbiAgICAgICAgICAgIHByZWNvbXB1dGVzID0gdGhpcy5wcmVjb21wdXRlV2luZG93KFcpO1xuICAgICAgICAgICAgaWYgKGFmZmluZVBvaW50ICYmIFcgIT09IDEpIHtcbiAgICAgICAgICAgICAgICBwcmVjb21wdXRlcyA9IEphY29iaWFuUG9pbnQubm9ybWFsaXplWihwcmVjb21wdXRlcyk7XG4gICAgICAgICAgICAgICAgcG9pbnRQcmVjb21wdXRlcy5zZXQoYWZmaW5lUG9pbnQsIHByZWNvbXB1dGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcCA9IEphY29iaWFuUG9pbnQuWkVSTztcbiAgICAgICAgbGV0IGYgPSBKYWNvYmlhblBvaW50LkJBU0U7XG4gICAgICAgIGNvbnN0IHdpbmRvd3MgPSAxICsgKFVTRV9FTkRPTU9SUEhJU00gPyAxMjggLyBXIDogMjU2IC8gVyk7XG4gICAgICAgIGNvbnN0IHdpbmRvd1NpemUgPSAyICoqIChXIC0gMSk7XG4gICAgICAgIGNvbnN0IG1hc2sgPSBCaWdJbnQoMiAqKiBXIC0gMSk7XG4gICAgICAgIGNvbnN0IG1heE51bWJlciA9IDIgKiogVztcbiAgICAgICAgY29uc3Qgc2hpZnRCeSA9IEJpZ0ludChXKTtcbiAgICAgICAgZm9yIChsZXQgd2luZG93ID0gMDsgd2luZG93IDwgd2luZG93czsgd2luZG93KyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdpbmRvdyAqIHdpbmRvd1NpemU7XG4gICAgICAgICAgICBsZXQgd2JpdHMgPSBOdW1iZXIobiAmIG1hc2spO1xuICAgICAgICAgICAgbiA+Pj0gc2hpZnRCeTtcbiAgICAgICAgICAgIGlmICh3Yml0cyA+IHdpbmRvd1NpemUpIHtcbiAgICAgICAgICAgICAgICB3Yml0cyAtPSBtYXhOdW1iZXI7XG4gICAgICAgICAgICAgICAgbiArPSBfMW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQxID0gb2Zmc2V0O1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0MiA9IG9mZnNldCArIE1hdGguYWJzKHdiaXRzKSAtIDE7XG4gICAgICAgICAgICBjb25zdCBjb25kMSA9IHdpbmRvdyAlIDIgIT09IDA7XG4gICAgICAgICAgICBjb25zdCBjb25kMiA9IHdiaXRzIDwgMDtcbiAgICAgICAgICAgIGlmICh3Yml0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGYgPSBmLmFkZChjb25zdFRpbWVOZWdhdGUoY29uZDEsIHByZWNvbXB1dGVzW29mZnNldDFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwID0gcC5hZGQoY29uc3RUaW1lTmVnYXRlKGNvbmQyLCBwcmVjb21wdXRlc1tvZmZzZXQyXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHAsIGYgfTtcbiAgICB9XG4gICAgbXVsdGlwbHkoc2NhbGFyLCBhZmZpbmVQb2ludCkge1xuICAgICAgICBsZXQgbiA9IG5vcm1hbGl6ZVNjYWxhcihzY2FsYXIpO1xuICAgICAgICBsZXQgcG9pbnQ7XG4gICAgICAgIGxldCBmYWtlO1xuICAgICAgICBpZiAoVVNFX0VORE9NT1JQSElTTSkge1xuICAgICAgICAgICAgY29uc3QgeyBrMW5lZywgazEsIGsybmVnLCBrMiB9ID0gZW5kby5zcGxpdFNjYWxhcihuKTtcbiAgICAgICAgICAgIGxldCB7IHA6IGsxcCwgZjogZjFwIH0gPSB0aGlzLndOQUYoazEsIGFmZmluZVBvaW50KTtcbiAgICAgICAgICAgIGxldCB7IHA6IGsycCwgZjogZjJwIH0gPSB0aGlzLndOQUYoazIsIGFmZmluZVBvaW50KTtcbiAgICAgICAgICAgIGsxcCA9IGNvbnN0VGltZU5lZ2F0ZShrMW5lZywgazFwKTtcbiAgICAgICAgICAgIGsycCA9IGNvbnN0VGltZU5lZ2F0ZShrMm5lZywgazJwKTtcbiAgICAgICAgICAgIGsycCA9IG5ldyBKYWNvYmlhblBvaW50KG1vZChrMnAueCAqIGVuZG8uYmV0YSksIGsycC55LCBrMnAueik7XG4gICAgICAgICAgICBwb2ludCA9IGsxcC5hZGQoazJwKTtcbiAgICAgICAgICAgIGZha2UgPSBmMXAuYWRkKGYycCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB7IHAsIGYgfSA9IHRoaXMud05BRihuLCBhZmZpbmVQb2ludCk7XG4gICAgICAgICAgICBwb2ludCA9IHA7XG4gICAgICAgICAgICBmYWtlID0gZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSmFjb2JpYW5Qb2ludC5ub3JtYWxpemVaKFtwb2ludCwgZmFrZV0pWzBdO1xuICAgIH1cbiAgICB0b0FmZmluZShpbnZaKSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaXMwID0gdGhpcy5lcXVhbHMoSmFjb2JpYW5Qb2ludC5aRVJPKTtcbiAgICAgICAgaWYgKGludlogPT0gbnVsbClcbiAgICAgICAgICAgIGludlogPSBpczAgPyBfOG4gOiBpbnZlcnQoeik7XG4gICAgICAgIGNvbnN0IGl6MSA9IGludlo7XG4gICAgICAgIGNvbnN0IGl6MiA9IG1vZChpejEgKiBpejEpO1xuICAgICAgICBjb25zdCBpejMgPSBtb2QoaXoyICogaXoxKTtcbiAgICAgICAgY29uc3QgYXggPSBtb2QoeCAqIGl6Mik7XG4gICAgICAgIGNvbnN0IGF5ID0gbW9kKHkgKiBpejMpO1xuICAgICAgICBjb25zdCB6eiA9IG1vZCh6ICogaXoxKTtcbiAgICAgICAgaWYgKGlzMClcbiAgICAgICAgICAgIHJldHVybiBQb2ludC5aRVJPO1xuICAgICAgICBpZiAoenogIT09IF8xbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52WiB3YXMgaW52YWxpZCcpO1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KGF4LCBheSk7XG4gICAgfVxufVxuSmFjb2JpYW5Qb2ludC5CQVNFID0gbmV3IEphY29iaWFuUG9pbnQoQ1VSVkUuR3gsIENVUlZFLkd5LCBfMW4pO1xuSmFjb2JpYW5Qb2ludC5aRVJPID0gbmV3IEphY29iaWFuUG9pbnQoXzBuLCBfMW4sIF8wbik7XG5mdW5jdGlvbiBjb25zdFRpbWVOZWdhdGUoY29uZGl0aW9uLCBpdGVtKSB7XG4gICAgY29uc3QgbmVnID0gaXRlbS5uZWdhdGUoKTtcbiAgICByZXR1cm4gY29uZGl0aW9uID8gbmVnIDogaXRlbTtcbn1cbmNvbnN0IHBvaW50UHJlY29tcHV0ZXMgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGNsYXNzIFBvaW50IHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuICAgIF9zZXRXaW5kb3dTaXplKHdpbmRvd1NpemUpIHtcbiAgICAgICAgdGhpcy5fV0lORE9XX1NJWkUgPSB3aW5kb3dTaXplO1xuICAgICAgICBwb2ludFByZWNvbXB1dGVzLmRlbGV0ZSh0aGlzKTtcbiAgICB9XG4gICAgaGFzRXZlblkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnkgJSBfMm4gPT09IF8wbjtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Db21wcmVzc2VkSGV4KGJ5dGVzKSB7XG4gICAgICAgIGNvbnN0IGlzU2hvcnQgPSBieXRlcy5sZW5ndGggPT09IDMyO1xuICAgICAgICBjb25zdCB4ID0gYnl0ZXNUb051bWJlcihpc1Nob3J0ID8gYnl0ZXMgOiBieXRlcy5zdWJhcnJheSgxKSk7XG4gICAgICAgIGlmICghaXNWYWxpZEZpZWxkRWxlbWVudCh4KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQgaXMgbm90IG9uIGN1cnZlJyk7XG4gICAgICAgIGNvbnN0IHkyID0gd2VpZXJzdHJhc3MoeCk7XG4gICAgICAgIGxldCB5ID0gc3FydE1vZCh5Mik7XG4gICAgICAgIGNvbnN0IGlzWU9kZCA9ICh5ICYgXzFuKSA9PT0gXzFuO1xuICAgICAgICBpZiAoaXNTaG9ydCkge1xuICAgICAgICAgICAgaWYgKGlzWU9kZClcbiAgICAgICAgICAgICAgICB5ID0gbW9kKC15KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGlzRmlyc3RCeXRlT2RkID0gKGJ5dGVzWzBdICYgMSkgPT09IDE7XG4gICAgICAgICAgICBpZiAoaXNGaXJzdEJ5dGVPZGQgIT09IGlzWU9kZClcbiAgICAgICAgICAgICAgICB5ID0gbW9kKC15KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICAgICAgcG9pbnQuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVVuY29tcHJlc3NlZEhleChieXRlcykge1xuICAgICAgICBjb25zdCB4ID0gYnl0ZXNUb051bWJlcihieXRlcy5zdWJhcnJheSgxLCBmaWVsZExlbiArIDEpKTtcbiAgICAgICAgY29uc3QgeSA9IGJ5dGVzVG9OdW1iZXIoYnl0ZXMuc3ViYXJyYXkoZmllbGRMZW4gKyAxLCBmaWVsZExlbiAqIDIgKyAxKSk7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KHgsIHkpO1xuICAgICAgICBwb2ludC5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSGV4KGhleCkge1xuICAgICAgICBjb25zdCBieXRlcyA9IGVuc3VyZUJ5dGVzKGhleCk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gYnl0ZXNbMF07XG4gICAgICAgIGlmIChsZW4gPT09IGZpZWxkTGVuKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUNvbXByZXNzZWRIZXgoYnl0ZXMpO1xuICAgICAgICBpZiAobGVuID09PSBjb21wcmVzc2VkTGVuICYmIChoZWFkZXIgPT09IDB4MDIgfHwgaGVhZGVyID09PSAweDAzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUNvbXByZXNzZWRIZXgoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW4gPT09IHVuY29tcHJlc3NlZExlbiAmJiBoZWFkZXIgPT09IDB4MDQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tVW5jb21wcmVzc2VkSGV4KGJ5dGVzKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQb2ludC5mcm9tSGV4OiByZWNlaXZlZCBpbnZhbGlkIHBvaW50LiBFeHBlY3RlZCAzMi0ke2NvbXByZXNzZWRMZW59IGNvbXByZXNzZWQgYnl0ZXMgb3IgJHt1bmNvbXByZXNzZWRMZW59IHVuY29tcHJlc3NlZCBieXRlcywgbm90ICR7bGVufWApO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVByaXZhdGVLZXkocHJpdmF0ZUtleSkge1xuICAgICAgICByZXR1cm4gUG9pbnQuQkFTRS5tdWx0aXBseShub3JtYWxpemVQcml2YXRlS2V5KHByaXZhdGVLZXkpKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21TaWduYXR1cmUobXNnSGFzaCwgc2lnbmF0dXJlLCByZWNvdmVyeSkge1xuICAgICAgICBjb25zdCB7IHIsIHMgfSA9IG5vcm1hbGl6ZVNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgICAgICBpZiAoIVswLCAxLCAyLCAzXS5pbmNsdWRlcyhyZWNvdmVyeSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWNvdmVyOiBpbnZhbGlkIHJlY292ZXJ5IGJpdCcpO1xuICAgICAgICBjb25zdCBoID0gdHJ1bmNhdGVIYXNoKGVuc3VyZUJ5dGVzKG1zZ0hhc2gpKTtcbiAgICAgICAgY29uc3QgeyBuIH0gPSBDVVJWRTtcbiAgICAgICAgY29uc3QgcmFkaiA9IHJlY292ZXJ5ID09PSAyIHx8IHJlY292ZXJ5ID09PSAzID8gciArIG4gOiByO1xuICAgICAgICBjb25zdCByaW52ID0gaW52ZXJ0KHJhZGosIG4pO1xuICAgICAgICBjb25zdCB1MSA9IG1vZCgtaCAqIHJpbnYsIG4pO1xuICAgICAgICBjb25zdCB1MiA9IG1vZChzICogcmludiwgbik7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHJlY292ZXJ5ICYgMSA/ICcwMycgOiAnMDInO1xuICAgICAgICBjb25zdCBSID0gUG9pbnQuZnJvbUhleChwcmVmaXggKyBudW1UbzMyYlN0cihyYWRqKSk7XG4gICAgICAgIGNvbnN0IFEgPSBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFIsIHUxLCB1Mik7XG4gICAgICAgIGlmICghUSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlY292ZXIgc2lnbmF0dXJlOiBwb2ludCBhdCBpbmZpbmlmeScpO1xuICAgICAgICBRLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgIHJldHVybiBRO1xuICAgIH1cbiAgICB0b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBoZXhUb0J5dGVzKHRoaXMudG9IZXgoaXNDb21wcmVzc2VkKSk7XG4gICAgfVxuICAgIHRvSGV4KGlzQ29tcHJlc3NlZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHggPSBudW1UbzMyYlN0cih0aGlzLngpO1xuICAgICAgICBpZiAoaXNDb21wcmVzc2VkKSB7XG4gICAgICAgICAgICBjb25zdCBwcmVmaXggPSB0aGlzLmhhc0V2ZW5ZKCkgPyAnMDInIDogJzAzJztcbiAgICAgICAgICAgIHJldHVybiBgJHtwcmVmaXh9JHt4fWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYDA0JHt4fSR7bnVtVG8zMmJTdHIodGhpcy55KX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSGV4WCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9IZXgodHJ1ZSkuc2xpY2UoMik7XG4gICAgfVxuICAgIHRvUmF3WCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9SYXdCeXRlcyh0cnVlKS5zbGljZSgxKTtcbiAgICB9XG4gICAgYXNzZXJ0VmFsaWRpdHkoKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9ICdQb2ludCBpcyBub3Qgb24gZWxsaXB0aWMgY3VydmUnO1xuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXM7XG4gICAgICAgIGlmICghaXNWYWxpZEZpZWxkRWxlbWVudCh4KSB8fCAhaXNWYWxpZEZpZWxkRWxlbWVudCh5KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICBjb25zdCBsZWZ0ID0gbW9kKHkgKiB5KTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSB3ZWllcnN0cmFzcyh4KTtcbiAgICAgICAgaWYgKG1vZChsZWZ0IC0gcmlnaHQpICE9PSBfMG4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IG90aGVyLnggJiYgdGhpcy55ID09PSBvdGhlci55O1xuICAgIH1cbiAgICBuZWdhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCBtb2QoLXRoaXMueSkpO1xuICAgIH1cbiAgICBkb3VibGUoKSB7XG4gICAgICAgIHJldHVybiBKYWNvYmlhblBvaW50LmZyb21BZmZpbmUodGhpcykuZG91YmxlKCkudG9BZmZpbmUoKTtcbiAgICB9XG4gICAgYWRkKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBKYWNvYmlhblBvaW50LmZyb21BZmZpbmUodGhpcykuYWRkKEphY29iaWFuUG9pbnQuZnJvbUFmZmluZShvdGhlcikpLnRvQWZmaW5lKCk7XG4gICAgfVxuICAgIHN1YnRyYWN0KG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChvdGhlci5uZWdhdGUoKSk7XG4gICAgfVxuICAgIG11bHRpcGx5KHNjYWxhcikge1xuICAgICAgICByZXR1cm4gSmFjb2JpYW5Qb2ludC5mcm9tQWZmaW5lKHRoaXMpLm11bHRpcGx5KHNjYWxhciwgdGhpcykudG9BZmZpbmUoKTtcbiAgICB9XG4gICAgbXVsdGlwbHlBbmRBZGRVbnNhZmUoUSwgYSwgYikge1xuICAgICAgICBjb25zdCBQID0gSmFjb2JpYW5Qb2ludC5mcm9tQWZmaW5lKHRoaXMpO1xuICAgICAgICBjb25zdCBhUCA9IGEgPT09IF8wbiB8fCBhID09PSBfMW4gfHwgdGhpcyAhPT0gUG9pbnQuQkFTRSA/IFAubXVsdGlwbHlVbnNhZmUoYSkgOiBQLm11bHRpcGx5KGEpO1xuICAgICAgICBjb25zdCBiUSA9IEphY29iaWFuUG9pbnQuZnJvbUFmZmluZShRKS5tdWx0aXBseVVuc2FmZShiKTtcbiAgICAgICAgY29uc3Qgc3VtID0gYVAuYWRkKGJRKTtcbiAgICAgICAgcmV0dXJuIHN1bS5lcXVhbHMoSmFjb2JpYW5Qb2ludC5aRVJPKSA/IHVuZGVmaW5lZCA6IHN1bS50b0FmZmluZSgpO1xuICAgIH1cbn1cblBvaW50LkJBU0UgPSBuZXcgUG9pbnQoQ1VSVkUuR3gsIENVUlZFLkd5KTtcblBvaW50LlpFUk8gPSBuZXcgUG9pbnQoXzBuLCBfMG4pO1xuZnVuY3Rpb24gc2xpY2VERVIocykge1xuICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQoc1swXSwgMTYpID49IDggPyAnMDAnICsgcyA6IHM7XG59XG5mdW5jdGlvbiBwYXJzZURFUkludChkYXRhKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDwgMiB8fCBkYXRhWzBdICE9PSAweDAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzaWduYXR1cmUgaW50ZWdlciB0YWc6ICR7Ynl0ZXNUb0hleChkYXRhKX1gKTtcbiAgICB9XG4gICAgY29uc3QgbGVuID0gZGF0YVsxXTtcbiAgICBjb25zdCByZXMgPSBkYXRhLnN1YmFycmF5KDIsIGxlbiArIDIpO1xuICAgIGlmICghbGVuIHx8IHJlcy5sZW5ndGggIT09IGxlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2lnbmF0dXJlIGludGVnZXI6IHdyb25nIGxlbmd0aGApO1xuICAgIH1cbiAgICBpZiAocmVzWzBdID09PSAweDAwICYmIHJlc1sxXSA8PSAweDdmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaWduYXR1cmUgaW50ZWdlcjogdHJhaWxpbmcgbGVuZ3RoJyk7XG4gICAgfVxuICAgIHJldHVybiB7IGRhdGE6IGJ5dGVzVG9OdW1iZXIocmVzKSwgbGVmdDogZGF0YS5zdWJhcnJheShsZW4gKyAyKSB9O1xufVxuZnVuY3Rpb24gcGFyc2VERVJTaWduYXR1cmUoZGF0YSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA8IDIgfHwgZGF0YVswXSAhPSAweDMwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzaWduYXR1cmUgdGFnOiAke2J5dGVzVG9IZXgoZGF0YSl9YCk7XG4gICAgfVxuICAgIGlmIChkYXRhWzFdICE9PSBkYXRhLmxlbmd0aCAtIDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZTogaW5jb3JyZWN0IGxlbmd0aCcpO1xuICAgIH1cbiAgICBjb25zdCB7IGRhdGE6IHIsIGxlZnQ6IHNCeXRlcyB9ID0gcGFyc2VERVJJbnQoZGF0YS5zdWJhcnJheSgyKSk7XG4gICAgY29uc3QgeyBkYXRhOiBzLCBsZWZ0OiByQnl0ZXNMZWZ0IH0gPSBwYXJzZURFUkludChzQnl0ZXMpO1xuICAgIGlmIChyQnl0ZXNMZWZ0Lmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2lnbmF0dXJlOiBsZWZ0IGJ5dGVzIGFmdGVyIHBhcnNpbmc6ICR7Ynl0ZXNUb0hleChyQnl0ZXNMZWZ0KX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgciwgcyB9O1xufVxuZXhwb3J0IGNsYXNzIFNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3Iociwgcykge1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLnMgPSBzO1xuICAgICAgICB0aGlzLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQ29tcGFjdChoZXgpIHtcbiAgICAgICAgY29uc3QgYXJyID0gaGV4IGluc3RhbmNlb2YgVWludDhBcnJheTtcbiAgICAgICAgY29uc3QgbmFtZSA9ICdTaWduYXR1cmUuZnJvbUNvbXBhY3QnO1xuICAgICAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycgJiYgIWFycilcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7bmFtZX06IEV4cGVjdGVkIHN0cmluZyBvciBVaW50OEFycmF5YCk7XG4gICAgICAgIGNvbnN0IHN0ciA9IGFyciA/IGJ5dGVzVG9IZXgoaGV4KSA6IGhleDtcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggIT09IDEyOClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtuYW1lfTogRXhwZWN0ZWQgNjQtYnl0ZSBoZXhgKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaWduYXR1cmUoaGV4VG9OdW1iZXIoc3RyLnNsaWNlKDAsIDY0KSksIGhleFRvTnVtYmVyKHN0ci5zbGljZSg2NCwgMTI4KSkpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbURFUihoZXgpIHtcbiAgICAgICAgY29uc3QgYXJyID0gaGV4IGluc3RhbmNlb2YgVWludDhBcnJheTtcbiAgICAgICAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnICYmICFhcnIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBTaWduYXR1cmUuZnJvbURFUjogRXhwZWN0ZWQgc3RyaW5nIG9yIFVpbnQ4QXJyYXlgKTtcbiAgICAgICAgY29uc3QgeyByLCBzIH0gPSBwYXJzZURFUlNpZ25hdHVyZShhcnIgPyBoZXggOiBoZXhUb0J5dGVzKGhleCkpO1xuICAgICAgICByZXR1cm4gbmV3IFNpZ25hdHVyZShyLCBzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21IZXgoaGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21ERVIoaGV4KTtcbiAgICB9XG4gICAgYXNzZXJ0VmFsaWRpdHkoKSB7XG4gICAgICAgIGNvbnN0IHsgciwgcyB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFpc1dpdGhpbkN1cnZlT3JkZXIocikpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgU2lnbmF0dXJlOiByIG11c3QgYmUgMCA8IHIgPCBuJyk7XG4gICAgICAgIGlmICghaXNXaXRoaW5DdXJ2ZU9yZGVyKHMpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFNpZ25hdHVyZTogcyBtdXN0IGJlIDAgPCBzIDwgbicpO1xuICAgIH1cbiAgICBoYXNIaWdoUygpIHtcbiAgICAgICAgY29uc3QgSEFMRiA9IENVUlZFLm4gPj4gXzFuO1xuICAgICAgICByZXR1cm4gdGhpcy5zID4gSEFMRjtcbiAgICB9XG4gICAgbm9ybWFsaXplUygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzSGlnaFMoKSA/IG5ldyBTaWduYXR1cmUodGhpcy5yLCBtb2QoLXRoaXMucywgQ1VSVkUubikpIDogdGhpcztcbiAgICB9XG4gICAgdG9ERVJSYXdCeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIGhleFRvQnl0ZXModGhpcy50b0RFUkhleCgpKTtcbiAgICB9XG4gICAgdG9ERVJIZXgoKSB7XG4gICAgICAgIGNvbnN0IHNIZXggPSBzbGljZURFUihudW1iZXJUb0hleFVucGFkZGVkKHRoaXMucykpO1xuICAgICAgICBjb25zdCBySGV4ID0gc2xpY2VERVIobnVtYmVyVG9IZXhVbnBhZGRlZCh0aGlzLnIpKTtcbiAgICAgICAgY29uc3Qgc0hleEwgPSBzSGV4Lmxlbmd0aCAvIDI7XG4gICAgICAgIGNvbnN0IHJIZXhMID0gckhleC5sZW5ndGggLyAyO1xuICAgICAgICBjb25zdCBzTGVuID0gbnVtYmVyVG9IZXhVbnBhZGRlZChzSGV4TCk7XG4gICAgICAgIGNvbnN0IHJMZW4gPSBudW1iZXJUb0hleFVucGFkZGVkKHJIZXhMKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gbnVtYmVyVG9IZXhVbnBhZGRlZChySGV4TCArIHNIZXhMICsgNCk7XG4gICAgICAgIHJldHVybiBgMzAke2xlbmd0aH0wMiR7ckxlbn0ke3JIZXh9MDIke3NMZW59JHtzSGV4fWA7XG4gICAgfVxuICAgIHRvUmF3Qnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvREVSUmF3Qnl0ZXMoKTtcbiAgICB9XG4gICAgdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvREVSSGV4KCk7XG4gICAgfVxuICAgIHRvQ29tcGFjdFJhd0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gaGV4VG9CeXRlcyh0aGlzLnRvQ29tcGFjdEhleCgpKTtcbiAgICB9XG4gICAgdG9Db21wYWN0SGV4KCkge1xuICAgICAgICByZXR1cm4gbnVtVG8zMmJTdHIodGhpcy5yKSArIG51bVRvMzJiU3RyKHRoaXMucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29uY2F0Qnl0ZXMoLi4uYXJyYXlzKSB7XG4gICAgaWYgKCFhcnJheXMuZXZlcnkoKGIpID0+IGIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGxpc3QgZXhwZWN0ZWQnKTtcbiAgICBpZiAoYXJyYXlzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgcmV0dXJuIGFycmF5c1swXTtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheXMucmVkdWNlKChhLCBhcnIpID0+IGEgKyBhcnIubGVuZ3RoLCAwKTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBwYWQgPSAwOyBpIDwgYXJyYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IGFycmF5c1tpXTtcbiAgICAgICAgcmVzdWx0LnNldChhcnIsIHBhZCk7XG4gICAgICAgIHBhZCArPSBhcnIubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgaGV4ZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAyNTYgfSwgKHYsIGkpID0+IGkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpO1xuZnVuY3Rpb24gYnl0ZXNUb0hleCh1aW50OGEpIHtcbiAgICBpZiAoISh1aW50OGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgbGV0IGhleCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdWludDhhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleCArPSBoZXhlc1t1aW50OGFbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gaGV4O1xufVxuY29uc3QgUE9XXzJfMjU2ID0gQmlnSW50KCcweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyk7XG5mdW5jdGlvbiBudW1UbzMyYlN0cihudW0pIHtcbiAgICBpZiAodHlwZW9mIG51bSAhPT0gJ2JpZ2ludCcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYmlnaW50Jyk7XG4gICAgaWYgKCEoXzBuIDw9IG51bSAmJiBudW0gPCBQT1dfMl8yNTYpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG51bWJlciAwIDw9IG4gPCAyXjI1NicpO1xuICAgIHJldHVybiBudW0udG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDY0LCAnMCcpO1xufVxuZnVuY3Rpb24gbnVtVG8zMmIobnVtKSB7XG4gICAgY29uc3QgYiA9IGhleFRvQnl0ZXMobnVtVG8zMmJTdHIobnVtKSk7XG4gICAgaWYgKGIubGVuZ3RoICE9PSAzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvcjogZXhwZWN0ZWQgMzIgYnl0ZXMnKTtcbiAgICByZXR1cm4gYjtcbn1cbmZ1bmN0aW9uIG51bWJlclRvSGV4VW5wYWRkZWQobnVtKSB7XG4gICAgY29uc3QgaGV4ID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gaGV4Lmxlbmd0aCAmIDEgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG5mdW5jdGlvbiBoZXhUb051bWJlcihoZXgpIHtcbiAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaGV4VG9OdW1iZXI6IGV4cGVjdGVkIHN0cmluZywgZ290ICcgKyB0eXBlb2YgaGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIEJpZ0ludChgMHgke2hleH1gKTtcbn1cbmZ1bmN0aW9uIGhleFRvQnl0ZXMoaGV4KSB7XG4gICAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2hleFRvQnl0ZXM6IGV4cGVjdGVkIHN0cmluZywgZ290ICcgKyB0eXBlb2YgaGV4KTtcbiAgICB9XG4gICAgaWYgKGhleC5sZW5ndGggJSAyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hleFRvQnl0ZXM6IHJlY2VpdmVkIGludmFsaWQgdW5wYWRkZWQgaGV4JyArIGhleC5sZW5ndGgpO1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaiA9IGkgKiAyO1xuICAgICAgICBjb25zdCBoZXhCeXRlID0gaGV4LnNsaWNlKGosIGogKyAyKTtcbiAgICAgICAgY29uc3QgYnl0ZSA9IE51bWJlci5wYXJzZUludChoZXhCeXRlLCAxNik7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oYnl0ZSkgfHwgYnl0ZSA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYnl0ZSBzZXF1ZW5jZScpO1xuICAgICAgICBhcnJheVtpXSA9IGJ5dGU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9OdW1iZXIoYnl0ZXMpIHtcbiAgICByZXR1cm4gaGV4VG9OdW1iZXIoYnl0ZXNUb0hleChieXRlcykpO1xufVxuZnVuY3Rpb24gZW5zdXJlQnl0ZXMoaGV4KSB7XG4gICAgcmV0dXJuIGhleCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBVaW50OEFycmF5LmZyb20oaGV4KSA6IGhleFRvQnl0ZXMoaGV4KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjYWxhcihudW0pIHtcbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicgJiYgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtKSAmJiBudW0gPiAwKVxuICAgICAgICByZXR1cm4gQmlnSW50KG51bSk7XG4gICAgaWYgKHR5cGVvZiBudW0gPT09ICdiaWdpbnQnICYmIGlzV2l0aGluQ3VydmVPcmRlcihudW0pKVxuICAgICAgICByZXR1cm4gbnVtO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHZhbGlkIHByaXZhdGUgc2NhbGFyOiAwIDwgc2NhbGFyIDwgY3VydmUubicpO1xufVxuZnVuY3Rpb24gbW9kKGEsIGIgPSBDVVJWRS5QKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYSAlIGI7XG4gICAgcmV0dXJuIHJlc3VsdCA+PSBfMG4gPyByZXN1bHQgOiBiICsgcmVzdWx0O1xufVxuZnVuY3Rpb24gcG93Mih4LCBwb3dlcikge1xuICAgIGNvbnN0IHsgUCB9ID0gQ1VSVkU7XG4gICAgbGV0IHJlcyA9IHg7XG4gICAgd2hpbGUgKHBvd2VyLS0gPiBfMG4pIHtcbiAgICAgICAgcmVzICo9IHJlcztcbiAgICAgICAgcmVzICU9IFA7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBzcXJ0TW9kKHgpIHtcbiAgICBjb25zdCB7IFAgfSA9IENVUlZFO1xuICAgIGNvbnN0IF82biA9IEJpZ0ludCg2KTtcbiAgICBjb25zdCBfMTFuID0gQmlnSW50KDExKTtcbiAgICBjb25zdCBfMjJuID0gQmlnSW50KDIyKTtcbiAgICBjb25zdCBfMjNuID0gQmlnSW50KDIzKTtcbiAgICBjb25zdCBfNDRuID0gQmlnSW50KDQ0KTtcbiAgICBjb25zdCBfODhuID0gQmlnSW50KDg4KTtcbiAgICBjb25zdCBiMiA9ICh4ICogeCAqIHgpICUgUDtcbiAgICBjb25zdCBiMyA9IChiMiAqIGIyICogeCkgJSBQO1xuICAgIGNvbnN0IGI2ID0gKHBvdzIoYjMsIF8zbikgKiBiMykgJSBQO1xuICAgIGNvbnN0IGI5ID0gKHBvdzIoYjYsIF8zbikgKiBiMykgJSBQO1xuICAgIGNvbnN0IGIxMSA9IChwb3cyKGI5LCBfMm4pICogYjIpICUgUDtcbiAgICBjb25zdCBiMjIgPSAocG93MihiMTEsIF8xMW4pICogYjExKSAlIFA7XG4gICAgY29uc3QgYjQ0ID0gKHBvdzIoYjIyLCBfMjJuKSAqIGIyMikgJSBQO1xuICAgIGNvbnN0IGI4OCA9IChwb3cyKGI0NCwgXzQ0bikgKiBiNDQpICUgUDtcbiAgICBjb25zdCBiMTc2ID0gKHBvdzIoYjg4LCBfODhuKSAqIGI4OCkgJSBQO1xuICAgIGNvbnN0IGIyMjAgPSAocG93MihiMTc2LCBfNDRuKSAqIGI0NCkgJSBQO1xuICAgIGNvbnN0IGIyMjMgPSAocG93MihiMjIwLCBfM24pICogYjMpICUgUDtcbiAgICBjb25zdCB0MSA9IChwb3cyKGIyMjMsIF8yM24pICogYjIyKSAlIFA7XG4gICAgY29uc3QgdDIgPSAocG93Mih0MSwgXzZuKSAqIGIyKSAlIFA7XG4gICAgY29uc3QgcnQgPSBwb3cyKHQyLCBfMm4pO1xuICAgIGNvbnN0IHhjID0gKHJ0ICogcnQpICUgUDtcbiAgICBpZiAoeGMgIT09IHgpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICByZXR1cm4gcnQ7XG59XG5mdW5jdGlvbiBpbnZlcnQobnVtYmVyLCBtb2R1bG8gPSBDVVJWRS5QKSB7XG4gICAgaWYgKG51bWJlciA9PT0gXzBuIHx8IG1vZHVsbyA8PSBfMG4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZlcnQ6IGV4cGVjdGVkIHBvc2l0aXZlIGludGVnZXJzLCBnb3Qgbj0ke251bWJlcn0gbW9kPSR7bW9kdWxvfWApO1xuICAgIH1cbiAgICBsZXQgYSA9IG1vZChudW1iZXIsIG1vZHVsbyk7XG4gICAgbGV0IGIgPSBtb2R1bG87XG4gICAgbGV0IHggPSBfMG4sIHkgPSBfMW4sIHUgPSBfMW4sIHYgPSBfMG47XG4gICAgd2hpbGUgKGEgIT09IF8wbikge1xuICAgICAgICBjb25zdCBxID0gYiAvIGE7XG4gICAgICAgIGNvbnN0IHIgPSBiICUgYTtcbiAgICAgICAgY29uc3QgbSA9IHggLSB1ICogcTtcbiAgICAgICAgY29uc3QgbiA9IHkgLSB2ICogcTtcbiAgICAgICAgYiA9IGEsIGEgPSByLCB4ID0gdSwgeSA9IHYsIHUgPSBtLCB2ID0gbjtcbiAgICB9XG4gICAgY29uc3QgZ2NkID0gYjtcbiAgICBpZiAoZ2NkICE9PSBfMW4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52ZXJ0OiBkb2VzIG5vdCBleGlzdCcpO1xuICAgIHJldHVybiBtb2QoeCwgbW9kdWxvKTtcbn1cbmZ1bmN0aW9uIGludmVydEJhdGNoKG51bXMsIHAgPSBDVVJWRS5QKSB7XG4gICAgY29uc3Qgc2NyYXRjaCA9IG5ldyBBcnJheShudW1zLmxlbmd0aCk7XG4gICAgY29uc3QgbGFzdE11bHRpcGxpZWQgPSBudW1zLnJlZHVjZSgoYWNjLCBudW0sIGkpID0+IHtcbiAgICAgICAgaWYgKG51bSA9PT0gXzBuKVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgc2NyYXRjaFtpXSA9IGFjYztcbiAgICAgICAgcmV0dXJuIG1vZChhY2MgKiBudW0sIHApO1xuICAgIH0sIF8xbik7XG4gICAgY29uc3QgaW52ZXJ0ZWQgPSBpbnZlcnQobGFzdE11bHRpcGxpZWQsIHApO1xuICAgIG51bXMucmVkdWNlUmlnaHQoKGFjYywgbnVtLCBpKSA9PiB7XG4gICAgICAgIGlmIChudW0gPT09IF8wbilcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIHNjcmF0Y2hbaV0gPSBtb2QoYWNjICogc2NyYXRjaFtpXSwgcCk7XG4gICAgICAgIHJldHVybiBtb2QoYWNjICogbnVtLCBwKTtcbiAgICB9LCBpbnZlcnRlZCk7XG4gICAgcmV0dXJuIHNjcmF0Y2g7XG59XG5mdW5jdGlvbiBiaXRzMmludF8yKGJ5dGVzKSB7XG4gICAgY29uc3QgZGVsdGEgPSBieXRlcy5sZW5ndGggKiA4IC0gZ3JvdXBMZW4gKiA4O1xuICAgIGNvbnN0IG51bSA9IGJ5dGVzVG9OdW1iZXIoYnl0ZXMpO1xuICAgIHJldHVybiBkZWx0YSA+IDAgPyBudW0gPj4gQmlnSW50KGRlbHRhKSA6IG51bTtcbn1cbmZ1bmN0aW9uIHRydW5jYXRlSGFzaChoYXNoLCB0cnVuY2F0ZU9ubHkgPSBmYWxzZSkge1xuICAgIGNvbnN0IGggPSBiaXRzMmludF8yKGhhc2gpO1xuICAgIGlmICh0cnVuY2F0ZU9ubHkpXG4gICAgICAgIHJldHVybiBoO1xuICAgIGNvbnN0IHsgbiB9ID0gQ1VSVkU7XG4gICAgcmV0dXJuIGggPj0gbiA/IGggLSBuIDogaDtcbn1cbmxldCBfc2hhMjU2U3luYztcbmxldCBfaG1hY1NoYTI1NlN5bmM7XG5jbGFzcyBIbWFjRHJiZyB7XG4gICAgY29uc3RydWN0b3IoaGFzaExlbiwgcUJ5dGVMZW4pIHtcbiAgICAgICAgdGhpcy5oYXNoTGVuID0gaGFzaExlbjtcbiAgICAgICAgdGhpcy5xQnl0ZUxlbiA9IHFCeXRlTGVuO1xuICAgICAgICBpZiAodHlwZW9mIGhhc2hMZW4gIT09ICdudW1iZXInIHx8IGhhc2hMZW4gPCAyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoYXNoTGVuIG11c3QgYmUgYSBudW1iZXInKTtcbiAgICAgICAgaWYgKHR5cGVvZiBxQnl0ZUxlbiAhPT0gJ251bWJlcicgfHwgcUJ5dGVMZW4gPCAyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdxQnl0ZUxlbiBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIHRoaXMudiA9IG5ldyBVaW50OEFycmF5KGhhc2hMZW4pLmZpbGwoMSk7XG4gICAgICAgIHRoaXMuayA9IG5ldyBVaW50OEFycmF5KGhhc2hMZW4pLmZpbGwoMCk7XG4gICAgICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgfVxuICAgIGhtYWMoLi4udmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB1dGlscy5obWFjU2hhMjU2KHRoaXMuaywgLi4udmFsdWVzKTtcbiAgICB9XG4gICAgaG1hY1N5bmMoLi4udmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBfaG1hY1NoYTI1NlN5bmModGhpcy5rLCAuLi52YWx1ZXMpO1xuICAgIH1cbiAgICBjaGVja1N5bmMoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgX2htYWNTaGEyNTZTeW5jICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFNoYUVycm9yKCdobWFjU2hhMjU2U3luYyBuZWVkcyB0byBiZSBzZXQnKTtcbiAgICB9XG4gICAgaW5jcigpIHtcbiAgICAgICAgaWYgKHRoaXMuY291bnRlciA+PSAxMDAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmllZCAxLDAwMCBrIHZhbHVlcyBmb3Igc2lnbigpLCBhbGwgd2VyZSBpbnZhbGlkJyk7XG4gICAgICAgIHRoaXMuY291bnRlciArPSAxO1xuICAgIH1cbiAgICBhc3luYyByZXNlZWQoc2VlZCA9IG5ldyBVaW50OEFycmF5KCkpIHtcbiAgICAgICAgdGhpcy5rID0gYXdhaXQgdGhpcy5obWFjKHRoaXMudiwgVWludDhBcnJheS5mcm9tKFsweDAwXSksIHNlZWQpO1xuICAgICAgICB0aGlzLnYgPSBhd2FpdCB0aGlzLmhtYWModGhpcy52KTtcbiAgICAgICAgaWYgKHNlZWQubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmsgPSBhd2FpdCB0aGlzLmhtYWModGhpcy52LCBVaW50OEFycmF5LmZyb20oWzB4MDFdKSwgc2VlZCk7XG4gICAgICAgIHRoaXMudiA9IGF3YWl0IHRoaXMuaG1hYyh0aGlzLnYpO1xuICAgIH1cbiAgICByZXNlZWRTeW5jKHNlZWQgPSBuZXcgVWludDhBcnJheSgpKSB7XG4gICAgICAgIHRoaXMuY2hlY2tTeW5jKCk7XG4gICAgICAgIHRoaXMuayA9IHRoaXMuaG1hY1N5bmModGhpcy52LCBVaW50OEFycmF5LmZyb20oWzB4MDBdKSwgc2VlZCk7XG4gICAgICAgIHRoaXMudiA9IHRoaXMuaG1hY1N5bmModGhpcy52KTtcbiAgICAgICAgaWYgKHNlZWQubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmsgPSB0aGlzLmhtYWNTeW5jKHRoaXMudiwgVWludDhBcnJheS5mcm9tKFsweDAxXSksIHNlZWQpO1xuICAgICAgICB0aGlzLnYgPSB0aGlzLmhtYWNTeW5jKHRoaXMudik7XG4gICAgfVxuICAgIGFzeW5jIGdlbmVyYXRlKCkge1xuICAgICAgICB0aGlzLmluY3IoKTtcbiAgICAgICAgbGV0IGxlbiA9IDA7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICB3aGlsZSAobGVuIDwgdGhpcy5xQnl0ZUxlbikge1xuICAgICAgICAgICAgdGhpcy52ID0gYXdhaXQgdGhpcy5obWFjKHRoaXMudik7XG4gICAgICAgICAgICBjb25zdCBzbCA9IHRoaXMudi5zbGljZSgpO1xuICAgICAgICAgICAgb3V0LnB1c2goc2wpO1xuICAgICAgICAgICAgbGVuICs9IHRoaXMudi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbmNhdEJ5dGVzKC4uLm91dCk7XG4gICAgfVxuICAgIGdlbmVyYXRlU3luYygpIHtcbiAgICAgICAgdGhpcy5jaGVja1N5bmMoKTtcbiAgICAgICAgdGhpcy5pbmNyKCk7XG4gICAgICAgIGxldCBsZW4gPSAwO1xuICAgICAgICBjb25zdCBvdXQgPSBbXTtcbiAgICAgICAgd2hpbGUgKGxlbiA8IHRoaXMucUJ5dGVMZW4pIHtcbiAgICAgICAgICAgIHRoaXMudiA9IHRoaXMuaG1hY1N5bmModGhpcy52KTtcbiAgICAgICAgICAgIGNvbnN0IHNsID0gdGhpcy52LnNsaWNlKCk7XG4gICAgICAgICAgICBvdXQucHVzaChzbCk7XG4gICAgICAgICAgICBsZW4gKz0gdGhpcy52Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0Qnl0ZXMoLi4ub3V0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1dpdGhpbkN1cnZlT3JkZXIobnVtKSB7XG4gICAgcmV0dXJuIF8wbiA8IG51bSAmJiBudW0gPCBDVVJWRS5uO1xufVxuZnVuY3Rpb24gaXNWYWxpZEZpZWxkRWxlbWVudChudW0pIHtcbiAgICByZXR1cm4gXzBuIDwgbnVtICYmIG51bSA8IENVUlZFLlA7XG59XG5mdW5jdGlvbiBrbWRUb1NpZyhrQnl0ZXMsIG0sIGQsIGxvd1MgPSB0cnVlKSB7XG4gICAgY29uc3QgeyBuIH0gPSBDVVJWRTtcbiAgICBjb25zdCBrID0gdHJ1bmNhdGVIYXNoKGtCeXRlcywgdHJ1ZSk7XG4gICAgaWYgKCFpc1dpdGhpbkN1cnZlT3JkZXIoaykpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBraW52ID0gaW52ZXJ0KGssIG4pO1xuICAgIGNvbnN0IHEgPSBQb2ludC5CQVNFLm11bHRpcGx5KGspO1xuICAgIGNvbnN0IHIgPSBtb2QocS54LCBuKTtcbiAgICBpZiAociA9PT0gXzBuKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgcyA9IG1vZChraW52ICogbW9kKG0gKyBkICogciwgbiksIG4pO1xuICAgIGlmIChzID09PSBfMG4pXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgc2lnID0gbmV3IFNpZ25hdHVyZShyLCBzKTtcbiAgICBsZXQgcmVjb3ZlcnkgPSAocS54ID09PSBzaWcuciA/IDAgOiAyKSB8IE51bWJlcihxLnkgJiBfMW4pO1xuICAgIGlmIChsb3dTICYmIHNpZy5oYXNIaWdoUygpKSB7XG4gICAgICAgIHNpZyA9IHNpZy5ub3JtYWxpemVTKCk7XG4gICAgICAgIHJlY292ZXJ5IF49IDE7XG4gICAgfVxuICAgIHJldHVybiB7IHNpZywgcmVjb3ZlcnkgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByaXZhdGVLZXkoa2V5KSB7XG4gICAgbGV0IG51bTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgbnVtID0ga2V5O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Yga2V5ID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNTYWZlSW50ZWdlcihrZXkpICYmIGtleSA+IDApIHtcbiAgICAgICAgbnVtID0gQmlnSW50KGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChrZXkubGVuZ3RoICE9PSAyICogZ3JvdXBMZW4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIDMyIGJ5dGVzIG9mIHByaXZhdGUga2V5Jyk7XG4gICAgICAgIG51bSA9IGhleFRvTnVtYmVyKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgaWYgKGtleS5sZW5ndGggIT09IGdyb3VwTGVuKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCAzMiBieXRlcyBvZiBwcml2YXRlIGtleScpO1xuICAgICAgICBudW0gPSBieXRlc1RvTnVtYmVyKGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB2YWxpZCBwcml2YXRlIGtleScpO1xuICAgIH1cbiAgICBpZiAoIWlzV2l0aGluQ3VydmVPcmRlcihudW0pKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHByaXZhdGUga2V5OiAwIDwga2V5IDwgbicpO1xuICAgIHJldHVybiBudW07XG59XG5mdW5jdGlvbiBub3JtYWxpemVQdWJsaWNLZXkocHVibGljS2V5KSB7XG4gICAgaWYgKHB1YmxpY0tleSBpbnN0YW5jZW9mIFBvaW50KSB7XG4gICAgICAgIHB1YmxpY0tleS5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICByZXR1cm4gcHVibGljS2V5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFBvaW50LmZyb21IZXgocHVibGljS2V5KTtcbiAgICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgaWYgKHNpZ25hdHVyZSBpbnN0YW5jZW9mIFNpZ25hdHVyZSkge1xuICAgICAgICBzaWduYXR1cmUuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFNpZ25hdHVyZS5mcm9tREVSKHNpZ25hdHVyZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gU2lnbmF0dXJlLmZyb21Db21wYWN0KHNpZ25hdHVyZSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFB1YmxpY0tleShwcml2YXRlS2V5LCBpc0NvbXByZXNzZWQgPSBmYWxzZSkge1xuICAgIHJldHVybiBQb2ludC5mcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KS50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVjb3ZlclB1YmxpY0tleShtc2dIYXNoLCBzaWduYXR1cmUsIHJlY292ZXJ5LCBpc0NvbXByZXNzZWQgPSBmYWxzZSkge1xuICAgIHJldHVybiBQb2ludC5mcm9tU2lnbmF0dXJlKG1zZ0hhc2gsIHNpZ25hdHVyZSwgcmVjb3ZlcnkpLnRvUmF3Qnl0ZXMoaXNDb21wcmVzc2VkKTtcbn1cbmZ1bmN0aW9uIGlzUHJvYlB1YihpdGVtKSB7XG4gICAgY29uc3QgYXJyID0gaXRlbSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk7XG4gICAgY29uc3Qgc3RyID0gdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnO1xuICAgIGNvbnN0IGxlbiA9IChhcnIgfHwgc3RyKSAmJiBpdGVtLmxlbmd0aDtcbiAgICBpZiAoYXJyKVxuICAgICAgICByZXR1cm4gbGVuID09PSBjb21wcmVzc2VkTGVuIHx8IGxlbiA9PT0gdW5jb21wcmVzc2VkTGVuO1xuICAgIGlmIChzdHIpXG4gICAgICAgIHJldHVybiBsZW4gPT09IGNvbXByZXNzZWRMZW4gKiAyIHx8IGxlbiA9PT0gdW5jb21wcmVzc2VkTGVuICogMjtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFBvaW50KVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHByaXZhdGVBLCBwdWJsaWNCLCBpc0NvbXByZXNzZWQgPSBmYWxzZSkge1xuICAgIGlmIChpc1Byb2JQdWIocHJpdmF0ZUEpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXRTaGFyZWRTZWNyZXQ6IGZpcnN0IGFyZyBtdXN0IGJlIHByaXZhdGUga2V5Jyk7XG4gICAgaWYgKCFpc1Byb2JQdWIocHVibGljQikpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldFNoYXJlZFNlY3JldDogc2Vjb25kIGFyZyBtdXN0IGJlIHB1YmxpYyBrZXknKTtcbiAgICBjb25zdCBiID0gbm9ybWFsaXplUHVibGljS2V5KHB1YmxpY0IpO1xuICAgIGIuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4gYi5tdWx0aXBseShub3JtYWxpemVQcml2YXRlS2V5KHByaXZhdGVBKSkudG9SYXdCeXRlcyhpc0NvbXByZXNzZWQpO1xufVxuZnVuY3Rpb24gYml0czJpbnQoYnl0ZXMpIHtcbiAgICBjb25zdCBzbGljZSA9IGJ5dGVzLmxlbmd0aCA+IGZpZWxkTGVuID8gYnl0ZXMuc2xpY2UoMCwgZmllbGRMZW4pIDogYnl0ZXM7XG4gICAgcmV0dXJuIGJ5dGVzVG9OdW1iZXIoc2xpY2UpO1xufVxuZnVuY3Rpb24gYml0czJvY3RldHMoYnl0ZXMpIHtcbiAgICBjb25zdCB6MSA9IGJpdHMyaW50KGJ5dGVzKTtcbiAgICBjb25zdCB6MiA9IG1vZCh6MSwgQ1VSVkUubik7XG4gICAgcmV0dXJuIGludDJvY3RldHMoejIgPCBfMG4gPyB6MSA6IHoyKTtcbn1cbmZ1bmN0aW9uIGludDJvY3RldHMobnVtKSB7XG4gICAgcmV0dXJuIG51bVRvMzJiKG51bSk7XG59XG5mdW5jdGlvbiBpbml0U2lnQXJncyhtc2dIYXNoLCBwcml2YXRlS2V5LCBleHRyYUVudHJvcHkpIHtcbiAgICBpZiAobXNnSGFzaCA9PSBudWxsKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHNpZ246IGV4cGVjdGVkIHZhbGlkIG1lc3NhZ2UgaGFzaCwgbm90IFwiJHttc2dIYXNofVwiYCk7XG4gICAgY29uc3QgaDEgPSBlbnN1cmVCeXRlcyhtc2dIYXNoKTtcbiAgICBjb25zdCBkID0gbm9ybWFsaXplUHJpdmF0ZUtleShwcml2YXRlS2V5KTtcbiAgICBjb25zdCBzZWVkQXJncyA9IFtpbnQyb2N0ZXRzKGQpLCBiaXRzMm9jdGV0cyhoMSldO1xuICAgIGlmIChleHRyYUVudHJvcHkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoZXh0cmFFbnRyb3B5ID09PSB0cnVlKVxuICAgICAgICAgICAgZXh0cmFFbnRyb3B5ID0gdXRpbHMucmFuZG9tQnl0ZXMoZmllbGRMZW4pO1xuICAgICAgICBjb25zdCBlID0gZW5zdXJlQnl0ZXMoZXh0cmFFbnRyb3B5KTtcbiAgICAgICAgaWYgKGUubGVuZ3RoICE9PSBmaWVsZExlbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc2lnbjogRXhwZWN0ZWQgJHtmaWVsZExlbn0gYnl0ZXMgb2YgZXh0cmEgZGF0YWApO1xuICAgICAgICBzZWVkQXJncy5wdXNoKGUpO1xuICAgIH1cbiAgICBjb25zdCBzZWVkID0gY29uY2F0Qnl0ZXMoLi4uc2VlZEFyZ3MpO1xuICAgIGNvbnN0IG0gPSBiaXRzMmludChoMSk7XG4gICAgcmV0dXJuIHsgc2VlZCwgbSwgZCB9O1xufVxuZnVuY3Rpb24gZmluYWxpemVTaWcocmVjU2lnLCBvcHRzKSB7XG4gICAgY29uc3QgeyBzaWcsIHJlY292ZXJ5IH0gPSByZWNTaWc7XG4gICAgY29uc3QgeyBkZXIsIHJlY292ZXJlZCB9ID0gT2JqZWN0LmFzc2lnbih7IGNhbm9uaWNhbDogdHJ1ZSwgZGVyOiB0cnVlIH0sIG9wdHMpO1xuICAgIGNvbnN0IGhhc2hlZCA9IGRlciA/IHNpZy50b0RFUlJhd0J5dGVzKCkgOiBzaWcudG9Db21wYWN0UmF3Qnl0ZXMoKTtcbiAgICByZXR1cm4gcmVjb3ZlcmVkID8gW2hhc2hlZCwgcmVjb3ZlcnldIDogaGFzaGVkO1xufVxuYXN5bmMgZnVuY3Rpb24gc2lnbihtc2dIYXNoLCBwcml2S2V5LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCB7IHNlZWQsIG0sIGQgfSA9IGluaXRTaWdBcmdzKG1zZ0hhc2gsIHByaXZLZXksIG9wdHMuZXh0cmFFbnRyb3B5KTtcbiAgICBjb25zdCBkcmJnID0gbmV3IEhtYWNEcmJnKGhhc2hMZW4sIGdyb3VwTGVuKTtcbiAgICBhd2FpdCBkcmJnLnJlc2VlZChzZWVkKTtcbiAgICBsZXQgc2lnO1xuICAgIHdoaWxlICghKHNpZyA9IGttZFRvU2lnKGF3YWl0IGRyYmcuZ2VuZXJhdGUoKSwgbSwgZCwgb3B0cy5jYW5vbmljYWwpKSlcbiAgICAgICAgYXdhaXQgZHJiZy5yZXNlZWQoKTtcbiAgICByZXR1cm4gZmluYWxpemVTaWcoc2lnLCBvcHRzKTtcbn1cbmZ1bmN0aW9uIHNpZ25TeW5jKG1zZ0hhc2gsIHByaXZLZXksIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHsgc2VlZCwgbSwgZCB9ID0gaW5pdFNpZ0FyZ3MobXNnSGFzaCwgcHJpdktleSwgb3B0cy5leHRyYUVudHJvcHkpO1xuICAgIGNvbnN0IGRyYmcgPSBuZXcgSG1hY0RyYmcoaGFzaExlbiwgZ3JvdXBMZW4pO1xuICAgIGRyYmcucmVzZWVkU3luYyhzZWVkKTtcbiAgICBsZXQgc2lnO1xuICAgIHdoaWxlICghKHNpZyA9IGttZFRvU2lnKGRyYmcuZ2VuZXJhdGVTeW5jKCksIG0sIGQsIG9wdHMuY2Fub25pY2FsKSkpXG4gICAgICAgIGRyYmcucmVzZWVkU3luYygpO1xuICAgIHJldHVybiBmaW5hbGl6ZVNpZyhzaWcsIG9wdHMpO1xufVxuZXhwb3J0IHsgc2lnbiwgc2lnblN5bmMgfTtcbmNvbnN0IHZvcHRzID0geyBzdHJpY3Q6IHRydWUgfTtcbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnkoc2lnbmF0dXJlLCBtc2dIYXNoLCBwdWJsaWNLZXksIG9wdHMgPSB2b3B0cykge1xuICAgIGxldCBzaWc7XG4gICAgdHJ5IHtcbiAgICAgICAgc2lnID0gbm9ybWFsaXplU2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gICAgICAgIG1zZ0hhc2ggPSBlbnN1cmVCeXRlcyhtc2dIYXNoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeyByLCBzIH0gPSBzaWc7XG4gICAgaWYgKG9wdHMuc3RyaWN0ICYmIHNpZy5oYXNIaWdoUygpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgaCA9IHRydW5jYXRlSGFzaChtc2dIYXNoKTtcbiAgICBsZXQgUDtcbiAgICB0cnkge1xuICAgICAgICBQID0gbm9ybWFsaXplUHVibGljS2V5KHB1YmxpY0tleSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgbiB9ID0gQ1VSVkU7XG4gICAgY29uc3Qgc2ludiA9IGludmVydChzLCBuKTtcbiAgICBjb25zdCB1MSA9IG1vZChoICogc2ludiwgbik7XG4gICAgY29uc3QgdTIgPSBtb2QociAqIHNpbnYsIG4pO1xuICAgIGNvbnN0IFIgPSBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFAsIHUxLCB1Mik7XG4gICAgaWYgKCFSKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgdiA9IG1vZChSLngsIG4pO1xuICAgIHJldHVybiB2ID09PSByO1xufVxuZnVuY3Rpb24gc2Nobm9yckNoYWxsZW5nZUZpbmFsaXplKGNoKSB7XG4gICAgcmV0dXJuIG1vZChieXRlc1RvTnVtYmVyKGNoKSwgQ1VSVkUubik7XG59XG5jbGFzcyBTY2hub3JyU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihyLCBzKSB7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMucyA9IHM7XG4gICAgICAgIHRoaXMuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21IZXgoaGV4KSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gZW5zdXJlQnl0ZXMoaGV4KTtcbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCAhPT0gNjQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBTY2hub3JyU2lnbmF0dXJlLmZyb21IZXg6IGV4cGVjdGVkIDY0IGJ5dGVzLCBub3QgJHtieXRlcy5sZW5ndGh9YCk7XG4gICAgICAgIGNvbnN0IHIgPSBieXRlc1RvTnVtYmVyKGJ5dGVzLnN1YmFycmF5KDAsIDMyKSk7XG4gICAgICAgIGNvbnN0IHMgPSBieXRlc1RvTnVtYmVyKGJ5dGVzLnN1YmFycmF5KDMyLCA2NCkpO1xuICAgICAgICByZXR1cm4gbmV3IFNjaG5vcnJTaWduYXR1cmUociwgcyk7XG4gICAgfVxuICAgIGFzc2VydFZhbGlkaXR5KCkge1xuICAgICAgICBjb25zdCB7IHIsIHMgfSA9IHRoaXM7XG4gICAgICAgIGlmICghaXNWYWxpZEZpZWxkRWxlbWVudChyKSB8fCAhaXNXaXRoaW5DdXJ2ZU9yZGVyKHMpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZScpO1xuICAgIH1cbiAgICB0b0hleCgpIHtcbiAgICAgICAgcmV0dXJuIG51bVRvMzJiU3RyKHRoaXMucikgKyBudW1UbzMyYlN0cih0aGlzLnMpO1xuICAgIH1cbiAgICB0b1Jhd0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gaGV4VG9CeXRlcyh0aGlzLnRvSGV4KCkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNjaG5vcnJHZXRQdWJsaWNLZXkocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBQb2ludC5mcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KS50b1Jhd1goKTtcbn1cbmNsYXNzIEludGVybmFsU2Nobm9yclNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgcHJpdmF0ZUtleSwgYXV4UmFuZCA9IHV0aWxzLnJhbmRvbUJ5dGVzKCkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHNpZ246IEV4cGVjdGVkIHZhbGlkIG1lc3NhZ2UsIG5vdCBcIiR7bWVzc2FnZX1cImApO1xuICAgICAgICB0aGlzLm0gPSBlbnN1cmVCeXRlcyhtZXNzYWdlKTtcbiAgICAgICAgY29uc3QgeyB4LCBzY2FsYXIgfSA9IHRoaXMuZ2V0U2NhbGFyKG5vcm1hbGl6ZVByaXZhdGVLZXkocHJpdmF0ZUtleSkpO1xuICAgICAgICB0aGlzLnB4ID0geDtcbiAgICAgICAgdGhpcy5kID0gc2NhbGFyO1xuICAgICAgICB0aGlzLnJhbmQgPSBlbnN1cmVCeXRlcyhhdXhSYW5kKTtcbiAgICAgICAgaWYgKHRoaXMucmFuZC5sZW5ndGggIT09IDMyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2lnbjogRXhwZWN0ZWQgMzIgYnl0ZXMgb2YgYXV4IHJhbmRvbW5lc3MnKTtcbiAgICB9XG4gICAgZ2V0U2NhbGFyKHByaXYpIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBQb2ludC5mcm9tUHJpdmF0ZUtleShwcml2KTtcbiAgICAgICAgY29uc3Qgc2NhbGFyID0gcG9pbnQuaGFzRXZlblkoKSA/IHByaXYgOiBDVVJWRS5uIC0gcHJpdjtcbiAgICAgICAgcmV0dXJuIHsgcG9pbnQsIHNjYWxhciwgeDogcG9pbnQudG9SYXdYKCkgfTtcbiAgICB9XG4gICAgaW5pdE5vbmNlKGQsIHQwaCkge1xuICAgICAgICByZXR1cm4gbnVtVG8zMmIoZCBeIGJ5dGVzVG9OdW1iZXIodDBoKSk7XG4gICAgfVxuICAgIGZpbmFsaXplTm9uY2UoazBoKSB7XG4gICAgICAgIGNvbnN0IGswID0gbW9kKGJ5dGVzVG9OdW1iZXIoazBoKSwgQ1VSVkUubik7XG4gICAgICAgIGlmIChrMCA9PT0gXzBuKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduOiBDcmVhdGlvbiBvZiBzaWduYXR1cmUgZmFpbGVkLiBrIGlzIHplcm8nKTtcbiAgICAgICAgY29uc3QgeyBwb2ludDogUiwgeDogcngsIHNjYWxhcjogayB9ID0gdGhpcy5nZXRTY2FsYXIoazApO1xuICAgICAgICByZXR1cm4geyBSLCByeCwgayB9O1xuICAgIH1cbiAgICBmaW5hbGl6ZVNpZyhSLCBrLCBlLCBkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2Nobm9yclNpZ25hdHVyZShSLngsIG1vZChrICsgZSAqIGQsIENVUlZFLm4pKS50b1Jhd0J5dGVzKCk7XG4gICAgfVxuICAgIGVycm9yKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NpZ246IEludmFsaWQgc2lnbmF0dXJlIHByb2R1Y2VkJyk7XG4gICAgfVxuICAgIGFzeW5jIGNhbGMoKSB7XG4gICAgICAgIGNvbnN0IHsgbSwgZCwgcHgsIHJhbmQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHRhZyA9IHV0aWxzLnRhZ2dlZEhhc2g7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmluaXROb25jZShkLCBhd2FpdCB0YWcoVEFHUy5hdXgsIHJhbmQpKTtcbiAgICAgICAgY29uc3QgeyBSLCByeCwgayB9ID0gdGhpcy5maW5hbGl6ZU5vbmNlKGF3YWl0IHRhZyhUQUdTLm5vbmNlLCB0LCBweCwgbSkpO1xuICAgICAgICBjb25zdCBlID0gc2Nobm9yckNoYWxsZW5nZUZpbmFsaXplKGF3YWl0IHRhZyhUQUdTLmNoYWxsZW5nZSwgcngsIHB4LCBtKSk7XG4gICAgICAgIGNvbnN0IHNpZyA9IHRoaXMuZmluYWxpemVTaWcoUiwgaywgZSwgZCk7XG4gICAgICAgIGlmICghKGF3YWl0IHNjaG5vcnJWZXJpZnkoc2lnLCBtLCBweCkpKVxuICAgICAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgICAgICByZXR1cm4gc2lnO1xuICAgIH1cbiAgICBjYWxjU3luYygpIHtcbiAgICAgICAgY29uc3QgeyBtLCBkLCBweCwgcmFuZCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdGFnID0gdXRpbHMudGFnZ2VkSGFzaFN5bmM7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmluaXROb25jZShkLCB0YWcoVEFHUy5hdXgsIHJhbmQpKTtcbiAgICAgICAgY29uc3QgeyBSLCByeCwgayB9ID0gdGhpcy5maW5hbGl6ZU5vbmNlKHRhZyhUQUdTLm5vbmNlLCB0LCBweCwgbSkpO1xuICAgICAgICBjb25zdCBlID0gc2Nobm9yckNoYWxsZW5nZUZpbmFsaXplKHRhZyhUQUdTLmNoYWxsZW5nZSwgcngsIHB4LCBtKSk7XG4gICAgICAgIGNvbnN0IHNpZyA9IHRoaXMuZmluYWxpemVTaWcoUiwgaywgZSwgZCk7XG4gICAgICAgIGlmICghc2Nobm9yclZlcmlmeVN5bmMoc2lnLCBtLCBweCkpXG4gICAgICAgICAgICB0aGlzLmVycm9yKCk7XG4gICAgICAgIHJldHVybiBzaWc7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gc2Nobm9yclNpZ24obXNnLCBwcml2S2V5LCBhdXhSYW5kKSB7XG4gICAgcmV0dXJuIG5ldyBJbnRlcm5hbFNjaG5vcnJTaWduYXR1cmUobXNnLCBwcml2S2V5LCBhdXhSYW5kKS5jYWxjKCk7XG59XG5mdW5jdGlvbiBzY2hub3JyU2lnblN5bmMobXNnLCBwcml2S2V5LCBhdXhSYW5kKSB7XG4gICAgcmV0dXJuIG5ldyBJbnRlcm5hbFNjaG5vcnJTaWduYXR1cmUobXNnLCBwcml2S2V5LCBhdXhSYW5kKS5jYWxjU3luYygpO1xufVxuZnVuY3Rpb24gaW5pdFNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpIHtcbiAgICBjb25zdCByYXcgPSBzaWduYXR1cmUgaW5zdGFuY2VvZiBTY2hub3JyU2lnbmF0dXJlO1xuICAgIGNvbnN0IHNpZyA9IHJhdyA/IHNpZ25hdHVyZSA6IFNjaG5vcnJTaWduYXR1cmUuZnJvbUhleChzaWduYXR1cmUpO1xuICAgIGlmIChyYXcpXG4gICAgICAgIHNpZy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnNpZyxcbiAgICAgICAgbTogZW5zdXJlQnl0ZXMobWVzc2FnZSksXG4gICAgICAgIFA6IG5vcm1hbGl6ZVB1YmxpY0tleShwdWJsaWNLZXkpLFxuICAgIH07XG59XG5mdW5jdGlvbiBmaW5hbGl6ZVNjaG5vcnJWZXJpZnkociwgUCwgcywgZSkge1xuICAgIGNvbnN0IFIgPSBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFAsIG5vcm1hbGl6ZVByaXZhdGVLZXkocyksIG1vZCgtZSwgQ1VSVkUubikpO1xuICAgIGlmICghUiB8fCAhUi5oYXNFdmVuWSgpIHx8IFIueCAhPT0gcilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuYXN5bmMgZnVuY3Rpb24gc2Nobm9yclZlcmlmeShzaWduYXR1cmUsIG1lc3NhZ2UsIHB1YmxpY0tleSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgciwgcywgbSwgUCB9ID0gaW5pdFNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpO1xuICAgICAgICBjb25zdCBlID0gc2Nobm9yckNoYWxsZW5nZUZpbmFsaXplKGF3YWl0IHV0aWxzLnRhZ2dlZEhhc2goVEFHUy5jaGFsbGVuZ2UsIG51bVRvMzJiKHIpLCBQLnRvUmF3WCgpLCBtKSk7XG4gICAgICAgIHJldHVybiBmaW5hbGl6ZVNjaG5vcnJWZXJpZnkociwgUCwgcywgZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gc2Nobm9yclZlcmlmeVN5bmMoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHIsIHMsIG0sIFAgfSA9IGluaXRTY2hub3JyVmVyaWZ5KHNpZ25hdHVyZSwgbWVzc2FnZSwgcHVibGljS2V5KTtcbiAgICAgICAgY29uc3QgZSA9IHNjaG5vcnJDaGFsbGVuZ2VGaW5hbGl6ZSh1dGlscy50YWdnZWRIYXNoU3luYyhUQUdTLmNoYWxsZW5nZSwgbnVtVG8zMmIociksIFAudG9SYXdYKCksIG0pKTtcbiAgICAgICAgcmV0dXJuIGZpbmFsaXplU2Nobm9yclZlcmlmeShyLCBQLCBzLCBlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFNoYUVycm9yKVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3Qgc2Nobm9yciA9IHtcbiAgICBTaWduYXR1cmU6IFNjaG5vcnJTaWduYXR1cmUsXG4gICAgZ2V0UHVibGljS2V5OiBzY2hub3JyR2V0UHVibGljS2V5LFxuICAgIHNpZ246IHNjaG5vcnJTaWduLFxuICAgIHZlcmlmeTogc2Nobm9yclZlcmlmeSxcbiAgICBzaWduU3luYzogc2Nobm9yclNpZ25TeW5jLFxuICAgIHZlcmlmeVN5bmM6IHNjaG5vcnJWZXJpZnlTeW5jLFxufTtcblBvaW50LkJBU0UuX3NldFdpbmRvd1NpemUoOCk7XG5jb25zdCBjcnlwdG8gPSB7XG4gICAgbm9kZTogbm9kZUNyeXB0byxcbiAgICB3ZWI6IHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiAnY3J5cHRvJyBpbiBzZWxmID8gc2VsZi5jcnlwdG8gOiB1bmRlZmluZWQsXG59O1xuY29uc3QgVEFHUyA9IHtcbiAgICBjaGFsbGVuZ2U6ICdCSVAwMzQwL2NoYWxsZW5nZScsXG4gICAgYXV4OiAnQklQMDM0MC9hdXgnLFxuICAgIG5vbmNlOiAnQklQMDM0MC9ub25jZScsXG59O1xuY29uc3QgVEFHR0VEX0hBU0hfUFJFRklYRVMgPSB7fTtcbmV4cG9ydCBjb25zdCB1dGlscyA9IHtcbiAgICBieXRlc1RvSGV4LFxuICAgIGhleFRvQnl0ZXMsXG4gICAgY29uY2F0Qnl0ZXMsXG4gICAgbW9kLFxuICAgIGludmVydCxcbiAgICBpc1ZhbGlkUHJpdmF0ZUtleShwcml2YXRlS2V5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBub3JtYWxpemVQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9iaWdpbnRUbzMyQnl0ZXM6IG51bVRvMzJiLFxuICAgIF9ub3JtYWxpemVQcml2YXRlS2V5OiBub3JtYWxpemVQcml2YXRlS2V5LFxuICAgIGhhc2hUb1ByaXZhdGVLZXk6IChoYXNoKSA9PiB7XG4gICAgICAgIGhhc2ggPSBlbnN1cmVCeXRlcyhoYXNoKTtcbiAgICAgICAgY29uc3QgbWluTGVuID0gZ3JvdXBMZW4gKyA4O1xuICAgICAgICBpZiAoaGFzaC5sZW5ndGggPCBtaW5MZW4gfHwgaGFzaC5sZW5ndGggPiAxMDI0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHZhbGlkIGJ5dGVzIG9mIHByaXZhdGUga2V5IGFzIHBlciBGSVBTIDE4NmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG51bSA9IG1vZChieXRlc1RvTnVtYmVyKGhhc2gpLCBDVVJWRS5uIC0gXzFuKSArIF8xbjtcbiAgICAgICAgcmV0dXJuIG51bVRvMzJiKG51bSk7XG4gICAgfSxcbiAgICByYW5kb21CeXRlczogKGJ5dGVzTGVuZ3RoID0gMzIpID0+IHtcbiAgICAgICAgaWYgKGNyeXB0by53ZWIpIHtcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG8ud2ViLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShieXRlc0xlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNyeXB0by5ub2RlKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJhbmRvbUJ5dGVzIH0gPSBjcnlwdG8ubm9kZTtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20ocmFuZG9tQnl0ZXMoYnl0ZXNMZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgcmFuZG9tQnl0ZXMgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJhbmRvbVByaXZhdGVLZXk6ICgpID0+IHV0aWxzLmhhc2hUb1ByaXZhdGVLZXkodXRpbHMucmFuZG9tQnl0ZXMoZ3JvdXBMZW4gKyA4KSksXG4gICAgcHJlY29tcHV0ZSh3aW5kb3dTaXplID0gOCwgcG9pbnQgPSBQb2ludC5CQVNFKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IHBvaW50ID09PSBQb2ludC5CQVNFID8gcG9pbnQgOiBuZXcgUG9pbnQocG9pbnQueCwgcG9pbnQueSk7XG4gICAgICAgIGNhY2hlZC5fc2V0V2luZG93U2l6ZSh3aW5kb3dTaXplKTtcbiAgICAgICAgY2FjaGVkLm11bHRpcGx5KF8zbik7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfSxcbiAgICBzaGEyNTY6IGFzeW5jICguLi5tZXNzYWdlcykgPT4ge1xuICAgICAgICBpZiAoY3J5cHRvLndlYikge1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgY3J5cHRvLndlYi5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgY29uY2F0Qnl0ZXMoLi4ubWVzc2FnZXMpKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNyeXB0by5ub2RlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGNyZWF0ZUhhc2ggfSA9IGNyeXB0by5ub2RlO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTI1NicpO1xuICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaCgobSkgPT4gaGFzaC51cGRhdGUobSkpO1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShoYXNoLmRpZ2VzdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgc2hhMjU2IGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBobWFjU2hhMjU2OiBhc3luYyAoa2V5LCAuLi5tZXNzYWdlcykgPT4ge1xuICAgICAgICBpZiAoY3J5cHRvLndlYikge1xuICAgICAgICAgICAgY29uc3QgY2tleSA9IGF3YWl0IGNyeXB0by53ZWIuc3VidGxlLmltcG9ydEtleSgncmF3Jywga2V5LCB7IG5hbWU6ICdITUFDJywgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSB9LCBmYWxzZSwgWydzaWduJ10pO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNvbmNhdEJ5dGVzKC4uLm1lc3NhZ2VzKTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNyeXB0by53ZWIuc3VidGxlLnNpZ24oJ0hNQUMnLCBja2V5LCBtZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNyeXB0by5ub2RlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGNyZWF0ZUhtYWMgfSA9IGNyeXB0by5ub2RlO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGNyZWF0ZUhtYWMoJ3NoYTI1NicsIGtleSk7XG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKChtKSA9PiBoYXNoLnVwZGF0ZShtKSk7XG4gICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGhhc2guZGlnZXN0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGVudmlyb25tZW50IGRvZXNuJ3QgaGF2ZSBobWFjLXNoYTI1NiBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2hhMjU2U3luYzogdW5kZWZpbmVkLFxuICAgIGhtYWNTaGEyNTZTeW5jOiB1bmRlZmluZWQsXG4gICAgdGFnZ2VkSGFzaDogYXN5bmMgKHRhZywgLi4ubWVzc2FnZXMpID0+IHtcbiAgICAgICAgbGV0IHRhZ1AgPSBUQUdHRURfSEFTSF9QUkVGSVhFU1t0YWddO1xuICAgICAgICBpZiAodGFnUCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB0YWdIID0gYXdhaXQgdXRpbHMuc2hhMjU2KFVpbnQ4QXJyYXkuZnJvbSh0YWcsIChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbiAgICAgICAgICAgIHRhZ1AgPSBjb25jYXRCeXRlcyh0YWdILCB0YWdIKTtcbiAgICAgICAgICAgIFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ10gPSB0YWdQO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGlscy5zaGEyNTYodGFnUCwgLi4ubWVzc2FnZXMpO1xuICAgIH0sXG4gICAgdGFnZ2VkSGFzaFN5bmM6ICh0YWcsIC4uLm1lc3NhZ2VzKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgX3NoYTI1NlN5bmMgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgU2hhRXJyb3IoJ3NoYTI1NlN5bmMgaXMgdW5kZWZpbmVkLCB5b3UgbmVlZCB0byBzZXQgaXQnKTtcbiAgICAgICAgbGV0IHRhZ1AgPSBUQUdHRURfSEFTSF9QUkVGSVhFU1t0YWddO1xuICAgICAgICBpZiAodGFnUCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB0YWdIID0gX3NoYTI1NlN5bmMoVWludDhBcnJheS5mcm9tKHRhZywgKGMpID0+IGMuY2hhckNvZGVBdCgwKSkpO1xuICAgICAgICAgICAgdGFnUCA9IGNvbmNhdEJ5dGVzKHRhZ0gsIHRhZ0gpO1xuICAgICAgICAgICAgVEFHR0VEX0hBU0hfUFJFRklYRVNbdGFnXSA9IHRhZ1A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9zaGEyNTZTeW5jKHRhZ1AsIC4uLm1lc3NhZ2VzKTtcbiAgICB9LFxuICAgIF9KYWNvYmlhblBvaW50OiBKYWNvYmlhblBvaW50LFxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHV0aWxzLCB7XG4gICAgc2hhMjU2U3luYzoge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3NoYTI1NlN5bmM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICAgIGlmICghX3NoYTI1NlN5bmMpXG4gICAgICAgICAgICAgICAgX3NoYTI1NlN5bmMgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBobWFjU2hhMjU2U3luYzoge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2htYWNTaGEyNTZTeW5jO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgICBpZiAoIV9obWFjU2hhMjU2U3luYylcbiAgICAgICAgICAgICAgICBfaG1hY1NoYTI1NlN5bmMgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuIiwiaW1wb3J0e29wdGlvbnMgYXMgcn1mcm9tXCJwcmVhY3RcIjtleHBvcnR7RnJhZ21lbnR9ZnJvbVwicHJlYWN0XCI7dmFyIF89MDtmdW5jdGlvbiBvKG8sZSxuLHQsZixsKXt2YXIgcyx1LGE9e307Zm9yKHUgaW4gZSlcInJlZlwiPT11P3M9ZVt1XTphW3VdPWVbdV07dmFyIGk9e3R5cGU6byxwcm9wczphLGtleTpuLHJlZjpzLF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxfX2g6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Oi0tXyxfX3NvdXJjZTpmLF9fc2VsZjpsfTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBvJiYocz1vLmRlZmF1bHRQcm9wcykpZm9yKHUgaW4gcyl2b2lkIDA9PT1hW3VdJiYoYVt1XT1zW3VdKTtyZXR1cm4gci52bm9kZSYmci52bm9kZShpKSxpfWV4cG9ydHtvIGFzIGpzeCxvIGFzIGpzeERFVixvIGFzIGpzeHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anN4UnVudGltZS5tb2R1bGUuanMubWFwXG4iLCJmdW5jdGlvbiBLZXlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdrZXlJY29uJztcbiAgaWYgKGFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgbGV0IGFyciA9IGFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgYXJyLnB1c2goY2xhc3Nlcyk7XG4gICAgY2xhc3NlcyA9IGFyci5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIlxuICAgICAgd2lkdGg9XCIxcmVtXCJcbiAgICAgIGhlaWdodD1cIjFyZW1cIlxuICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIGQ9XCJNMTUuNzUgNS4yNWEzIDMgMCAwMTMgM20zIDBhNiA2IDAgMDEtNy4wMjkgNS45MTJjLS41NjMtLjA5Ny0xLjE1OS4wMjYtMS41NjMuNDNMMTAuNSAxNy4yNUg4LjI1djIuMjVINnYyLjI1SDIuMjV2LTIuODE4YzAtLjU5Ny4yMzctMS4xNy42NTktMS41OTFsNi40OTktNi40OTljLjQwNC0uNDA0LjUyNy0xIC40My0xLjU2M0E2IDYgMCAxMTIxLjc1IDguMjV6XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleUljb247XG4iLCJpbXBvcnR7b3B0aW9ucyBhcyBufWZyb21cInByZWFjdFwiO3ZhciB0LHIsdSxpLG89MCxmPVtdLGM9W10sZT1uLl9fYixhPW4uX19yLHY9bi5kaWZmZWQsbD1uLl9fYyxtPW4udW5tb3VudDtmdW5jdGlvbiBkKHQsdSl7bi5fX2gmJm4uX19oKHIsdCxvfHx1KSxvPTA7dmFyIGk9ci5fX0h8fChyLl9fSD17X186W10sX19oOltdfSk7cmV0dXJuIHQ+PWkuX18ubGVuZ3RoJiZpLl9fLnB1c2goe19fVjpjfSksaS5fX1t0XX1mdW5jdGlvbiBwKG4pe3JldHVybiBvPTEseShCLG4pfWZ1bmN0aW9uIHkobix1LGkpe3ZhciBvPWQodCsrLDIpO2lmKG8udD1uLCFvLl9fYyYmKG8uX189W2k/aSh1KTpCKHZvaWQgMCx1KSxmdW5jdGlvbihuKXt2YXIgdD1vLl9fTj9vLl9fTlswXTpvLl9fWzBdLHI9by50KHQsbik7dCE9PXImJihvLl9fTj1bcixvLl9fWzFdXSxvLl9fYy5zZXRTdGF0ZSh7fSkpfV0sby5fX2M9ciwhci51KSl7ci51PSEwO3ZhciBmPXIuc2hvdWxkQ29tcG9uZW50VXBkYXRlO3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4sdCxyKXtpZighby5fX2MuX19IKXJldHVybiEwO3ZhciB1PW8uX19jLl9fSC5fXy5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIG4uX19jfSk7aWYodS5ldmVyeShmdW5jdGlvbihuKXtyZXR1cm4hbi5fX059KSlyZXR1cm4hZnx8Zi5jYWxsKHRoaXMsbix0LHIpO3ZhciBpPSExO3JldHVybiB1LmZvckVhY2goZnVuY3Rpb24obil7aWYobi5fX04pe3ZhciB0PW4uX19bMF07bi5fXz1uLl9fTixuLl9fTj12b2lkIDAsdCE9PW4uX19bMF0mJihpPSEwKX19KSwhKCFpJiZvLl9fYy5wcm9wcz09PW4pJiYoIWZ8fGYuY2FsbCh0aGlzLG4sdCxyKSl9fXJldHVybiBvLl9fTnx8by5fX31mdW5jdGlvbiBoKHUsaSl7dmFyIG89ZCh0KyssMyk7IW4uX19zJiZ6KG8uX19ILGkpJiYoby5fXz11LG8uaT1pLHIuX19ILl9faC5wdXNoKG8pKX1mdW5jdGlvbiBzKHUsaSl7dmFyIG89ZCh0KyssNCk7IW4uX19zJiZ6KG8uX19ILGkpJiYoby5fXz11LG8uaT1pLHIuX19oLnB1c2gobykpfWZ1bmN0aW9uIF8obil7cmV0dXJuIG89NSxGKGZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bn19LFtdKX1mdW5jdGlvbiBBKG4sdCxyKXtvPTYscyhmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KG4odCgpKSxmdW5jdGlvbigpe3JldHVybiBuKG51bGwpfSk6bj8obi5jdXJyZW50PXQoKSxmdW5jdGlvbigpe3JldHVybiBuLmN1cnJlbnQ9bnVsbH0pOnZvaWQgMH0sbnVsbD09cj9yOnIuY29uY2F0KG4pKX1mdW5jdGlvbiBGKG4scil7dmFyIHU9ZCh0KyssNyk7cmV0dXJuIHoodS5fX0gscik/KHUuX19WPW4oKSx1Lmk9cix1Ll9faD1uLHUuX19WKTp1Ll9ffWZ1bmN0aW9uIFQobix0KXtyZXR1cm4gbz04LEYoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdCl9ZnVuY3Rpb24gcShuKXt2YXIgdT1yLmNvbnRleHRbbi5fX2NdLGk9ZCh0KyssOSk7cmV0dXJuIGkuYz1uLHU/KG51bGw9PWkuX18mJihpLl9fPSEwLHUuc3ViKHIpKSx1LnByb3BzLnZhbHVlKTpuLl9ffWZ1bmN0aW9uIHgodCxyKXtuLnVzZURlYnVnVmFsdWUmJm4udXNlRGVidWdWYWx1ZShyP3IodCk6dCl9ZnVuY3Rpb24gUChuKXt2YXIgdT1kKHQrKywxMCksaT1wKCk7cmV0dXJuIHUuX189bixyLmNvbXBvbmVudERpZENhdGNofHwoci5jb21wb25lbnREaWRDYXRjaD1mdW5jdGlvbihuLHQpe3UuX18mJnUuX18obix0KSxpWzFdKG4pfSksW2lbMF0sZnVuY3Rpb24oKXtpWzFdKHZvaWQgMCl9XX1mdW5jdGlvbiBWKCl7dmFyIG49ZCh0KyssMTEpO2lmKCFuLl9fKXtmb3IodmFyIHU9ci5fX3Y7bnVsbCE9PXUmJiF1Ll9fbSYmbnVsbCE9PXUuX187KXU9dS5fXzt2YXIgaT11Ll9fbXx8KHUuX19tPVswLDBdKTtuLl9fPVwiUFwiK2lbMF0rXCItXCIraVsxXSsrfXJldHVybiBuLl9ffWZ1bmN0aW9uIGIoKXtmb3IodmFyIHQ7dD1mLnNoaWZ0KCk7KWlmKHQuX19QJiZ0Ll9fSCl0cnl7dC5fX0guX19oLmZvckVhY2goayksdC5fX0guX19oLmZvckVhY2godyksdC5fX0guX19oPVtdfWNhdGNoKHIpe3QuX19ILl9faD1bXSxuLl9fZShyLHQuX192KX19bi5fX2I9ZnVuY3Rpb24obil7cj1udWxsLGUmJmUobil9LG4uX19yPWZ1bmN0aW9uKG4pe2EmJmEobiksdD0wO3ZhciBpPShyPW4uX19jKS5fX0g7aSYmKHU9PT1yPyhpLl9faD1bXSxyLl9faD1bXSxpLl9fLmZvckVhY2goZnVuY3Rpb24obil7bi5fX04mJihuLl9fPW4uX19OKSxuLl9fVj1jLG4uX19OPW4uaT12b2lkIDB9KSk6KGkuX19oLmZvckVhY2goayksaS5fX2guZm9yRWFjaCh3KSxpLl9faD1bXSkpLHU9cn0sbi5kaWZmZWQ9ZnVuY3Rpb24odCl7diYmdih0KTt2YXIgbz10Ll9fYztvJiZvLl9fSCYmKG8uX19ILl9faC5sZW5ndGgmJigxIT09Zi5wdXNoKG8pJiZpPT09bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fCgoaT1uLnJlcXVlc3RBbmltYXRpb25GcmFtZSl8fGopKGIpKSxvLl9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe24uaSYmKG4uX19IPW4uaSksbi5fX1YhPT1jJiYobi5fXz1uLl9fViksbi5pPXZvaWQgMCxuLl9fVj1jfSkpLHU9cj1udWxsfSxuLl9fYz1mdW5jdGlvbih0LHIpe3Iuc29tZShmdW5jdGlvbih0KXt0cnl7dC5fX2guZm9yRWFjaChrKSx0Ll9faD10Ll9faC5maWx0ZXIoZnVuY3Rpb24obil7cmV0dXJuIW4uX198fHcobil9KX1jYXRjaCh1KXtyLnNvbWUoZnVuY3Rpb24obil7bi5fX2gmJihuLl9faD1bXSl9KSxyPVtdLG4uX19lKHUsdC5fX3YpfX0pLGwmJmwodCxyKX0sbi51bm1vdW50PWZ1bmN0aW9uKHQpe20mJm0odCk7dmFyIHIsdT10Ll9fYzt1JiZ1Ll9fSCYmKHUuX19ILl9fLmZvckVhY2goZnVuY3Rpb24obil7dHJ5e2sobil9Y2F0Y2gobil7cj1ufX0pLHUuX19IPXZvaWQgMCxyJiZuLl9fZShyLHUuX192KSl9O3ZhciBnPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtmdW5jdGlvbiBqKG4pe3ZhciB0LHI9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSksZyYmY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKX0sdT1zZXRUaW1lb3V0KHIsMTAwKTtnJiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocikpfWZ1bmN0aW9uIGsobil7dmFyIHQ9cix1PW4uX19jO1wiZnVuY3Rpb25cIj09dHlwZW9mIHUmJihuLl9fYz12b2lkIDAsdSgpKSxyPXR9ZnVuY3Rpb24gdyhuKXt2YXIgdD1yO24uX19jPW4uX18oKSxyPXR9ZnVuY3Rpb24geihuLHQpe3JldHVybiFufHxuLmxlbmd0aCE9PXQubGVuZ3RofHx0LnNvbWUoZnVuY3Rpb24odCxyKXtyZXR1cm4gdCE9PW5bcl19KX1mdW5jdGlvbiBCKG4sdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90KG4pOnR9ZXhwb3J0e1QgYXMgdXNlQ2FsbGJhY2sscSBhcyB1c2VDb250ZXh0LHggYXMgdXNlRGVidWdWYWx1ZSxoIGFzIHVzZUVmZmVjdCxQIGFzIHVzZUVycm9yQm91bmRhcnksViBhcyB1c2VJZCxBIGFzIHVzZUltcGVyYXRpdmVIYW5kbGUscyBhcyB1c2VMYXlvdXRFZmZlY3QsRiBhcyB1c2VNZW1vLHkgYXMgdXNlUmVkdWNlcixfIGFzIHVzZVJlZixwIGFzIHVzZVN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhvb2tzLm1vZHVsZS5qcy5tYXBcbiIsImZ1bmN0aW9uIENvcHlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdjb3B5SWNvbic7XG4gIGlmIChhZGRpdGlvbmFsQ2xhc3Nlcykge1xuICAgIGxldCBhcnIgPSBhZGRpdGlvbmFsQ2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIGFyci5wdXNoKGNsYXNzZXMpO1xuICAgIGNsYXNzZXMgPSBhcnIuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCJcbiAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBjbGFzcz17Y2xhc3Nlc31cbiAgICA+XG4gICAgICA8cGF0aFxuICAgICAgICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICBkPVwiTTguMjUgNy41VjYuMTA4YzAtMS4xMzUuODQ1LTIuMDk4IDEuOTc2LTIuMTkyLjM3My0uMDMuNzQ4LS4wNTcgMS4xMjMtLjA4TTE1Ljc1IDE4SDE4YTIuMjUgMi4yNSAwIDAwMi4yNS0yLjI1VjYuMTA4YzAtMS4xMzUtLjg0NS0yLjA5OC0xLjk3Ni0yLjE5MmE0OC40MjQgNDguNDI0IDAgMDAtMS4xMjMtLjA4TTE1Ljc1IDE4Ljc1di0xLjg3NWEzLjM3NSAzLjM3NSAwIDAwLTMuMzc1LTMuMzc1aC0xLjVhMS4xMjUgMS4xMjUgMCAwMS0xLjEyNS0xLjEyNXYtMS41QTMuMzc1IDMuMzc1IDAgMDA2LjM3NSA3LjVINS4yNW0xMS45LTMuNjY0QTIuMjUxIDIuMjUxIDAgMDAxNSAyLjI1aC0xLjVhMi4yNTEgMi4yNTEgMCAwMC0yLjE1IDEuNTg2bTUuOCAwYy4wNjUuMjEuMS40MzMuMS42NjR2Ljc1aC02VjQuNWMwLS4yMzEuMDM1LS40NTQuMS0uNjY0TTYuNzUgNy41SDQuODc1Yy0uNjIxIDAtMS4xMjUuNTA0LTEuMTI1IDEuMTI1djEyYzAgLjYyMS41MDQgMS4xMjUgMS4xMjUgMS4xMjVoOS43NWMuNjIxIDAgMS4xMjUtLjUwNCAxLjEyNS0xLjEyNVYxNi41YTkgOSAwIDAwLTktOXpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29weUljb247XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3ByZWFjdC9ob29rcyc7XG5pbXBvcnQgQ29weUljb24gZnJvbSAnLi9pY29ucy9jb3B5SWNvbic7XG5cbmZ1bmN0aW9uIENvcHlUZXh0KHsgaWNvbkNsYXNzZXMsIGRpc3BsYXlUZXh0LCBjb3B5VGV4dCB9KSB7XG4gIGNvbnN0IFtidG5DbGFzc2VzLCBzZXRCdG5DbGFzc2VzXSA9IHVzZVN0YXRlKCdsaW5rQ29weUJ0bicpO1xuXG4gIGZ1bmN0aW9uIGNvcHlUb0NsaXBib2FyZCgpIHtcbiAgICB0cnkge1xuICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoY29weVRleHQpO1xuICAgICAgc2V0QnRuQ2xhc3NlcyhgJHtidG5DbGFzc2VzfSBncmVlbmApO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldEJ0bkNsYXNzZXMoYnRuQ2xhc3Nlcy5yZXBsYWNlKCdncmVlbicsICcnKS50cmltKCkpO1xuICAgICAgfSwgNTAwKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIEVycm9yKCdGYWlsZWQgdG8gY29weTogJywgZXJyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxidXR0b24gY2xhc3M9e2J0bkNsYXNzZXN9IG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZCgpfT5cbiAgICAgIDxDb3B5SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz17aWNvbkNsYXNzZXN9IC8+XG5cbiAgICAgIHtkaXNwbGF5VGV4dCAmJiA8c3BhbiBjbGFzcz1cImRpc3BsYXlUZXh0XCI+e2Rpc3BsYXlUZXh0fTwvc3Bhbj59XG4gICAgICA8c3BhbiBjbGFzcz1cImNvcHlUZXh0XCI+e2NvcHlUZXh0fTwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29weVRleHQ7XG4iLCJpbXBvcnQgeyBiZWNoMzIgfSBmcm9tICdiZWNoMzInO1xuXG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleCkge1xuICBsZXQgYnl0ZXMgPSBbXTtcbiAgZm9yIChsZXQgYyA9IDA7IGMgPCBoZXgubGVuZ3RoOyBjICs9IDIpXG4gICAgYnl0ZXMucHVzaChwYXJzZUludChoZXguc3Vic3RyKGMsIDIpLCAxNikpO1xuICByZXR1cm4gYnl0ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROb3RlSWQoaGV4SWQpIHtcbiAgY29uc3QgYmIgPSBoZXhUb0J5dGVzKGhleElkKTtcbiAgY29uc3Qgd29yZHMgPSBiZWNoMzIudG9Xb3JkcyhiYik7XG4gIHJldHVybiBiZWNoMzIuZW5jb2RlKCdub3RlJywgd29yZHMsIDEyMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROcHViKGhleFB1YmtleSkge1xuICBjb25zdCBiYiA9IGhleFRvQnl0ZXMoaGV4UHVia2V5KTtcbiAgY29uc3Qgd29yZHMgPSBiZWNoMzIudG9Xb3JkcyhiYik7XG4gIHJldHVybiBiZWNoMzIuZW5jb2RlKCducHViJywgd29yZHMsIDEyMCk7XG59XG4iLCJpbXBvcnQgS2V5SWNvbiBmcm9tICcuL2ljb25zL2tleUljb24nO1xuaW1wb3J0IENvcHlUZXh0IGZyb20gJy4vY29weVRleHQnO1xuaW1wb3J0IHsgZ2V0TnB1YiB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmZ1bmN0aW9uIFByb2ZpbGUoeyBwcm9maWxlUGtleSwgcHJvZmlsZSB9KSB7XG4gIGxldCBjYWNoZWRQcm9maWxlUGljdHVyZTtcbiAgbGV0IGVuY29kZWRQcm9maWxlUGtleTtcbiAgbGV0IHRydW5jYXRlZFByb2ZpbGVQa2V5O1xuXG4gIGlmIChwcm9maWxlUGtleSAmJiBwcm9maWxlKSB7XG4gICAgZW5jb2RlZFByb2ZpbGVQa2V5ID0gZ2V0TnB1Yihwcm9maWxlUGtleSk7XG4gICAgdHJ1bmNhdGVkUHJvZmlsZVBrZXkgPSBgJHtlbmNvZGVkUHJvZmlsZVBrZXkuc2xpY2UoXG4gICAgICAwLFxuICAgICAgMTBcbiAgICApfS4uLiR7ZW5jb2RlZFByb2ZpbGVQa2V5LnNsaWNlKC0xMCl9YDtcbiAgICBjYWNoZWRQcm9maWxlUGljdHVyZSA9IGBodHRwczovL21lZGlhLm5vc3RyLmJhbmQvdGh1bWJzLyR7cHJvZmlsZVBrZXkuc2xpY2UoXG4gICAgICAtNFxuICAgICl9LyR7cHJvZmlsZVBrZXl9LXBpY3R1cmUtNjRgO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFByb2ZpbGVcIj5cbiAgICAgIDxpbWdcbiAgICAgICAgY2xhc3M9XCJwcm9maWxlSW1nXCJcbiAgICAgICAgc3JjPXtcbiAgICAgICAgICBjYWNoZWRQcm9maWxlUGljdHVyZSB8fCAnaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzQ4P3RleHQ9TG9hZGluZydcbiAgICAgICAgfVxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlRGV0YWlsc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZU5hbWVcIj57cHJvZmlsZS5kaXNwbGF5X25hbWUgfHwgJ0xvYWRpbmcuLi4nfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZVBrZXlcIj5cbiAgICAgICAgICA8S2V5SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGtleVwiPnt0cnVuY2F0ZWRQcm9maWxlUGtleSB8fCAnbnB1Yi4uLid9PC9zcGFuPlxuICAgICAgICAgIDxDb3B5VGV4dCBpY29uQ2xhc3Nlcz1cInctNCBoLTRcIiBjb3B5VGV4dD17ZW5jb2RlZFByb2ZpbGVQa2V5fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9maWxlO1xuIiwiZnVuY3Rpb24gSGVhcnRJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdoZWFydEljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0yMSA4LjI1YzAtMi40ODUtMi4wOTktNC41LTQuNjg4LTQuNS0xLjkzNSAwLTMuNTk3IDEuMTI2LTQuMzEyIDIuNzMzLS43MTUtMS42MDctMi4zNzctMi43MzMtNC4zMTMtMi43MzNDNS4xIDMuNzUgMyA1Ljc2NSAzIDguMjVjMCA3LjIyIDkgMTIgOSAxMnM5LTQuNzggOS0xMnpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGVhcnRJY29uO1xuIiwiZnVuY3Rpb24gUmVwbHlJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdyZXBseUljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiXG4gICAgICB3aWR0aD1cIjEuMjVyZW1cIlxuICAgICAgaGVpZ2h0PVwiMS4yNXJlbVwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0yMC4yNSA4LjUxMWMuODg0LjI4NCAxLjUgMS4xMjggMS41IDIuMDk3djQuMjg2YzAgMS4xMzYtLjg0NyAyLjEtMS45OCAyLjE5My0uMzQuMDI3LS42OC4wNTItMS4wMi4wNzJ2My4wOTFsLTMtM2MtMS4zNTQgMC0yLjY5NC0uMDU1LTQuMDItLjE2M2EyLjExNSAyLjExNSAwIDAxLS44MjUtLjI0Mm05LjM0NS04LjMzNGEyLjEyNiAyLjEyNiAwIDAwLS40NzYtLjA5NSA0OC42NCA0OC42NCAwIDAwLTguMDQ4IDBjLTEuMTMxLjA5NC0xLjk3NiAxLjA1Ny0xLjk3NiAyLjE5MnY0LjI4NmMwIC44MzcuNDYgMS41OCAxLjE1NSAxLjk1MW05LjM0NS04LjMzNFY2LjYzN2MwLTEuNjIxLTEuMTUyLTMuMDI2LTIuNzYtMy4yMzVBNDguNDU1IDQ4LjQ1NSAwIDAwMTEuMjUgM2MtMi4xMTUgMC00LjE5OC4xMzctNi4yNC40MDItMS42MDguMjA5LTIuNzYgMS42MTQtMi43NiAzLjIzNXY2LjIyNmMwIDEuNjIxIDEuMTUyIDMuMDI2IDIuNzYgMy4yMzUuNTc3LjA3NSAxLjE1Ny4xNCAxLjc0LjE5NFYyMWw0LjE1NS00LjE1NVwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZXBseUljb247XG4iLCJmdW5jdGlvbiBSZXBvc3RJY29uKHsgYWRkaXRpb25hbENsYXNzZXMgfSkge1xuICBsZXQgY2xhc3NlcyA9ICdyZXBvc3RJY29uJztcbiAgaWYgKGFkZGl0aW9uYWxDbGFzc2VzKSB7XG4gICAgbGV0IGFyciA9IGFkZGl0aW9uYWxDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgYXJyLnB1c2goY2xhc3Nlcyk7XG4gICAgY2xhc3NlcyA9IGFyci5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIlxuICAgICAgd2lkdGg9XCIxLjI1cmVtXCJcbiAgICAgIGhlaWdodD1cIjEuMjVyZW1cIlxuICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgIGNsYXNzPXtjbGFzc2VzfVxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIlxuICAgICAgICBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgIGQ9XCJNMTYuMDIzIDkuMzQ4aDQuOTkydi0uMDAxTTIuOTg1IDE5LjY0NHYtNC45OTJtMCAwaDQuOTkybS00Ljk5MyAwbDMuMTgxIDMuMTgzYTguMjUgOC4yNSAwIDAwMTMuODAzLTMuN000LjAzMSA5Ljg2NWE4LjI1IDguMjUgMCAwMTEzLjgwMy0zLjdsMy4xODEgMy4xODJtMC00Ljk5MXY0Ljk5XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlcG9zdEljb247XG4iLCJmdW5jdGlvbiBMaW5rSWNvbih7IGFkZGl0aW9uYWxDbGFzc2VzIH0pIHtcbiAgbGV0IGNsYXNzZXMgPSAnbGlua0ljb24nO1xuICBpZiAoYWRkaXRpb25hbENsYXNzZXMpIHtcbiAgICBsZXQgYXJyID0gYWRkaXRpb25hbENsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICBhcnIucHVzaChjbGFzc2VzKTtcbiAgICBjbGFzc2VzID0gYXJyLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBmaWxsPVwibm9uZVwiXG4gICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiXG4gICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgd2lkdGg9XCIxLjI1cmVtXCJcbiAgICAgIGhlaWdodD1cIjEuMjVyZW1cIlxuICAgICAgY2xhc3M9e2NsYXNzZXN9XG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiXG4gICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgZD1cIk0xMy4xOSA4LjY4OGE0LjUgNC41IDAgMDExLjI0MiA3LjI0NGwtNC41IDQuNWE0LjUgNC41IDAgMDEtNi4zNjQtNi4zNjRsMS43NTctMS43NTdtMTMuMzUtLjYyMmwxLjc1Ny0xLjc1N2E0LjUgNC41IDAgMDAtNi4zNjQtNi4zNjRsLTQuNSA0LjVhNC41IDQuNSAwIDAwMS4yNDIgNy4yNDRcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cbmV4cG9ydCBkZWZhdWx0IExpbmtJY29uO1xuIiwiaW1wb3J0IEhlYXJ0SWNvbiBmcm9tICcuL2ljb25zL2hlYXJ0SWNvbic7XG5pbXBvcnQgUmVwbHlJY29uIGZyb20gJy4vaWNvbnMvcmVwbHlJY29uJztcbmltcG9ydCBSZXBvc3RJY29uIGZyb20gJy4vaWNvbnMvcmVwb3N0SWNvbic7XG5pbXBvcnQgTGlua0ljb24gZnJvbSAnLi9pY29ucy9saW5rSWNvbic7XG5pbXBvcnQgQ29weVRleHQgZnJvbSAnLi9jb3B5VGV4dCc7XG5pbXBvcnQgeyBnZXROb3RlSWQgfSBmcm9tICcuLi9jb21tb24nO1xuXG5mdW5jdGlvbiBNZXRhKHsgbm90ZSwgcmVwbGllc0NvdW50LCByZXBvc3RzQ291bnQsIGxpa2VzQ291bnQgfSkge1xuICBsZXQgZGF0ZTtcbiAgbGV0IGVuY29kZWROb3RlSWQ7XG4gIGxldCBmb3JtYXR0ZWREYXRlO1xuXG4gIGlmIChub3RlLmlkICYmIG5vdGUuY3JlYXRlZF9hdCkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShub3RlLmNyZWF0ZWRfYXQgKiAxMDAwKTtcbiAgICBmb3JtYXR0ZWREYXRlID0gZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoJ2VuLVVTJywge1xuICAgICAgaG91cjEyOiB0cnVlLFxuICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgIGRheTogJ251bWVyaWMnLFxuICAgIH0pO1xuICAgIGVuY29kZWROb3RlSWQgPSBnZXROb3RlSWQobm90ZS5pZCk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3M9XCJjYXJkTWV0YVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmREYXRlXCI+e2Zvcm1hdHRlZERhdGV9PC9kaXY+XG4gICAgICA8aHIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkSW50ZXJhY3Rpb25zXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnRlcmFjdGlvbkNvbnRhaW5lclwiPlxuICAgICAgICAgIDxSZXBseUljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcGxpZXNDb3VudFwiPntyZXBsaWVzQ291bnR9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImludGVyYWN0aW9uQ29udGFpbmVyXCI+XG4gICAgICAgICAgPFJlcG9zdEljb24gYWRkaXRpb25hbENsYXNzZXM9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcG9zdHNDb3VudFwiPntyZXBvc3RzQ291bnR9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImludGVyYWN0aW9uQ29udGFpbmVyXCI+XG4gICAgICAgICAgPEhlYXJ0SWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTVcIiAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGlrZXNDb3VudFwiPntsaWtlc0NvdW50fTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnRlcmFjdGlvbkNvbnRhaW5lclwiPlxuICAgICAgICAgIDxhIGhyZWY9e2BodHRwczovL25vc3RyLmJhbmQvJHtlbmNvZGVkTm90ZUlkfWB9IGNsYXNzPVwibGlua0xpbmtcIj5cbiAgICAgICAgICAgIDxMaW5rSWNvbiBhZGRpdGlvbmFsQ2xhc3Nlcz1cInctNSBoLTUgaG92ZXI6dGV4dC1ncmF5LTYwMFwiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpc3BsYXlUZXh0XCI+T3Blbjwvc3Bhbj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW50ZXJhY3Rpb25Db250YWluZXJcIj5cbiAgICAgICAgICA8Q29weVRleHRcbiAgICAgICAgICAgIGljb25DbGFzc2VzPVwidy01IGgtNVwiXG4gICAgICAgICAgICBkaXNwbGF5VGV4dD1cIkNvcHkgTm90ZSBJRFwiXG4gICAgICAgICAgICBjb3B5VGV4dD17ZW5jb2RlZE5vdGVJZH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBNZXRhO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCAqIGFzIHNlY3AgZnJvbSAnQG5vYmxlL3NlY3AyNTZrMSc7XG5pbXBvcnQgUHJvZmlsZSBmcm9tICcuL3Byb2ZpbGUnO1xuaW1wb3J0IE1ldGEgZnJvbSAnLi9tZXRhJztcblxuY2xhc3MgTm9zcnRFbWJlZCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBub3RlSWQ6IHByb3BzLm5vdGVJZCxcbiAgICAgIHJlbGF5OiBwcm9wcy5yZWxheSB8fCAnd3NzOi8vcmVsYXkubm9zdHIuYmFuZCcsXG4gICAgICBub3RlOiB7fSxcbiAgICAgIHByb2ZpbGU6IHt9LFxuICAgICAgcHJvZmlsZVBrZXk6ICcnLFxuICAgICAgbGlrZXNDb3VudDogMCxcbiAgICAgIHJlcG9zdHNDb3VudDogMCxcbiAgICAgIHJlcGxpZXNDb3VudDogMCxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHNoYTI1NihzdHJpbmcpIHtcbiAgICBjb25zdCB1dGY4ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cmluZyk7XG4gICAgcmV0dXJuIHNlY3AudXRpbHMuc2hhMjU2KHV0ZjgpLnRoZW4oKGhhc2hCdWZmZXIpID0+IHtcbiAgICAgIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpO1xuICAgICAgY29uc3QgaGFzaEhleCA9IGhhc2hBcnJheVxuICAgICAgICAubWFwKChieXRlcykgPT4gYnl0ZXMudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpXG4gICAgICAgIC5qb2luKCcnKTtcbiAgICAgIHJldHVybiBoYXNoSGV4O1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0Tm9zdHJFdmVudElEKG0pIHtcbiAgICBjb25zdCBhID0gWzAsIG0ucHVia2V5LCBtLmNyZWF0ZWRfYXQsIG0ua2luZCwgbS50YWdzLCBtLmNvbnRlbnRdO1xuICAgIGNvbnN0IHMgPSBKU09OLnN0cmluZ2lmeShhKTtcbiAgICBjb25zdCBoID0gYXdhaXQgdGhpcy5zaGEyNTYocyk7XG4gICAgcmV0dXJuIGg7XG4gIH1cblxuICBzdGF0aWMgdmVyaWZ5Tm9zdHJTaWduYXR1cmUoZXZlbnQpIHtcbiAgICByZXR1cm4gc2VjcC5zY2hub3JyLnZlcmlmeShldmVudC5zaWcsIGV2ZW50LmlkLCBldmVudC5wdWJrZXkpO1xuICB9XG5cbiAgYXN5bmMgdmFsaWRhdGVOb3N0ckV2ZW50KGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmlkICE9PSAoYXdhaXQgdGhpcy5nZXROb3N0ckV2ZW50SUQoZXZlbnQpKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgZXZlbnQuY29udGVudCAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGV2ZW50LmNyZWF0ZWRfYXQgIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZlbnQudGFncykpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50LnRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRhZyA9IGV2ZW50LnRhZ3NbaV07XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGFnKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0YWcubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YWdbal0gPT09ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBpc1ZhbGlkRXZlbnQoZXYpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZXYuaWQgJiZcbiAgICAgIGV2LnB1YmtleSAmJlxuICAgICAgZXYuc2lnICYmXG4gICAgICAoYXdhaXQgdGhpcy52YWxpZGF0ZU5vc3RyRXZlbnQoZXYpKSAmJlxuICAgICAgdGhpcy52ZXJpZnlOb3N0clNpZ25hdHVyZShldilcbiAgICApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3Qgc29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLnN0YXRlLnJlbGF5KTtcblxuICAgIHNvY2tldC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICB0aGlzLmZldGNoTm90ZSh7IHNvY2tldCB9KTtcbiAgICAgIGNvbnNvbGUubG9nKGBDb25uZWN0ZWQgdG8gTm9zdHIgcmVsYXk6ICR7c29ja2V0LnVybH1gKTtcbiAgICB9O1xuXG4gICAgc29ja2V0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICBFcnJvcihgRmFpbGVkIHRvIGNvbm5lY3QgdG8gTm9zdHIgcmVsYXk6ICR7c29ja2V0LnVybH1gKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VicyA9IHt9O1xuICAgIHNvY2tldC5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZCA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgaWYgKCFkIHx8ICFkLmxlbmd0aCkgdGhyb3cgRXJyb3IoJ0JhZCByZXBseSBmcm9tIHJlbGF5Jyk7XG5cbiAgICAgICAgaWYgKGRbMF0gPT09ICdOT1RJQ0UnICYmIGQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ05vdGljZSBmcm9tJywgc29ja2V0LnVybCwgZFsxXSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRbMF0gPT09ICdFT1NFJyAmJiBkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBpZiAoZFsxXSBpbiBzdWJzKSBzdWJzW2RbMV1dLm9uRXZlbnQobnVsbCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRbMF0gIT09ICdFVkVOVCcgfHwgZC5sZW5ndGggPCAzKVxuICAgICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHJlcGx5IGZyb20gcmVsYXknKTtcblxuICAgICAgICBpZiAoZFsxXSBpbiBzdWJzKSBzdWJzW2RbMV1dLm9uRXZlbnQoZFsyXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBFcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNvY2tldC5saXN0RXZlbnRzID0gKHsgc3ViLCBvaywgZXJyIH0pID0+IHtcbiAgICAgIGxldCBpZCA9IGBlbWJlZC0ke01hdGgucmFuZG9tKCl9YDtcbiAgICAgIGNvbnN0IHJlcSA9IFsnUkVRJywgaWQsIHN1Yl07XG4gICAgICBzb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeShyZXEpKTtcblxuICAgICAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN1YklkID0gaWQ7XG4gICAgICAgIGlkID0gbnVsbDtcbiAgICAgICAgc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoWydDTE9TRScsIHN1YklkXSkpO1xuICAgICAgICBkZWxldGUgc3Vic1tzdWJJZF07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBldmVudHMgPSBbXTtcbiAgICAgIGNvbnN0IHF1ZXVlID0gW107XG5cbiAgICAgIGNvbnN0IGRvbmUgPSAoKSA9PiB7XG4gICAgICAgIGlmICghaWQpIHJldHVybjtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRvKTtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgb2soZXZlbnRzKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRvID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIC8vIHRlbGwgcmVsYXkgd2UncmUgbm8gbG9uZ2VyIGludGVyZXN0ZWRcbiAgICAgICAgICBjbG9zZSgpO1xuXG4gICAgICAgICAgLy8gbWF5YmUgcmVsYXkgdy9vIEVPU0Ugc3VwcG9ydD9cbiAgICAgICAgICBpZiAoZXZlbnRzLmxlbmd0aCB8fCBxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9uRXZlbnQobnVsbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycigndGltZW91dCBvbiByZWxheScsIHNvY2tldC51cmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3ViLmxpbWl0ICYmIHN1Yi5saW1pdCA9PT0gMSA/IDIwMDAgOiA0MDAwXG4gICAgICApO1xuXG4gICAgICBjb25zdCBvbkV2ZW50ID0gYXN5bmMgKGUpID0+IHtcbiAgICAgICAgcXVldWUucHVzaChlKTtcbiAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZywgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBlID0gcXVldWVbMF07XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgICAgICBpZiAoZSAmJiAoYXdhaXQgdGhpcy5pc1ZhbGlkRXZlbnQoZSkpKSBldmVudHMucHVzaChlKTtcbiAgICAgICAgICBxdWV1ZS5zaGlmdCgpOyAvLyBkZXF1ZXVlIGFmdGVyIHdlJ3ZlIGF3YWl0ZWRcbiAgICAgICAgICBpZiAoIWUgfHwgKHN1Yi5saW1pdCAmJiBzdWIubGltaXQgPT09IGV2ZW50cy5sZW5ndGgpKSB7XG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UoMCwgcXVldWUubGVuZ3RoKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc3Vic1tpZF0gPSB7IG9rLCBlcnIsIG9uRXZlbnQgfTtcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGdldEV2ZW50KHsgc29ja2V0LCBzdWIgfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgICAgc3ViLmxpbWl0ID0gMTtcbiAgICAgIHNvY2tldC5saXN0RXZlbnRzKHtcbiAgICAgICAgc3ViLFxuICAgICAgICBvazogKGV2ZW50cykgPT4ge1xuICAgICAgICAgIG9rKGV2ZW50cyA/IGV2ZW50c1swXSA6IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBlcnIsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBsaXN0RXZlbnRzKHsgc29ja2V0LCBzdWIgfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgob2ssIGVycikgPT4ge1xuICAgICAgc29ja2V0Lmxpc3RFdmVudHMoeyBzdWIsIG9rLCBlcnIgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmZXRjaE5vdGUoeyBzb2NrZXQgfSkge1xuICAgIGNvbnN0IHN1YiA9IHsgaWRzOiBbdGhpcy5zdGF0ZS5ub3RlSWRdLCBraW5kczogWzFdIH07XG4gICAgdGhpcy5nZXRFdmVudCh7IHNvY2tldCwgc3ViIH0pXG4gICAgICAudGhlbigoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBub3RlOiBldmVudCxcbiAgICAgICAgICAgIHByb2ZpbGVQa2V5OiBldmVudC5wdWJrZXksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5mZXRjaFByb2ZpbGUoeyBzb2NrZXQsIHByb2ZpbGVQa2V5OiBldmVudC5wdWJrZXkgfSk7XG4gICAgICAgICAgdGhpcy5mZXRjaE1ldGEoeyBzb2NrZXQsIG5vdGVJZDogdGhpcy5zdGF0ZS5ub3RlSWQgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogV2UgY2FuJ3QgZmluZCB0aGF0IG5vdGUgb24gdGhpcyByZWxheVwiKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG5vdGU6IHtcbiAgICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6XG4gICAgICAgICAgICAgICAgXCJTb3JyeSwgd2Ugd2VyZW4ndCBhYmxlIHRvIGZpbmQgdGhpcyBub3RlIG9uIHRoZSBzcGVjaWZpZWQgcmVsYXkuXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBFcnJvcihgRXJyb3IgZmV0Y2hpbmcgbm90ZTogJHtlcnJvcn1gKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbm90ZToge1xuICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgICBcIlNvcnJ5LCB0aGVyZSB3YXMgYW4gZXJyb3IgZmV0Y2hpbmcgdGhpcyBub3RlIGZyb20gdGhlIHNwZWNpZmllZCByZWxheS4gTW9zdCBvZnRlbiwgdGhpcyBpcyBiZWNhdXNlIHRoZSByZWxheSBpc24ndCByZXNwb25kaW5nLlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBmZXRjaFByb2ZpbGUoeyBzb2NrZXQsIHByb2ZpbGVQa2V5IH0pIHtcbiAgICBjb25zdCBzdWIgPSB7IGtpbmRzOiBbMF0sIGF1dGhvcnM6IFtwcm9maWxlUGtleV0gfTtcbiAgICB0aGlzLmdldEV2ZW50KHsgc29ja2V0LCBzdWIgfSlcbiAgICAgIC50aGVuKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBjb25zdCBwYXJzZWRQcm9maWxlID0gSlNPTi5wYXJzZShldmVudC5jb250ZW50KTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcHJvZmlsZTogcGFyc2VkUHJvZmlsZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nIHByb2ZpbGU6ICR7ZXJyb3J9YCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZldGNoTWV0YSh7IHNvY2tldCwgbm90ZUlkIH0pIHtcbiAgICBjb25zdCBzdWIgPSB7IGtpbmRzOiBbMSwgNiwgN10sICcjZSc6IFtub3RlSWRdIH07XG4gICAgdGhpcy5saXN0RXZlbnRzKHsgc29ja2V0LCBzdWIgfSkudGhlbigoZXZlbnRzKSA9PiB7XG4gICAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtpbmQgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKChzdGF0ZSkgPT4gKHsgcmVwbGllc0NvdW50OiBzdGF0ZS5yZXBsaWVzQ291bnQgKyAxIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQua2luZCA9PT0gNikge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PiAoeyByZXBvc3RzQ291bnQ6IHN0YXRlLnJlcG9zdHNDb3VudCArIDEgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5raW5kID09PSA3KSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+ICh7IGxpa2VzQ291bnQ6IHN0YXRlLmxpa2VzQ291bnQgKyAxIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJub3N0ckVtYmVkQ2FyZFwiPlxuICAgICAgICA8UHJvZmlsZVxuICAgICAgICAgIHByb2ZpbGVQa2V5PXt0aGlzLnN0YXRlLnByb2ZpbGVQa2V5fVxuICAgICAgICAgIHByb2ZpbGU9e3RoaXMuc3RhdGUucHJvZmlsZX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPXtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubm90ZS5lcnJvclxuICAgICAgICAgICAgICA/ICdjYXJkQ29udGVudCBuZS10ZXh0LXJlZC04MDAnXG4gICAgICAgICAgICAgIDogJ2NhcmRDb250ZW50J1xuICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLm5vdGUuY29udGVudH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxNZXRhXG4gICAgICAgICAgbm90ZT17dGhpcy5zdGF0ZS5ub3RlfVxuICAgICAgICAgIGxpa2VzQ291bnQ9e3RoaXMuc3RhdGUubGlrZXNDb3VudH1cbiAgICAgICAgICByZXBsaWVzQ291bnQ9e3RoaXMuc3RhdGUucmVwbGllc0NvdW50fVxuICAgICAgICAgIHJlcG9zdHNDb3VudD17dGhpcy5zdGF0ZS5yZXBvc3RzQ291bnR9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vc3J0RW1iZWQ7XG4iLCJpbXBvcnQgeyBoLCByZW5kZXIgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IE5vc3RyRW1iZWQgZnJvbSAnLi9jb21wb25lbnRzL25vc3RyRW1iZWQnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub3RlSWQsIHdyYXBwZXIsIHJlbGF5KSB7XG4gIGNvbnN0IHJlbmRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHdyYXBwZXIpXG4gICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHdyYXBwZXIpXG4gICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgcmVuZGVyKGgoTm9zdHJFbWJlZCwgeyBub3RlSWQsIHJlbGF5IH0pLCByZW5kZXJFbGVtZW50KTtcbn1cbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsIkFMUEhBQkVUIiwiQUxQSEFCRVRfTUFQIiwieiIsImxlbmd0aCIsIngiLCJjaGFyQXQiLCJwb2x5bW9kU3RlcCIsInByZSIsImIiLCJwcmVmaXhDaGsiLCJwcmVmaXgiLCJjaGsiLCJpIiwiYyIsImNoYXJDb2RlQXQiLCJ2IiwiY29udmVydCIsImRhdGEiLCJpbkJpdHMiLCJvdXRCaXRzIiwicGFkIiwidmFsdWUiLCJiaXRzIiwibWF4ViIsInJlc3VsdCIsInB1c2giLCJ0b1dvcmRzIiwiYnl0ZXMiLCJmcm9tV29yZHNVbnNhZmUiLCJ3b3JkcyIsInJlcyIsIkFycmF5IiwiaXNBcnJheSIsImZyb21Xb3JkcyIsIkVycm9yIiwiZ2V0TGlicmFyeUZyb21FbmNvZGluZyIsImVuY29kaW5nIiwiRU5DT0RJTkdfQ09OU1QiLCJfX2RlY29kZSIsInN0ciIsIkxJTUlUIiwibG93ZXJlZCIsInRvTG93ZXJDYXNlIiwidXBwZXJlZCIsInRvVXBwZXJDYXNlIiwic3BsaXQiLCJsYXN0SW5kZXhPZiIsInNsaWNlIiwid29yZENoYXJzIiwidW5kZWZpbmVkIiwiZGVjb2RlVW5zYWZlIiwiZGVjb2RlIiwiZW5jb2RlIiwiVHlwZUVycm9yIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwib2JqIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwidGhlbiIsIm5zIiwiY3JlYXRlIiwiciIsImRlZiIsImN1cnJlbnQiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJrZXkiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ1IiwiZiIsInMiLCJhIiwiaCIsIm4iLCJsIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwieSIsImFyZ3VtZW50cyIsImNoaWxkcmVuIiwiZGVmYXVsdFByb3BzIiwicCIsInR5cGUiLCJwcm9wcyIsInJlZiIsIl9fayIsIl9fIiwiX19iIiwiX19lIiwiX19kIiwiX19jIiwiX19oIiwiY29uc3RydWN0b3IiLCJfX3YiLCJ2bm9kZSIsIl8iLCJzZXRQcm9wZXJ0eSIsInRlc3QiLCJnIiwic3R5bGUiLCJjc3NUZXh0IiwicmVwbGFjZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3IiwibSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJldmVudCIsImNvbnRleHQiLCJBIiwiUCIsImJhc2UiLCJDIiwic2V0VGltZW91dCIsIlQiLCIkIiwiX19yIiwiZGVib3VuY2VSZW5kZXJpbmciLCJlIiwic29ydCIsInNoaWZ0IiwiX19QIiwiTSIsIl9fbiIsIm93bmVyU1ZHRWxlbWVudCIsIk4iLCJIIiwiayIsIkkiLCJMIiwibmV4dFNpYmxpbmciLCJxIiwiUyIsImFwcGVuZENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiY29udGV4dFR5cGUiLCJfX0UiLCJyZW5kZXIiLCJCIiwic3ViIiwic3RhdGUiLCJfc2IiLCJfX3MiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJPIiwiZGlmZmVkIiwic29tZSIsImxvY2FsTmFtZSIsIm5vZGVUeXBlIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUVsZW1lbnQiLCJpcyIsImNoaWxkTm9kZXMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImF0dHJpYnV0ZXMiLCJuYW1lIiwiX19odG1sIiwiaW5uZXJIVE1MIiwiY2hlY2tlZCIsInVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkQiLCJmaXJzdENoaWxkIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwic2V0U3RhdGUiLCJjb21wb25lbnREaWRDYXRjaCIsImZvcmNlVXBkYXRlIiwiUHJvbWlzZSIsImJpbmQiLCJyZXNvbHZlIiwiXzBuIiwiQmlnSW50IiwiXzFuIiwiXzJuIiwiXzNuIiwiXzhuIiwiQ1VSVkUiLCJmcmVlemUiLCJHeCIsIkd5IiwiYmV0YSIsImRpdk5lYXJlc3QiLCJlbmRvIiwic3BsaXRTY2FsYXIiLCJhMSIsImIxIiwiYTIiLCJiMiIsIlBPV18yXzEyOCIsImMxIiwiYzIiLCJrMSIsIm1vZCIsImsyIiwiazFuZWciLCJrMm5lZyIsImZpZWxkTGVuIiwiZ3JvdXBMZW4iLCJjb21wcmVzc2VkTGVuIiwidW5jb21wcmVzc2VkTGVuIiwid2VpZXJzdHJhc3MiLCJ4MiIsIngzIiwiVVNFX0VORE9NT1JQSElTTSIsIlNoYUVycm9yIiwibWVzc2FnZSIsInN1cGVyIiwiYXNzZXJ0SmFjUG9pbnQiLCJvdGhlciIsIkphY29iaWFuUG9pbnQiLCJzdGF0aWMiLCJQb2ludCIsImVxdWFscyIsIlpFUk8iLCJwb2ludHMiLCJ0b0ludiIsIm51bXMiLCJzY3JhdGNoIiwibGFzdE11bHRpcGxpZWQiLCJyZWR1Y2UiLCJhY2MiLCJudW0iLCJpbnZlcnRlZCIsImludmVydCIsInJlZHVjZVJpZ2h0IiwiaW52ZXJ0QmF0Y2giLCJtYXAiLCJ0b0FmZmluZSIsInRvQWZmaW5lQmF0Y2giLCJmcm9tQWZmaW5lIiwiWDEiLCJZMSIsIloxIiwiWDIiLCJZMiIsIloyIiwiWjFaMSIsIloyWjIiLCJVMSIsIlUyIiwiUzEiLCJTMiIsIm5lZ2F0ZSIsImRvdWJsZSIsIngxYiIsIkUiLCJGIiwiWDMiLCJZMyIsIlozIiwiYWRkIiwiSEgiLCJISEgiLCJWIiwic3VidHJhY3QiLCJtdWx0aXBseVVuc2FmZSIsInNjYWxhciIsIlAwIiwibm9ybWFsaXplU2NhbGFyIiwiazFwIiwiazJwIiwicHJlY29tcHV0ZVdpbmRvdyIsIlciLCJ3aW5kb3dzIiwid2luZG93Iiwid05BRiIsImFmZmluZVBvaW50IiwiQkFTRSIsIl9XSU5ET1dfU0laRSIsInByZWNvbXB1dGVzIiwicG9pbnRQcmVjb21wdXRlcyIsIm5vcm1hbGl6ZVoiLCJzZXQiLCJ3aW5kb3dTaXplIiwibWFzayIsIm1heE51bWJlciIsInNoaWZ0QnkiLCJvZmZzZXQiLCJ3Yml0cyIsIk51bWJlciIsIm9mZnNldDEiLCJvZmZzZXQyIiwiTWF0aCIsImFicyIsImNvbmQxIiwiY29uZDIiLCJjb25zdFRpbWVOZWdhdGUiLCJtdWx0aXBseSIsInBvaW50IiwiZmFrZSIsImYxcCIsImYycCIsImludloiLCJpczAiLCJpejEiLCJpejIiLCJpejMiLCJheCIsImF5IiwienoiLCJjb25kaXRpb24iLCJpdGVtIiwibmVnIiwiV2Vha01hcCIsIl9zZXRXaW5kb3dTaXplIiwiZGVsZXRlIiwiaGFzRXZlblkiLCJpc1Nob3J0IiwiYnl0ZXNUb051bWJlciIsInN1YmFycmF5IiwiaXNWYWxpZEZpZWxkRWxlbWVudCIsIl82biIsIl8xMW4iLCJfMjJuIiwiXzIzbiIsIl80NG4iLCJfODhuIiwiYjMiLCJiNiIsInBvdzIiLCJiOSIsImIxMSIsImIyMiIsImI0NCIsImI4OCIsImIxNzYiLCJiMjIwIiwiYjIyMyIsInQxIiwidDIiLCJydCIsInhjIiwic3FydE1vZCIsImlzWU9kZCIsImFzc2VydFZhbGlkaXR5IiwiaGV4IiwiZW5zdXJlQnl0ZXMiLCJsZW4iLCJoZWFkZXIiLCJmcm9tQ29tcHJlc3NlZEhleCIsImZyb21VbmNvbXByZXNzZWRIZXgiLCJwcml2YXRlS2V5Iiwibm9ybWFsaXplUHJpdmF0ZUtleSIsIm1zZ0hhc2giLCJzaWduYXR1cmUiLCJyZWNvdmVyeSIsIm5vcm1hbGl6ZVNpZ25hdHVyZSIsImluY2x1ZGVzIiwidHJ1bmNhdGVIYXNoIiwicmFkaiIsInJpbnYiLCJ1MSIsInUyIiwiUiIsImZyb21IZXgiLCJudW1UbzMyYlN0ciIsIlEiLCJtdWx0aXBseUFuZEFkZFVuc2FmZSIsInRvUmF3Qnl0ZXMiLCJpc0NvbXByZXNzZWQiLCJoZXhUb0J5dGVzIiwidG9IZXgiLCJ0b0hleFgiLCJ0b1Jhd1giLCJtc2ciLCJsZWZ0IiwiYVAiLCJiUSIsInN1bSIsInNsaWNlREVSIiwicGFyc2VJbnQiLCJwYXJzZURFUkludCIsImJ5dGVzVG9IZXgiLCJTaWduYXR1cmUiLCJhcnIiLCJVaW50OEFycmF5IiwiaGV4VG9OdW1iZXIiLCJzQnl0ZXMiLCJyQnl0ZXNMZWZ0IiwicGFyc2VERVJTaWduYXR1cmUiLCJmcm9tREVSIiwiaXNXaXRoaW5DdXJ2ZU9yZGVyIiwiaGFzSGlnaFMiLCJIQUxGIiwibm9ybWFsaXplUyIsInRvREVSUmF3Qnl0ZXMiLCJ0b0RFUkhleCIsInNIZXgiLCJudW1iZXJUb0hleFVucGFkZGVkIiwickhleCIsInNIZXhMIiwickhleEwiLCJzTGVuIiwickxlbiIsInRvQ29tcGFjdFJhd0J5dGVzIiwidG9Db21wYWN0SGV4IiwiY29uY2F0Qnl0ZXMiLCJhcnJheXMiLCJldmVyeSIsImhleGVzIiwiZnJvbSIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJ1aW50OGEiLCJQT1dfMl8yNTYiLCJudW1UbzMyYiIsImFycmF5IiwiaiIsImhleEJ5dGUiLCJieXRlIiwiaXNOYU4iLCJpc1NhZmVJbnRlZ2VyIiwicG93ZXIiLCJudW1iZXIiLCJtb2R1bG8iLCJoYXNoIiwidHJ1bmNhdGVPbmx5IiwiZGVsdGEiLCJiaXRzMmludF8yIiwiX3NoYTI1NlN5bmMiLCJfaG1hY1NoYTI1NlN5bmMiLCJub3JtYWxpemVQdWJsaWNLZXkiLCJwdWJsaWNLZXkiLCJlcnJvciIsImZyb21Db21wYWN0Iiwic2Nobm9yckNoYWxsZW5nZUZpbmFsaXplIiwiY2giLCJTY2hub3JyU2lnbmF0dXJlIiwiSW50ZXJuYWxTY2hub3JyU2lnbmF0dXJlIiwiYXV4UmFuZCIsInV0aWxzIiwicmFuZG9tQnl0ZXMiLCJnZXRTY2FsYXIiLCJweCIsInJhbmQiLCJwcml2IiwiZnJvbVByaXZhdGVLZXkiLCJpbml0Tm9uY2UiLCJ0MGgiLCJmaW5hbGl6ZU5vbmNlIiwiazBoIiwiazAiLCJyeCIsImZpbmFsaXplU2lnIiwiYXN5bmMiLCJ0YWciLCJ0YWdnZWRIYXNoIiwiVEFHUyIsImF1eCIsIm5vbmNlIiwiY2hhbGxlbmdlIiwic2lnIiwic2Nobm9yclZlcmlmeSIsImNhbGNTeW5jIiwidGFnZ2VkSGFzaFN5bmMiLCJzY2hub3JyVmVyaWZ5U3luYyIsImluaXRTY2hub3JyVmVyaWZ5IiwicmF3IiwiZmluYWxpemVTY2hub3JyVmVyaWZ5Iiwic2Nobm9yciIsImdldFB1YmxpY0tleSIsInNpZ24iLCJwcml2S2V5IiwiY2FsYyIsInZlcmlmeSIsInNpZ25TeW5jIiwidmVyaWZ5U3luYyIsIm5vZGUiLCJ3ZWIiLCJzZWxmIiwiY3J5cHRvIiwiVEFHR0VEX0hBU0hfUFJFRklYRVMiLCJpc1ZhbGlkUHJpdmF0ZUtleSIsIl9iaWdpbnRUbzMyQnl0ZXMiLCJfbm9ybWFsaXplUHJpdmF0ZUtleSIsImhhc2hUb1ByaXZhdGVLZXkiLCJtaW5MZW4iLCJieXRlc0xlbmd0aCIsImdldFJhbmRvbVZhbHVlcyIsInJhbmRvbVByaXZhdGVLZXkiLCJwcmVjb21wdXRlIiwiY2FjaGVkIiwic2hhMjU2IiwibWVzc2FnZXMiLCJidWZmZXIiLCJzdWJ0bGUiLCJkaWdlc3QiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiaG1hY1NoYTI1NiIsImNrZXkiLCJpbXBvcnRLZXkiLCJjcmVhdGVIbWFjIiwic2hhMjU2U3luYyIsImhtYWNTaGEyNTZTeW5jIiwidGFnUCIsInRhZ0giLCJfSmFjb2JpYW5Qb2ludCIsImRlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJ2YWwiLCJfX3NvdXJjZSIsIl9fc2VsZiIsImFkZGl0aW9uYWxDbGFzc2VzIiwiY2xhc3NlcyIsImpvaW4iLCJ4bWxucyIsImZpbGwiLCJ2aWV3Qm94Iiwid2lkdGgiLCJoZWlnaHQiLCJzdHJva2UiLCJjbGFzcyIsIl9fSCIsIl9fViIsIl9fTiIsImZpbHRlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWNvbkNsYXNzZXMiLCJkaXNwbGF5VGV4dCIsImNvcHlUZXh0IiwiYnRuQ2xhc3NlcyIsInNldEJ0bkNsYXNzZXMiLCJ1c2VTdGF0ZSIsIm9uQ2xpY2siLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJ0cmltIiwiZXJyIiwiY29weVRvQ2xpcGJvYXJkIiwic3Vic3RyIiwiY2FjaGVkUHJvZmlsZVBpY3R1cmUiLCJlbmNvZGVkUHJvZmlsZVBrZXkiLCJ0cnVuY2F0ZWRQcm9maWxlUGtleSIsInByb2ZpbGVQa2V5IiwicHJvZmlsZSIsImhleFB1YmtleSIsImJiIiwiYmVjaDMyIiwiZ2V0TnB1YiIsInNyYyIsImRpc3BsYXlfbmFtZSIsImRhdGUiLCJlbmNvZGVkTm90ZUlkIiwiZm9ybWF0dGVkRGF0ZSIsIm5vdGUiLCJyZXBsaWVzQ291bnQiLCJyZXBvc3RzQ291bnQiLCJsaWtlc0NvdW50IiwiaWQiLCJjcmVhdGVkX2F0IiwiRGF0ZSIsInRvTG9jYWxlVGltZVN0cmluZyIsImhvdXIxMiIsImhvdXIiLCJtaW51dGUiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJoZXhJZCIsImdldE5vdGVJZCIsImhyZWYiLCJDb21wb25lbnQiLCJub3RlSWQiLCJyZWxheSIsInN0cmluZyIsInV0ZjgiLCJUZXh0RW5jb2RlciIsInNlY3AiLCJoYXNoQnVmZmVyIiwicHVia2V5Iiwia2luZCIsInRhZ3MiLCJjb250ZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImdldE5vc3RyRXZlbnRJRCIsImV2IiwidmFsaWRhdGVOb3N0ckV2ZW50IiwidmVyaWZ5Tm9zdHJTaWduYXR1cmUiLCJzb2NrZXQiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJmZXRjaE5vdGUiLCJjb25zb2xlIiwibG9nIiwidXJsIiwib25lcnJvciIsInN1YnMiLCJvbm1lc3NhZ2UiLCJwYXJzZSIsIm9uRXZlbnQiLCJsaXN0RXZlbnRzIiwib2siLCJyYW5kb20iLCJyZXEiLCJzZW5kIiwiY2xvc2UiLCJzdWJJZCIsImV2ZW50cyIsInF1ZXVlIiwidG8iLCJsaW1pdCIsImlzVmFsaWRFdmVudCIsInNwbGljZSIsImlkcyIsImtpbmRzIiwiZ2V0RXZlbnQiLCJmZXRjaFByb2ZpbGUiLCJmZXRjaE1ldGEiLCJjYXRjaCIsImF1dGhvcnMiLCJwYXJzZWRQcm9maWxlIiwiaW5pdCIsIndyYXBwZXIiLCJyZW5kZXJFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIk5vc3RyRW1iZWQiXSwic291cmNlUm9vdCI6IiJ9